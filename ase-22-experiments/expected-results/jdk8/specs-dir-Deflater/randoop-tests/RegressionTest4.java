import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        int int6 = deflater1.getTotalOut();
        boolean boolean7 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean11 = deflater10.finished();
        deflater10.finish();
        deflater10.end();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater18.setInput(byteArray30);
        deflater16.setInput(byteArray30);
        deflater16.setStrategy(0);
        boolean boolean36 = deflater16.needsInput();
        long long37 = deflater16.getBytesWritten();
        long long38 = deflater16.getBytesRead();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getAdler();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater40.setInput(byteArray53, 0, 0);
        long long58 = deflater40.getBytesRead();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater60.finish();
        long long72 = deflater60.getBytesRead();
        deflater60.reset();
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater60.setInput(byteArray80, (int) (short) 0, (int) (short) 1);
        deflater40.setDictionary(byteArray80);
        int int85 = deflater16.deflate(byteArray80);
        deflater10.setInput(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = deflater1.deflate(byteArray80, 12, 126419322, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        deflater2.finish();
        deflater2.reset();
        deflater2.end();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater12.setInput(byteArray24);
        deflater10.setInput(byteArray24);
        deflater10.setStrategy(0);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean32 = deflater31.finished();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater63.setInput(byteArray83, (int) (short) 0, (int) (short) 1);
        deflater48.setDictionary(byteArray83);
        int int88 = deflater34.deflate(byteArray83);
        int int91 = deflater31.deflate(byteArray83, (int) (byte) 1, 2);
        deflater10.setInput(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray83, 6, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater8.setInput(byteArray20);
        deflater6.setInput(byteArray20);
        deflater6.setStrategy(0);
        boolean boolean26 = deflater6.needsInput();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater31.setInput(byteArray43);
        deflater29.setInput(byteArray43);
        deflater6.setInput(byteArray43);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater49.setInput(byteArray69, (int) (short) 0, (int) (short) 1);
        deflater6.setInput(byteArray69);
        int int74 = deflater2.deflate(byteArray69);
        deflater2.reset();
        deflater2.setLevel(0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((-1), true);
        long long5 = deflater4.getBytesWritten();
        deflater4.setLevel(2);
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        deflater9.setDictionary(byteArray44);
        deflater4.setInput(byteArray44);
        long long50 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        deflater52.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setDictionary(byteArray65);
        deflater4.setInput(byteArray65);
        deflater1.setDictionary(byteArray65, 1, (int) (byte) 1);
        long long72 = deflater1.getBytesWritten();
        boolean boolean73 = deflater1.needsInput();
        long long74 = deflater1.getBytesRead();
        boolean boolean75 = deflater1.finished();
        java.lang.Class<?> wildcardClass76 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        deflater2.finish();
        long long6 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean9 = deflater8.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater40.setInput(byteArray60, (int) (short) 0, (int) (short) 1);
        deflater25.setDictionary(byteArray60);
        int int65 = deflater11.deflate(byteArray60);
        int int68 = deflater8.deflate(byteArray60, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        deflater70.finish();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getTotalIn();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater75.setInput(byteArray84);
        deflater70.setInput(byteArray84);
        deflater8.setInput(byteArray84);
        deflater2.setInput(byteArray84);
        int int89 = deflater2.getTotalOut();
        deflater2.reset();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(131074);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        boolean boolean2 = deflater1.finished();
        deflater1.setLevel(1);
        boolean boolean5 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getTotalIn();
        long long9 = deflater1.getBytesRead();
        deflater1.end();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater16.setInput(byteArray28);
        deflater16.setLevel((int) (byte) -1);
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater63.setInput(byteArray83, (int) (short) 0, (int) (short) 1);
        deflater48.setDictionary(byteArray83);
        int int88 = deflater34.deflate(byteArray83);
        deflater16.setInput(byteArray83);
        deflater12.setInput(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = deflater1.deflate(byteArray83, 126419322, 139789087);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        int int19 = deflater16.getTotalIn();
        deflater16.finish();
        deflater16.reset();
        boolean boolean22 = deflater16.finished();
        long long23 = deflater16.getBytesRead();
        long long24 = deflater16.getBytesWritten();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater30.setDictionary(byteArray65);
        deflater26.setInput(byteArray65);
        deflater16.setInput(byteArray65);
        deflater1.setInput(byteArray65);
        long long73 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        int int10 = deflater1.getTotalOut();
        boolean boolean11 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.setStrategy(0);
        long long6 = deflater2.getBytesRead();
        deflater2.setLevel(0);
        long long9 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater2.setLevel((-1));
        boolean boolean5 = deflater2.needsInput();
        deflater2.finish();
        deflater2.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        int int63 = deflater9.deflate(byteArray58);
        boolean boolean64 = deflater9.finished();
        int int65 = deflater9.getTotalIn();
        int int66 = deflater9.getTotalIn();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater68.finish();
        long long80 = deflater68.getBytesRead();
        deflater68.reset();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater68.setInput(byteArray88, (int) (short) 0, (int) (short) 1);
        int int92 = deflater9.deflate(byteArray88);
        deflater2.setDictionary(byteArray88);
        int int94 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        boolean boolean2 = deflater1.finished();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        deflater5.finish();
        deflater5.reset();
        boolean boolean11 = deflater5.finished();
        deflater5.finish();
        deflater5.finish();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        int int17 = deflater16.getAdler();
        boolean boolean18 = deflater16.finished();
        deflater16.finish();
        deflater16.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        deflater22.finish();
        long long26 = deflater22.getBytesWritten();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesRead();
        long long30 = deflater28.getBytesRead();
        long long31 = deflater28.getBytesWritten();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater28.setInput(byteArray53);
        deflater22.setInput(byteArray53);
        deflater16.setDictionary(byteArray53);
        deflater5.setDictionary(byteArray53);
        deflater1.setInput(byteArray53);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        int int2 = deflater1.getAdler();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        boolean boolean5 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        long long4 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        deflater6.finish();
        long long10 = deflater6.getBytesRead();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.reset();
        boolean boolean24 = deflater12.needsInput();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        int int37 = deflater12.deflate(byteArray35);
        int int38 = deflater6.deflate(byteArray35);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray35, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getAdler();
        deflater2.finish();
        deflater2.setLevel(6);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.needsInput();
        int int6 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        int int5 = deflater2.getAdler();
        deflater2.reset();
        long long7 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(6, false);
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean6 = deflater5.needsInput();
        long long7 = deflater5.getBytesWritten();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        int int13 = deflater9.getTotalIn();
        long long14 = deflater9.getBytesWritten();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        deflater16.reset();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater16.setInput(byteArray36, (int) (short) 0, (int) (short) 1);
        deflater16.reset();
        deflater16.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        long long44 = deflater43.getBytesWritten();
        int int45 = deflater43.getTotalOut();
        long long46 = deflater43.getBytesWritten();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        deflater48.reset();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater48.setDictionary(byteArray61);
        deflater43.setDictionary(byteArray61);
        deflater16.setInput(byteArray61);
        deflater9.setDictionary(byteArray61, 2, (int) (short) 0);
        deflater5.setInput(byteArray61);
        int int70 = deflater2.deflate(byteArray61);
        deflater2.end();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        long long64 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        boolean boolean5 = deflater2.needsInput();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (short) -1, true);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        int int13 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater18.setInput(byteArray30);
        deflater16.setInput(byteArray30);
        deflater16.setStrategy(0);
        boolean boolean36 = deflater16.needsInput();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater41.setInput(byteArray53);
        deflater39.setInput(byteArray53);
        deflater16.setInput(byteArray53);
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater16.setInput(byteArray79);
        int int84 = deflater10.deflate(byteArray79);
        deflater8.setInput(byteArray79, 1, 0);
        deflater2.setDictionary(byteArray79);
        java.lang.Class<?> wildcardClass89 = byteArray79.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        deflater1.setLevel(2);
        int int13 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(126419322);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        int int9 = deflater6.getTotalIn();
        deflater6.finish();
        deflater6.reset();
        boolean boolean12 = deflater6.finished();
        long long13 = deflater6.getBytesRead();
        long long14 = deflater6.getBytesWritten();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater16.setInput(byteArray55);
        deflater6.setInput(byteArray55);
        deflater2.setInput(byteArray55);
        byte[] byteArray63 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray63, (int) 'a', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        boolean boolean4 = deflater2.needsInput();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        int int9 = deflater6.getTotalIn();
        deflater6.finish();
        deflater6.reset();
        boolean boolean12 = deflater6.finished();
        long long13 = deflater6.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(2, true);
        int int17 = deflater16.getTotalIn();
        int int18 = deflater16.getTotalOut();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater20.setInput(byteArray32);
        boolean boolean35 = deflater20.needsInput();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getTotalIn();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater58.setInput(byteArray67);
        deflater55.setInput(byteArray67);
        deflater53.setInput(byteArray67);
        deflater53.setStrategy(0);
        boolean boolean73 = deflater53.needsInput();
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater78 = new java.util.zip.Deflater((int) (byte) 1);
        deflater78.reset();
        java.util.zip.Deflater deflater81 = new java.util.zip.Deflater((int) (byte) 1);
        deflater81.reset();
        int int83 = deflater81.getTotalIn();
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater81.setInput(byteArray90);
        deflater78.setInput(byteArray90);
        deflater76.setInput(byteArray90);
        deflater53.setInput(byteArray90);
        deflater37.setDictionary(byteArray90);
        int int96 = deflater20.deflate(byteArray90);
        int int97 = deflater16.deflate(byteArray90);
        deflater6.setInput(byteArray90);
        int int99 = deflater2.deflate(byteArray90);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        deflater2.reset();
        long long24 = deflater2.getBytesWritten();
        boolean boolean25 = deflater2.finished();
        java.lang.Class<?> wildcardClass26 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        deflater1.end();
        deflater1.setLevel((-1));
        boolean boolean9 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        deflater16.reset();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater16.setInput(byteArray36, (int) (short) 0, (int) (short) 1);
        int int40 = deflater1.deflate(byteArray36);
        long long41 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        deflater2.finish();
        int int71 = deflater2.getAdler();
        java.lang.Class<?> wildcardClass72 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater19.setInput(byteArray31);
        deflater17.setInput(byteArray31);
        deflater17.setStrategy(0);
        boolean boolean37 = deflater17.needsInput();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater42.setInput(byteArray54);
        deflater40.setInput(byteArray54);
        deflater17.setInput(byteArray54);
        deflater1.setDictionary(byteArray54);
        long long60 = deflater1.getBytesRead();
        boolean boolean61 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 0, true);
        boolean boolean3 = deflater2.needsInput();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater13.setInput(byteArray25);
        deflater11.setInput(byteArray25);
        deflater11.setStrategy(0);
        boolean boolean31 = deflater11.needsInput();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater11.setInput(byteArray48);
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        deflater11.setInput(byteArray74);
        int int79 = deflater5.deflate(byteArray74);
        deflater2.setInput(byteArray74);
        deflater2.setLevel(6);
        int int83 = deflater2.getTotalOut();
        boolean boolean84 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.setLevel(0);
        int int61 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        long long3 = deflater1.getBytesRead();
        long long4 = deflater1.getBytesRead();
        deflater1.reset();
        int int6 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        boolean boolean2 = deflater1.finished();
        deflater1.setLevel(1);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater(3, true);
        int int8 = deflater7.getAdler();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        int int13 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater18.setInput(byteArray30);
        deflater16.setInput(byteArray30);
        deflater16.setStrategy(0);
        boolean boolean36 = deflater16.needsInput();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater41.setInput(byteArray53);
        deflater39.setInput(byteArray53);
        deflater16.setInput(byteArray53);
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater16.setInput(byteArray79);
        int int84 = deflater10.deflate(byteArray79);
        deflater7.setInput(byteArray79);
        deflater1.setInput(byteArray79);
        boolean boolean87 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        long long19 = deflater1.getBytesRead();
        int int20 = deflater1.getAdler();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        int int25 = deflater22.getTotalIn();
        int int26 = deflater22.getTotalIn();
        deflater22.setLevel((int) (short) 1);
        int int29 = deflater22.getAdler();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        int int34 = deflater31.getTotalIn();
        int int35 = deflater31.getTotalIn();
        long long36 = deflater31.getBytesWritten();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater38.reset();
        deflater38.reset();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        long long66 = deflater65.getBytesWritten();
        int int67 = deflater65.getTotalOut();
        long long68 = deflater65.getBytesWritten();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        deflater70.reset();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater74.setInput(byteArray83);
        deflater70.setDictionary(byteArray83);
        deflater65.setDictionary(byteArray83);
        deflater38.setInput(byteArray83);
        deflater31.setDictionary(byteArray83, 2, (int) (short) 0);
        deflater22.setInput(byteArray83);
        int int92 = deflater1.deflate(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater7.setInput(byteArray19);
        deflater5.setInput(byteArray19);
        int int23 = deflater2.deflate(byteArray19);
        boolean boolean24 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        deflater1.setLevel(1);
        long long10 = deflater1.getBytesRead();
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean18 = deflater1.finished();
        deflater1.finish();
        int int20 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(8, true);
        long long3 = deflater2.getBytesWritten();
        boolean boolean4 = deflater2.finished();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((-1));
        int int7 = deflater6.getTotalIn();
        boolean boolean8 = deflater6.finished();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        deflater10.reset();
        deflater10.reset();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        deflater15.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater15.setDictionary(byteArray28);
        int int31 = deflater10.deflate(byteArray28);
        int int32 = deflater6.deflate(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray28, 126419322, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        boolean boolean14 = deflater1.needsInput();
        boolean boolean15 = deflater1.needsInput();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        int int20 = deflater17.getTotalIn();
        deflater17.finish();
        deflater17.reset();
        boolean boolean23 = deflater17.finished();
        long long24 = deflater17.getBytesRead();
        long long25 = deflater17.getBytesWritten();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater46.setInput(byteArray66, (int) (short) 0, (int) (short) 1);
        deflater31.setDictionary(byteArray66);
        deflater27.setInput(byteArray66);
        deflater17.setInput(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = deflater1.deflate(byteArray66, (int) '#', 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        deflater1.finish();
        boolean boolean9 = deflater1.finished();
        int int10 = deflater1.getAdler();
        byte[] byteArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        deflater4.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater19.setInput(byteArray39, (int) (short) 0, (int) (short) 1);
        deflater4.setDictionary(byteArray39);
        deflater1.setInput(byteArray39);
        int int45 = deflater1.getTotalIn();
        int int46 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        deflater2.finish();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater7.setInput(byteArray19);
        boolean boolean22 = deflater7.needsInput();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater42.setInput(byteArray54);
        deflater40.setInput(byteArray54);
        deflater40.setStrategy(0);
        boolean boolean60 = deflater40.needsInput();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater65.setInput(byteArray77);
        deflater63.setInput(byteArray77);
        deflater40.setInput(byteArray77);
        deflater24.setDictionary(byteArray77);
        int int83 = deflater7.deflate(byteArray77);
        deflater2.setDictionary(byteArray77);
        int int85 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        boolean boolean46 = deflater1.needsInput();
        int int47 = deflater1.getAdler();
        deflater1.setLevel(2);
        long long50 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesWritten();
        int int3 = deflater0.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean6 = deflater5.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater8.deflate(byteArray57);
        int int65 = deflater5.deflate(byteArray57, (int) (byte) 1, 2);
        int int68 = deflater0.deflate(byteArray57, 0, 1);
        boolean boolean69 = deflater0.finished();
        long long70 = deflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass71 = deflater0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        deflater1.end();
        boolean boolean7 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater23.setInput(byteArray43, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getAdler();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater51.setInput(byteArray64, 0, 0);
        int int69 = deflater49.deflate(byteArray64);
        deflater23.setInput(byteArray64);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray64, (int) (byte) 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        int int46 = deflater1.getTotalIn();
        long long47 = deflater1.getBytesRead();
        long long48 = deflater1.getBytesWritten();
        deflater1.finish();
        int int50 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        long long25 = deflater2.getBytesWritten();
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(126419322);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        long long22 = deflater1.getBytesWritten();
        deflater1.finish();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean26 = deflater25.finished();
        deflater25.reset();
        boolean boolean28 = deflater25.finished();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater30.setInput(byteArray63);
        int int68 = deflater25.deflate(byteArray63);
        deflater1.setDictionary(byteArray63);
        boolean boolean70 = deflater1.finished();
        boolean boolean71 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        long long4 = deflater1.getBytesWritten();
        int int5 = deflater1.getTotalOut();
        deflater1.setLevel(0);
        deflater1.setLevel((int) (byte) 0);
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        int int14 = deflater11.getTotalIn();
        deflater11.finish();
        deflater11.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater11.setInput(byteArray27);
        long long30 = deflater11.getBytesWritten();
        deflater11.reset();
        int int32 = deflater11.getAdler();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        int int48 = deflater34.getAdler();
        byte[] byteArray50 = new byte[] { (byte) 10 };
        deflater34.setDictionary(byteArray50);
        deflater11.setDictionary(byteArray50);
        deflater1.setInput(byteArray50);
        deflater1.end();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10]");
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater13.setInput(byteArray25);
        deflater11.setInput(byteArray25);
        deflater11.setStrategy(0);
        boolean boolean31 = deflater11.needsInput();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater11.setInput(byteArray48);
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        deflater11.setInput(byteArray74);
        int int79 = deflater5.deflate(byteArray74);
        deflater2.setInput(byteArray74);
        int int81 = deflater2.getAdler();
        int int82 = deflater2.getAdler();
        boolean boolean83 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        deflater5.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean32 = deflater31.finished();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater63.finish();
        long long75 = deflater63.getBytesRead();
        deflater63.reset();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater63.setInput(byteArray83, (int) (short) 0, (int) (short) 1);
        deflater48.setDictionary(byteArray83);
        int int88 = deflater34.deflate(byteArray83);
        int int91 = deflater31.deflate(byteArray83, (int) (byte) 1, 2);
        int int92 = deflater5.deflate(byteArray83);
        deflater1.setDictionary(byteArray83, 0, 1);
        long long96 = deflater1.getBytesRead();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (short) -1, false);
        int int14 = deflater13.getTotalIn();
        int int15 = deflater13.getTotalIn();
        boolean boolean16 = deflater13.finished();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesWritten();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater18.deflate(byteArray57);
        deflater13.setDictionary(byteArray57);
        int int64 = deflater1.deflate(byteArray57);
        int int65 = deflater1.getTotalIn();
        long long66 = deflater1.getBytesRead();
        boolean boolean67 = deflater1.finished();
        boolean boolean68 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        boolean boolean13 = deflater1.needsInput();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        int int26 = deflater1.deflate(byteArray24);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        deflater28.reset();
        boolean boolean32 = deflater28.finished();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater(3, true);
        int int36 = deflater35.getAdler();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((-1), true);
        long long40 = deflater39.getBytesWritten();
        deflater39.setLevel(2);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater44.setDictionary(byteArray79);
        deflater39.setInput(byteArray79);
        deflater35.setDictionary(byteArray79);
        int int86 = deflater28.deflate(byteArray79);
        deflater1.setInput(byteArray79);
        boolean boolean88 = deflater1.finished();
        int int89 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        long long74 = deflater1.getBytesRead();
        long long75 = deflater1.getBytesRead();
        int int76 = deflater1.getTotalOut();
        java.lang.Class<?> wildcardClass77 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        int int8 = deflater1.getAdler();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        int int13 = deflater10.getTotalIn();
        int int14 = deflater10.getTotalIn();
        long long15 = deflater10.getBytesWritten();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater17.setInput(byteArray37, (int) (short) 0, (int) (short) 1);
        deflater17.reset();
        deflater17.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        long long45 = deflater44.getBytesWritten();
        int int46 = deflater44.getTotalOut();
        long long47 = deflater44.getBytesWritten();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        deflater49.reset();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater49.setDictionary(byteArray62);
        deflater44.setDictionary(byteArray62);
        deflater17.setInput(byteArray62);
        deflater10.setDictionary(byteArray62, 2, (int) (short) 0);
        deflater1.setInput(byteArray62);
        long long71 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        long long74 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.setStrategy((int) (byte) 1);
        int int78 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesWritten();
        int int3 = deflater0.getTotalIn();
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 1 };
        deflater0.setInput(byteArray6);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((-1), true);
        long long11 = deflater10.getBytesWritten();
        deflater10.setLevel(2);
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        deflater10.setInput(byteArray50);
        long long56 = deflater10.getBytesRead();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        deflater58.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater58.setDictionary(byteArray71);
        deflater10.setInput(byteArray71);
        deflater0.setInput(byteArray71);
        long long76 = deflater0.getBytesWritten();
        int int77 = deflater0.getAdler();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (short) 0);
        java.lang.Class<?> wildcardClass2 = deflater1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        deflater2.setLevel((int) (short) -1);
        deflater2.end();
        boolean boolean10 = deflater2.needsInput();
        deflater2.finish();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        long long14 = deflater13.getBytesWritten();
        long long15 = deflater13.getBytesWritten();
        deflater13.setLevel((int) (byte) 0);
        deflater13.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (short) -1, false);
        long long22 = deflater21.getBytesWritten();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater21.setDictionary(byteArray33);
        deflater13.setInput(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            int int40 = deflater2.deflate(byteArray33, (int) 'a', 126419322, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.finished();
        deflater2.reset();
        boolean boolean5 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        long long48 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        deflater50.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater50.setDictionary(byteArray63);
        deflater2.setInput(byteArray63);
        int int67 = deflater2.getTotalOut();
        long long68 = deflater2.getBytesWritten();
        int int69 = deflater2.getTotalIn();
        int int70 = deflater2.getAdler();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        long long20 = deflater1.getBytesWritten();
        deflater1.reset();
        int int22 = deflater1.getAdler();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        deflater24.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater24.setDictionary(byteArray37);
        deflater1.setInput(byteArray37, 3, 3);
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        boolean boolean14 = deflater1.needsInput();
        boolean boolean15 = deflater1.needsInput();
        long long16 = deflater1.getBytesRead();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getAdler();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater7.setInput(byteArray20, 0, 0);
        int int25 = deflater2.deflate(byteArray20);
        int int26 = deflater2.getTotalIn();
        deflater2.reset();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        boolean boolean91 = deflater2.finished();
        int int92 = deflater2.getTotalIn();
        int int93 = deflater2.getTotalOut();
        long long94 = deflater2.getBytesRead();
        deflater2.reset();
        int int96 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 6L + "'", long94 == 6L);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        int int22 = deflater1.getTotalIn();
        long long23 = deflater1.getBytesWritten();
        boolean boolean24 = deflater1.finished();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(8);
        deflater1.end();
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        deflater1.finish();
        boolean boolean9 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        int int6 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        deflater8.reset();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater8.setInput(byteArray28, (int) (short) 0, (int) (short) 1);
        deflater8.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater34.setInput(byteArray54, (int) (short) 0, (int) (short) 1);
        int int58 = deflater8.deflate(byteArray54);
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        int int62 = deflater60.getTotalIn();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater60.setInput(byteArray69);
        deflater8.setInput(byteArray69);
        deflater1.setInput(byteArray69);
        boolean boolean73 = deflater1.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        boolean boolean6 = deflater2.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(126419322);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean27 = deflater1.needsInput();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater35.setInput(byteArray47);
        deflater33.setInput(byteArray47);
        int int51 = deflater30.deflate(byteArray47);
        int int52 = deflater1.deflate(byteArray47);
        deflater1.setStrategy(0);
        int int55 = deflater1.getTotalIn();
        java.lang.Class<?> wildcardClass56 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((-1), true);
        long long24 = deflater23.getBytesWritten();
        deflater23.setLevel(2);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        deflater23.setInput(byteArray63);
        deflater9.setDictionary(byteArray63);
        boolean boolean70 = deflater9.finished();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater72.setInput(byteArray81);
        deflater72.finish();
        long long84 = deflater72.getBytesRead();
        deflater72.reset();
        byte[] byteArray92 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater72.setInput(byteArray92, (int) (short) 0, (int) (short) 1);
        deflater9.setInput(byteArray92);
        deflater1.setDictionary(byteArray92);
        int int98 = deflater1.getAdler();
        int int99 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 118882828 + "'", int98 == 118882828);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 118882828 + "'", int99 == 118882828);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        boolean boolean48 = deflater2.finished();
        boolean boolean49 = deflater2.finished();
        long long50 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        boolean boolean62 = deflater1.needsInput();
        boolean boolean63 = deflater1.finished();
        boolean boolean64 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getAdler();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater29.setInput(byteArray42, 0, 0);
        int int47 = deflater27.deflate(byteArray42);
        deflater1.setInput(byteArray42);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        deflater53.finish();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getTotalIn();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater58.setInput(byteArray67);
        deflater53.setInput(byteArray67);
        int int70 = deflater50.deflate(byteArray67);
        deflater1.setInput(byteArray67);
        boolean boolean72 = deflater1.needsInput();
        java.lang.Class<?> wildcardClass73 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        long long2 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(139789087);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        deflater2.finish();
        deflater2.reset();
        int int25 = deflater2.getAdler();
        boolean boolean26 = deflater2.finished();
        int int27 = deflater2.getAdler();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        deflater29.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater29.setDictionary(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = deflater2.deflate(byteArray42, (int) (short) 100, 126419322, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater44.setInput(byteArray56);
        deflater42.setInput(byteArray56);
        deflater42.setStrategy(0);
        boolean boolean62 = deflater42.needsInput();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater67.setInput(byteArray79);
        deflater65.setInput(byteArray79);
        deflater42.setInput(byteArray79);
        deflater1.setDictionary(byteArray79, (int) (short) 0, (int) (byte) 0);
        long long87 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass88 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean28 = deflater27.finished();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater44.setDictionary(byteArray79);
        int int84 = deflater30.deflate(byteArray79);
        int int87 = deflater27.deflate(byteArray79, (int) (byte) 1, 2);
        int int88 = deflater1.deflate(byteArray79);
        long long89 = deflater1.getBytesRead();
        int int90 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        boolean boolean70 = deflater2.finished();
        boolean boolean71 = deflater2.needsInput();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.end();
        deflater1.setLevel((int) (byte) -1);
        deflater1.setStrategy((int) (short) 1);
        java.lang.Class<?> wildcardClass63 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        deflater8.reset();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater8.setInput(byteArray28, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getAdler();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater36.setInput(byteArray49, 0, 0);
        int int54 = deflater34.deflate(byteArray49);
        deflater8.setInput(byteArray49);
        int int56 = deflater1.deflate(byteArray49);
        boolean boolean57 = deflater1.finished();
        deflater1.reset();
        boolean boolean59 = deflater1.needsInput();
        long long60 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        int int6 = deflater1.getTotalOut();
        boolean boolean7 = deflater1.finished();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        deflater9.reset();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater9.setDictionary(byteArray22);
        int int25 = deflater9.getAdler();
        int int26 = deflater9.getAdler();
        deflater9.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        long long30 = deflater29.getBytesWritten();
        long long31 = deflater29.getBytesWritten();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater48.setInput(byteArray68, (int) (short) 0, (int) (short) 1);
        deflater33.setDictionary(byteArray68);
        deflater29.setInput(byteArray68);
        deflater9.setInput(byteArray68);
        int int75 = deflater1.deflate(byteArray68);
        boolean boolean76 = deflater1.needsInput();
        boolean boolean77 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 87360012 + "'", int25 == 87360012);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 87360012 + "'", int26 == 87360012);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesWritten();
        boolean boolean10 = deflater1.needsInput();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((-1), false);
        int int14 = deflater13.getAdler();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((-1), true);
        long long31 = deflater30.getBytesWritten();
        deflater30.setLevel(2);
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater50.setInput(byteArray70, (int) (short) 0, (int) (short) 1);
        deflater35.setDictionary(byteArray70);
        deflater30.setInput(byteArray70);
        deflater16.setDictionary(byteArray70);
        deflater13.setDictionary(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = deflater1.deflate(byteArray70, 9, 139789087);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        int int9 = deflater1.getAdler();
        boolean boolean10 = deflater1.finished();
        deflater1.finish();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        deflater2.setLevel(1);
        boolean boolean27 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        deflater1.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1, true);
        boolean boolean21 = deflater20.finished();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean25 = deflater24.needsInput();
        int int26 = deflater24.getTotalOut();
        int int27 = deflater24.getTotalIn();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater();
        deflater28.reset();
        long long30 = deflater28.getBytesWritten();
        int int31 = deflater28.getTotalIn();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean34 = deflater33.finished();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater50.setDictionary(byteArray85);
        int int90 = deflater36.deflate(byteArray85);
        int int93 = deflater33.deflate(byteArray85, (int) (byte) 1, 2);
        int int96 = deflater28.deflate(byteArray85, 0, 1);
        deflater24.setInput(byteArray85);
        int int98 = deflater20.deflate(byteArray85);
        deflater1.setInput(byteArray85);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 6 + "'", int90 == 6);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        boolean boolean14 = deflater1.needsInput();
        boolean boolean15 = deflater1.needsInput();
        long long16 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass17 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        deflater1.end();
        deflater1.finish();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        long long17 = deflater1.getBytesWritten();
        deflater1.setStrategy(0);
        int int20 = deflater1.getTotalOut();
        deflater1.reset();
        int int22 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(3, true);
        int int20 = deflater19.getAdler();
        deflater19.setStrategy(0);
        int int23 = deflater19.getTotalOut();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        long long26 = deflater25.getBytesWritten();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        int int42 = deflater28.getAdler();
        boolean boolean43 = deflater28.needsInput();
        int int44 = deflater28.getTotalIn();
        int int45 = deflater28.getTotalIn();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        int int86 = deflater47.deflate(byteArray82);
        deflater28.setDictionary(byteArray82);
        deflater25.setInput(byteArray82);
        int int91 = deflater19.deflate(byteArray82, (int) (byte) 1, 3);
        int int92 = deflater1.deflate(byteArray82);
        deflater1.setStrategy(0);
        deflater1.end();
        deflater1.setLevel(9);
        boolean boolean98 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        long long2 = deflater1.getBytesWritten();
        deflater1.finish();
        deflater1.finish();
        deflater1.setLevel(6);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        long long74 = deflater1.getBytesRead();
        long long75 = deflater1.getBytesRead();
        int int76 = deflater1.getTotalOut();
        deflater1.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.finish();
        int int9 = deflater1.getAdler();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        deflater11.finish();
        int int15 = deflater11.getTotalOut();
        boolean boolean16 = deflater11.needsInput();
        long long17 = deflater11.getBytesRead();
        deflater11.finish();
        boolean boolean19 = deflater11.finished();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (short) -1, false);
        int int23 = deflater22.getTotalIn();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater43.setInput(byteArray55);
        deflater41.setInput(byteArray55);
        deflater41.setStrategy(0);
        boolean boolean61 = deflater41.needsInput();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater66.setInput(byteArray78);
        deflater64.setInput(byteArray78);
        deflater41.setInput(byteArray78);
        deflater25.setDictionary(byteArray78);
        deflater22.setInput(byteArray78);
        int int85 = deflater11.deflate(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = deflater1.deflate(byteArray78, (int) (short) 1, (int) (short) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (short) -1, false);
        int int14 = deflater13.getTotalIn();
        int int15 = deflater13.getTotalIn();
        boolean boolean16 = deflater13.finished();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesWritten();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater18.deflate(byteArray57);
        deflater13.setDictionary(byteArray57);
        int int64 = deflater1.deflate(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(196610);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        int int26 = deflater1.getAdler();
        int int27 = deflater1.getTotalOut();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        deflater1.finish();
        int int4 = deflater1.getAdler();
        long long5 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        int int10 = deflater7.getTotalIn();
        deflater7.finish();
        deflater7.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater7.setInput(byteArray23);
        deflater7.finish();
        int int27 = deflater7.getAdler();
        int int28 = deflater7.getTotalIn();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((-1), true);
        long long32 = deflater31.getBytesWritten();
        deflater31.setLevel(2);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater51.setInput(byteArray71, (int) (short) 0, (int) (short) 1);
        deflater36.setDictionary(byteArray71);
        deflater31.setInput(byteArray71);
        deflater7.setDictionary(byteArray71);
        deflater1.setInput(byteArray71, 6, (int) (short) 0);
        boolean boolean81 = deflater1.finished();
        long long82 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        deflater2.finish();
        java.lang.Class<?> wildcardClass7 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesWritten();
        deflater1.end();
        deflater1.finish();
        boolean boolean12 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        deflater1.finish();
        int int4 = deflater1.getAdler();
        boolean boolean5 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 0, true);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        deflater1.reset();
        int int48 = deflater1.getTotalOut();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(196610);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 1, false);
        int int3 = deflater2.getAdler();
        int int4 = deflater2.getTotalIn();
        int int5 = deflater2.getTotalIn();
        boolean boolean6 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        deflater1.end();
        deflater1.end();
        deflater1.setStrategy(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        int int6 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater8.setInput(byteArray21);
        int int26 = deflater1.deflate(byteArray21, 0, 0);
        int int27 = deflater1.getTotalIn();
        int int28 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        boolean boolean4 = deflater1.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater7.finish();
        boolean boolean9 = deflater7.finished();
        deflater7.setLevel(8);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        deflater13.reset();
        int int27 = deflater13.getTotalIn();
        deflater13.finish();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater(3, true);
        int int32 = deflater31.getAdler();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((-1), true);
        long long36 = deflater35.getBytesWritten();
        deflater35.setLevel(2);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater55.setInput(byteArray75, (int) (short) 0, (int) (short) 1);
        deflater40.setDictionary(byteArray75);
        deflater35.setInput(byteArray75);
        deflater31.setDictionary(byteArray75);
        deflater13.setInput(byteArray75);
        deflater7.setInput(byteArray75, 0, 3);
        int int86 = deflater1.deflate(byteArray75);
        deflater1.finish();
        java.lang.Class<?> wildcardClass88 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        long long3 = deflater2.getBytesRead();
        deflater2.end();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 0, true);
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        long long10 = deflater9.getBytesRead();
        deflater9.finish();
        int int12 = deflater9.getAdler();
        long long13 = deflater9.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        int int18 = deflater15.getTotalIn();
        deflater15.finish();
        deflater15.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater15.setInput(byteArray31);
        deflater15.finish();
        int int35 = deflater15.getAdler();
        int int36 = deflater15.getTotalIn();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((-1), true);
        long long40 = deflater39.getBytesWritten();
        deflater39.setLevel(2);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater44.setDictionary(byteArray79);
        deflater39.setInput(byteArray79);
        deflater15.setDictionary(byteArray79);
        deflater9.setInput(byteArray79, 6, (int) (short) 0);
        deflater7.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = deflater2.deflate(byteArray79, (int) (byte) 1, 131074);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        java.lang.Class<?> wildcardClass59 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        deflater1.setInput(byteArray56, 3, 1);
        deflater1.reset();
        int int66 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass67 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesRead();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        boolean boolean4 = deflater2.needsInput();
        boolean boolean5 = deflater2.needsInput();
        long long6 = deflater2.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater8.setInput(byteArray21, 0, 0);
        int int26 = deflater6.deflate(byteArray21);
        deflater6.end();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        long long30 = deflater29.getBytesWritten();
        int int31 = deflater29.getTotalIn();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater48.setInput(byteArray68, (int) (short) 0, (int) (short) 1);
        deflater33.setDictionary(byteArray68);
        int int73 = deflater29.deflate(byteArray68);
        deflater6.setInput(byteArray68);
        int int75 = deflater1.deflate(byteArray68);
        deflater1.finish();
        java.lang.Class<?> wildcardClass77 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setInput(byteArray40);
        int int46 = deflater1.getTotalIn();
        int int47 = deflater1.getAdler();
        int int48 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        int int53 = deflater50.getTotalIn();
        deflater50.finish();
        deflater50.reset();
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        int int59 = deflater57.getTotalIn();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater57.setInput(byteArray66);
        deflater50.setInput(byteArray66);
        long long69 = deflater50.getBytesWritten();
        deflater50.reset();
        int int71 = deflater50.getAdler();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        int int75 = deflater73.getTotalIn();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater73.setInput(byteArray82);
        deflater73.finish();
        long long85 = deflater73.getBytesRead();
        deflater73.reset();
        int int87 = deflater73.getAdler();
        byte[] byteArray89 = new byte[] { (byte) 10 };
        deflater73.setDictionary(byteArray89);
        deflater50.setDictionary(byteArray89);
        deflater1.setInput(byteArray89);
        boolean boolean93 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        deflater2.finish();
        int int4 = deflater2.getAdler();
        int int5 = deflater2.getTotalOut();
        int int6 = deflater2.getAdler();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(9, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater4.setLevel((int) (byte) -1);
        deflater4.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        long long24 = deflater23.getBytesWritten();
        int int25 = deflater23.getTotalIn();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater42.setInput(byteArray62, (int) (short) 0, (int) (short) 1);
        deflater27.setDictionary(byteArray62);
        int int67 = deflater23.deflate(byteArray62);
        deflater4.setDictionary(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray62, (int) (byte) -1, 720907);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        long long40 = deflater1.getBytesRead();
        deflater1.setStrategy(0);
        boolean boolean43 = deflater1.finished();
        deflater1.setStrategy(0);
        boolean boolean46 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalOut();
        long long20 = deflater1.getBytesWritten();
        int int21 = deflater1.getTotalIn();
        int int22 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getAdler();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        long long7 = deflater6.getBytesWritten();
        int int8 = deflater6.getTotalOut();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        deflater10.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater25.setInput(byteArray45, (int) (short) 0, (int) (short) 1);
        deflater10.setDictionary(byteArray45);
        deflater6.setDictionary(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray45, (int) (short) 1, 126419322);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        boolean boolean4 = deflater1.finished();
        int int5 = deflater1.getTotalOut();
        int int6 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        int int2 = deflater1.getTotalOut();
        deflater1.setLevel(8);
        deflater1.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater25.setInput(byteArray37);
        deflater23.setInput(byteArray37);
        deflater23.setStrategy(0);
        boolean boolean43 = deflater23.needsInput();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater48.setInput(byteArray60);
        deflater46.setInput(byteArray60);
        deflater23.setInput(byteArray60);
        deflater7.setDictionary(byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray60, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        deflater14.reset();
        deflater14.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        deflater19.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater19.setDictionary(byteArray32);
        int int35 = deflater14.deflate(byteArray32);
        deflater1.setDictionary(byteArray32);
        long long37 = deflater1.getBytesWritten();
        long long38 = deflater1.getBytesWritten();
        boolean boolean39 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesWritten();
        int int3 = deflater0.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean6 = deflater5.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater8.finish();
        long long20 = deflater8.getBytesRead();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater8.deflate(byteArray57);
        int int65 = deflater5.deflate(byteArray57, (int) (byte) 1, 2);
        int int68 = deflater0.deflate(byteArray57, 0, 1);
        boolean boolean69 = deflater0.finished();
        long long70 = deflater0.getBytesWritten();
        int int71 = deflater0.getTotalIn();
        int int72 = deflater0.getAdler();
        java.lang.Class<?> wildcardClass73 = deflater0.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getTotalOut();
        int int7 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        deflater9.finish();
        deflater9.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater9.setInput(byteArray25);
        deflater9.finish();
        int int29 = deflater9.getAdler();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater49.setInput(byteArray61);
        deflater47.setInput(byteArray61);
        deflater47.setStrategy(0);
        boolean boolean67 = deflater47.needsInput();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getTotalIn();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater75.setInput(byteArray84);
        deflater72.setInput(byteArray84);
        deflater70.setInput(byteArray84);
        deflater47.setInput(byteArray84);
        deflater31.setDictionary(byteArray84);
        deflater9.setDictionary(byteArray84);
        int int91 = deflater2.deflate(byteArray84);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        deflater2.setLevel((int) (short) -1);
        deflater2.end();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        long long12 = deflater11.getBytesWritten();
        long long13 = deflater11.getBytesWritten();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        deflater11.setInput(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray50, (int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setInput(byteArray46, 0, 0);
        int int51 = deflater31.deflate(byteArray46);
        deflater5.setInput(byteArray46);
        deflater1.setDictionary(byteArray46);
        int int54 = deflater1.getAdler();
        deflater1.reset();
        long long56 = deflater1.getBytesRead();
        int int57 = deflater1.getTotalOut();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 87360012 + "'", int54 == 87360012);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater2.setLevel((-1));
        boolean boolean5 = deflater2.needsInput();
        boolean boolean6 = deflater2.needsInput();
        boolean boolean7 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        long long14 = deflater1.getBytesRead();
        boolean boolean15 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((-1));
        boolean boolean19 = deflater18.finished();
        int int20 = deflater18.getAdler();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((-1), true);
        long long24 = deflater23.getBytesWritten();
        deflater23.setLevel(2);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        deflater23.setInput(byteArray63);
        long long69 = deflater23.getBytesRead();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        deflater71.reset();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getTotalIn();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater75.setInput(byteArray84);
        deflater71.setDictionary(byteArray84);
        deflater23.setInput(byteArray84);
        deflater18.setDictionary(byteArray84);
        deflater1.setDictionary(byteArray84, 0, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        deflater4.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater19.setInput(byteArray39, (int) (short) 0, (int) (short) 1);
        deflater4.setDictionary(byteArray39);
        deflater1.setInput(byteArray39);
        int int45 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(0, false);
        deflater2.finish();
        int int4 = deflater2.getAdler();
        deflater2.setLevel((-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        deflater1.setInput(byteArray56, 3, 1);
        boolean boolean65 = deflater1.finished();
        int int66 = deflater1.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        int int58 = deflater1.getAdler();
        boolean boolean59 = deflater1.finished();
        deflater1.setLevel(9);
        boolean boolean62 = deflater1.needsInput();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 87360012 + "'", int58 == 87360012);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalOut();
        long long5 = deflater1.getBytesWritten();
        byte[] byteArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        int int5 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater();
        deflater6.reset();
        long long8 = deflater6.getBytesWritten();
        int int9 = deflater6.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean12 = deflater11.finished();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        int int68 = deflater14.deflate(byteArray63);
        int int71 = deflater11.deflate(byteArray63, (int) (byte) 1, 2);
        int int74 = deflater6.deflate(byteArray63, 0, 1);
        deflater2.setInput(byteArray63);
        long long76 = deflater2.getBytesWritten();
        boolean boolean77 = deflater2.needsInput();
        int int78 = deflater2.getTotalIn();
        boolean boolean79 = deflater2.finished();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        int int21 = deflater1.getAdler();
        boolean boolean22 = deflater1.finished();
        long long23 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        deflater2.finish();
        boolean boolean6 = deflater2.needsInput();
        long long7 = deflater2.getBytesWritten();
        int int8 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater8.setInput(byteArray21, 0, 0);
        int int26 = deflater6.deflate(byteArray21);
        deflater6.end();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        long long30 = deflater29.getBytesWritten();
        int int31 = deflater29.getTotalIn();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater48.finish();
        long long60 = deflater48.getBytesRead();
        deflater48.reset();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater48.setInput(byteArray68, (int) (short) 0, (int) (short) 1);
        deflater33.setDictionary(byteArray68);
        int int73 = deflater29.deflate(byteArray68);
        deflater6.setInput(byteArray68);
        int int75 = deflater1.deflate(byteArray68);
        deflater1.finish();
        deflater1.end();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getAdler();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater66.setInput(byteArray79, 0, 0);
        int int84 = deflater64.deflate(byteArray79);
        deflater1.setInput(byteArray79);
        int int86 = deflater1.getTotalIn();
        boolean boolean87 = deflater1.finished();
        deflater1.setStrategy(2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        byte[] byteArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray14, (int) (short) 100, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        boolean boolean4 = deflater1.needsInput();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        deflater6.reset();
        boolean boolean10 = deflater6.finished();
        int int11 = deflater6.getTotalOut();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getAdler();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater13.setInput(byteArray26);
        int int31 = deflater6.deflate(byteArray26, 0, 0);
        int int32 = deflater6.getTotalIn();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((-1));
        int int35 = deflater34.getTotalIn();
        boolean boolean36 = deflater34.finished();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        deflater38.reset();
        deflater38.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        deflater43.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater43.setDictionary(byteArray56);
        int int59 = deflater38.deflate(byteArray56);
        int int60 = deflater34.deflate(byteArray56);
        deflater6.setInput(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray56, (int) (byte) 1, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalOut();
        deflater1.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getAdler();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater25.setInput(byteArray38, 0, 0);
        int int43 = deflater23.deflate(byteArray38);
        deflater23.end();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        long long47 = deflater46.getBytesWritten();
        int int48 = deflater46.getTotalIn();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater50.setDictionary(byteArray85);
        int int90 = deflater46.deflate(byteArray85);
        deflater23.setInput(byteArray85);
        deflater1.setInput(byteArray85);
        deflater1.setStrategy(1);
        java.lang.Class<?> wildcardClass95 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesWritten();
        int int3 = deflater0.getTotalIn();
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 1 };
        deflater0.setInput(byteArray6);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((-1), true);
        long long11 = deflater10.getBytesWritten();
        deflater10.setLevel(2);
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        deflater10.setInput(byteArray50);
        long long56 = deflater10.getBytesRead();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        deflater58.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater58.setDictionary(byteArray71);
        deflater10.setInput(byteArray71);
        deflater0.setInput(byteArray71);
        long long76 = deflater0.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater0.setLevel((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 1]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        long long5 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.reset();
        boolean boolean19 = deflater7.needsInput();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        int int32 = deflater7.deflate(byteArray30);
        int int33 = deflater1.deflate(byteArray30);
        java.lang.Class<?> wildcardClass34 = byteArray30.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        long long5 = deflater1.getBytesWritten();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        boolean boolean4 = deflater2.needsInput();
        int int5 = deflater2.getTotalIn();
        int int6 = deflater2.getTotalOut();
        long long7 = deflater2.getBytesWritten();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        long long4 = deflater1.getBytesWritten();
        int int5 = deflater1.getTotalOut();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        int int24 = deflater21.getTotalIn();
        int int25 = deflater21.getTotalIn();
        deflater21.end();
        boolean boolean27 = deflater21.needsInput();
        deflater21.finish();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        int int33 = deflater30.getTotalIn();
        int int34 = deflater30.getTotalIn();
        deflater30.setLevel((int) (short) 1);
        deflater30.setLevel((int) (byte) 1);
        boolean boolean39 = deflater30.finished();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (short) -1, false);
        int int43 = deflater42.getTotalIn();
        int int44 = deflater42.getTotalIn();
        boolean boolean45 = deflater42.finished();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        long long48 = deflater47.getBytesWritten();
        int int49 = deflater47.getTotalIn();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        deflater51.setDictionary(byteArray86);
        int int91 = deflater47.deflate(byteArray86);
        deflater42.setDictionary(byteArray86);
        int int93 = deflater30.deflate(byteArray86);
        deflater21.setInput(byteArray86);
        int int95 = deflater1.deflate(byteArray86);
        boolean boolean96 = deflater1.finished();
        java.lang.Class<?> wildcardClass97 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 6 + "'", int95 == 6);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        long long26 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(196610);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        long long74 = deflater1.getBytesRead();
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        boolean boolean4 = deflater1.finished();
        int int5 = deflater1.getTotalOut();
        int int6 = deflater1.getAdler();
        deflater1.finish();
        boolean boolean8 = deflater1.finished();
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        deflater14.reset();
        deflater14.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        deflater19.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater19.setDictionary(byteArray32);
        int int35 = deflater14.deflate(byteArray32);
        deflater1.setDictionary(byteArray32);
        long long37 = deflater1.getBytesWritten();
        long long38 = deflater1.getBytesWritten();
        int int39 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setDictionary(byteArray14);
        int int17 = deflater1.getAdler();
        long long18 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater23.setInput(byteArray35);
        deflater21.setInput(byteArray35);
        deflater21.setStrategy(0);
        boolean boolean41 = deflater21.needsInput();
        long long42 = deflater21.getBytesWritten();
        long long43 = deflater21.getBytesRead();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getAdler();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater45.setInput(byteArray58, 0, 0);
        long long63 = deflater45.getBytesRead();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater45.setDictionary(byteArray85);
        int int90 = deflater21.deflate(byteArray85);
        int int91 = deflater1.deflate(byteArray85);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 87360012 + "'", int17 == 87360012);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        long long19 = deflater1.getBytesWritten();
        int int20 = deflater1.getTotalIn();
        deflater1.setStrategy((int) (short) 1);
        long long23 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesWritten();
        deflater1.reset();
        int int62 = deflater1.getTotalIn();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        deflater1.end();
        boolean boolean20 = deflater1.needsInput();
        deflater1.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        long long17 = deflater1.getBytesWritten();
        deflater1.setStrategy(0);
        int int20 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        int int36 = deflater22.getTotalIn();
        deflater22.finish();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater(3, true);
        int int41 = deflater40.getAdler();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((-1), true);
        long long45 = deflater44.getBytesWritten();
        deflater44.setLevel(2);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray84);
        deflater44.setInput(byteArray84);
        deflater40.setDictionary(byteArray84);
        deflater22.setInput(byteArray84);
        int int92 = deflater1.deflate(byteArray84);
        java.lang.Class<?> wildcardClass93 = byteArray84.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[120, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        int int4 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean8 = deflater7.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((-1), true);
        long long25 = deflater24.getBytesWritten();
        deflater24.setLevel(2);
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        deflater24.setInput(byteArray64);
        deflater10.setDictionary(byteArray64);
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getAdler();
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        int int81 = deflater79.getTotalIn();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater79.setInput(byteArray88);
        deflater75.setInput(byteArray88, 0, 0);
        int int93 = deflater73.deflate(byteArray88);
        deflater10.setInput(byteArray88);
        int int95 = deflater7.deflate(byteArray88);
        int int96 = deflater1.deflate(byteArray88);
        long long97 = deflater1.getBytesWritten();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        deflater1.reset();
        deflater1.finish();
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        int int9 = deflater1.getAdler();
        int int10 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater12.setInput(byteArray32, (int) (short) 0, (int) (short) 1);
        deflater12.reset();
        int int37 = deflater12.getTotalIn();
        boolean boolean38 = deflater12.needsInput();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        long long41 = deflater40.getBytesWritten();
        int int42 = deflater40.getTotalOut();
        long long43 = deflater40.getBytesWritten();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        deflater45.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater45.setDictionary(byteArray58);
        deflater40.setDictionary(byteArray58);
        deflater12.setInput(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = deflater1.deflate(byteArray58, (int) (byte) 0, (int) (byte) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        int int8 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(1, true);
        boolean boolean12 = deflater11.needsInput();
        int int13 = deflater11.getTotalOut();
        deflater11.finish();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater16.setInput(byteArray28);
        boolean boolean31 = deflater16.needsInput();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater51.setInput(byteArray63);
        deflater49.setInput(byteArray63);
        deflater49.setStrategy(0);
        boolean boolean69 = deflater49.needsInput();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater74.setInput(byteArray86);
        deflater72.setInput(byteArray86);
        deflater49.setInput(byteArray86);
        deflater33.setDictionary(byteArray86);
        int int92 = deflater16.deflate(byteArray86);
        deflater11.setDictionary(byteArray86);
        int int94 = deflater1.deflate(byteArray86);
        int int95 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        long long3 = deflater2.getBytesRead();
        int int4 = deflater2.getAdler();
        boolean boolean5 = deflater2.needsInput();
        int int6 = deflater2.getAdler();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int8 = deflater2.deflate(byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        deflater1.reset();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater34.setInput(byteArray54, (int) (short) 0, (int) (short) 1);
        deflater19.setDictionary(byteArray54);
        int int59 = deflater5.deflate(byteArray54);
        boolean boolean60 = deflater5.finished();
        int int61 = deflater5.getTotalIn();
        int int62 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        int int88 = deflater5.deflate(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray84, (int) (byte) 0, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(6, false);
        boolean boolean3 = deflater2.needsInput();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        deflater5.finish();
        deflater5.reset();
        boolean boolean11 = deflater5.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        int int16 = deflater13.getTotalIn();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater21.setInput(byteArray33);
        deflater19.setInput(byteArray33);
        deflater19.setStrategy(0);
        boolean boolean39 = deflater19.needsInput();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater44.setInput(byteArray56);
        deflater42.setInput(byteArray56);
        deflater19.setInput(byteArray56);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater19.setInput(byteArray82);
        int int87 = deflater13.deflate(byteArray82);
        int int88 = deflater5.deflate(byteArray82);
        deflater2.setInput(byteArray82, 3, 0);
        boolean boolean92 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setInput(byteArray46, 0, 0);
        int int51 = deflater31.deflate(byteArray46);
        deflater5.setInput(byteArray46);
        deflater1.setDictionary(byteArray46);
        int int54 = deflater1.getAdler();
        long long55 = deflater1.getBytesRead();
        int int56 = deflater1.getTotalIn();
        int int57 = deflater1.getAdler();
        deflater1.setStrategy(0);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater62.setLevel((-1));
        boolean boolean65 = deflater62.needsInput();
        deflater62.finish();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        deflater68.reset();
        boolean boolean72 = deflater68.finished();
        int int73 = deflater68.getTotalOut();
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getAdler();
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        int int81 = deflater79.getTotalIn();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater79.setInput(byteArray88);
        deflater75.setInput(byteArray88);
        int int93 = deflater68.deflate(byteArray88, 0, 0);
        deflater62.setDictionary(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray88, (int) '#', 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 87360012 + "'", int54 == 87360012);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 87360012 + "'", int57 == 87360012);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        boolean boolean2 = deflater1.finished();
        int int3 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass4 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalIn();
        long long20 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        long long74 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalOut();
        deflater1.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getAdler();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater25.setInput(byteArray38, 0, 0);
        int int43 = deflater23.deflate(byteArray38);
        deflater23.end();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        long long47 = deflater46.getBytesWritten();
        int int48 = deflater46.getTotalIn();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater50.setDictionary(byteArray85);
        int int90 = deflater46.deflate(byteArray85);
        deflater23.setInput(byteArray85);
        deflater1.setInput(byteArray85);
        int int93 = deflater1.getAdler();
        int int94 = deflater1.getTotalIn();
        int int95 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        long long14 = deflater1.getBytesRead();
        deflater1.end();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater17.setInput(byteArray29);
        deflater17.setLevel((int) (byte) -1);
        deflater17.finish();
        long long35 = deflater17.getBytesWritten();
        int int36 = deflater17.getTotalIn();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater41.setInput(byteArray53);
        deflater39.setInput(byteArray53);
        boolean boolean57 = deflater39.finished();
        byte[] byteArray64 = new byte[] { (byte) 100, (byte) 10, (byte) 0, (byte) 10, (byte) 10, (byte) 1 };
        int int65 = deflater39.deflate(byteArray64);
        int int68 = deflater17.deflate(byteArray64, (int) (byte) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = deflater1.deflate(byteArray64, 12, (int) (short) 1, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[100, 10, 0, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        long long19 = deflater1.getBytesWritten();
        int int20 = deflater1.getTotalOut();
        deflater1.reset();
        int int22 = deflater1.getTotalOut();
        java.lang.Class<?> wildcardClass23 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        int int47 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getAdler();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater49.setInput(byteArray62, 0, 0);
        long long67 = deflater49.getBytesRead();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater69.finish();
        long long81 = deflater69.getBytesRead();
        deflater69.reset();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater69.setInput(byteArray89, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray89);
        deflater1.setInput(byteArray89);
        boolean boolean95 = deflater1.finished();
        deflater1.setStrategy(0);
        long long98 = deflater1.getBytesRead();
        boolean boolean99 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 0L + "'", long98 == 0L);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        deflater1.reset();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setInput(byteArray46, 0, 0);
        int int51 = deflater31.deflate(byteArray46);
        deflater5.setInput(byteArray46);
        deflater1.setDictionary(byteArray46);
        int int54 = deflater1.getAdler();
        long long55 = deflater1.getBytesRead();
        int int56 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean58 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 87360012 + "'", int54 == 87360012);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesRead();
        int int3 = deflater0.getTotalIn();
        byte[] byteArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater0.setInput(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        deflater1.reset();
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.setStrategy(2);
        int int60 = deflater1.getAdler();
        long long61 = deflater1.getBytesWritten();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 87360012 + "'", int60 == 87360012);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 6L + "'", long61 == 6L);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(6, false);
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean6 = deflater5.needsInput();
        long long7 = deflater5.getBytesWritten();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        int int13 = deflater9.getTotalIn();
        long long14 = deflater9.getBytesWritten();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.finish();
        long long28 = deflater16.getBytesRead();
        deflater16.reset();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater16.setInput(byteArray36, (int) (short) 0, (int) (short) 1);
        deflater16.reset();
        deflater16.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        long long44 = deflater43.getBytesWritten();
        int int45 = deflater43.getTotalOut();
        long long46 = deflater43.getBytesWritten();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        deflater48.reset();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater48.setDictionary(byteArray61);
        deflater43.setDictionary(byteArray61);
        deflater16.setInput(byteArray61);
        deflater9.setDictionary(byteArray61, 2, (int) (short) 0);
        deflater5.setInput(byteArray61);
        int int70 = deflater2.deflate(byteArray61);
        java.lang.Class<?> wildcardClass71 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        boolean boolean8 = deflater1.needsInput();
        int int9 = deflater1.getTotalIn();
        int int10 = deflater1.getAdler();
        int int11 = deflater1.getTotalIn();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.finish();
        deflater1.setLevel(6);
        java.lang.Class<?> wildcardClass11 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.setStrategy(1);
        int int61 = deflater1.getTotalIn();
        java.lang.Class<?> wildcardClass62 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        int int3 = deflater2.getAdler();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getAdler();
        int int5 = deflater2.getAdler();
        long long6 = deflater2.getBytesRead();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        boolean boolean59 = deflater1.needsInput();
        boolean boolean60 = deflater1.finished();
        long long61 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 6L + "'", long61 == 6L);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        deflater1.reset();
        long long14 = deflater1.getBytesWritten();
        long long15 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalOut();
        deflater1.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getAdler();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater25.setInput(byteArray38, 0, 0);
        int int43 = deflater23.deflate(byteArray38);
        deflater23.end();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        long long47 = deflater46.getBytesWritten();
        int int48 = deflater46.getTotalIn();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater50.setDictionary(byteArray85);
        int int90 = deflater46.deflate(byteArray85);
        deflater23.setInput(byteArray85);
        deflater1.setInput(byteArray85);
        int int93 = deflater1.getAdler();
        deflater1.end();
        boolean boolean95 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        deflater1.setInput(byteArray56, 3, 1);
        boolean boolean65 = deflater1.finished();
        int int66 = deflater1.getTotalOut();
        deflater1.reset();
        int int68 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.setLevel(9);
        deflater1.finish();
        deflater1.setStrategy((int) (short) 1);
        java.lang.Class<?> wildcardClass14 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        long long22 = deflater1.getBytesWritten();
        deflater1.finish();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean26 = deflater25.finished();
        deflater25.reset();
        boolean boolean28 = deflater25.finished();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater30.setInput(byteArray63);
        int int68 = deflater25.deflate(byteArray63);
        deflater1.setDictionary(byteArray63);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        long long4 = deflater1.getBytesWritten();
        int int5 = deflater1.getTotalOut();
        deflater1.setLevel(0);
        deflater1.setLevel((int) (byte) 0);
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getAdler();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater11.setInput(byteArray24, 0, 0);
        int int29 = deflater11.getTotalIn();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        deflater31.finish();
        int int35 = deflater31.getTotalOut();
        boolean boolean36 = deflater31.needsInput();
        deflater31.setLevel((int) (short) 0);
        int int39 = deflater31.getTotalIn();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (short) -1, false);
        int int43 = deflater42.getTotalIn();
        int int44 = deflater42.getTotalIn();
        boolean boolean45 = deflater42.finished();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        long long48 = deflater47.getBytesWritten();
        int int49 = deflater47.getTotalIn();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        deflater51.setDictionary(byteArray86);
        int int91 = deflater47.deflate(byteArray86);
        deflater42.setDictionary(byteArray86);
        int int93 = deflater31.deflate(byteArray86);
        deflater11.setDictionary(byteArray86);
        deflater1.setInput(byteArray86);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        long long3 = deflater2.getBytesRead();
        int int4 = deflater2.getAdler();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        long long7 = deflater6.getBytesRead();
        long long8 = deflater6.getBytesRead();
        deflater6.reset();
        boolean boolean10 = deflater6.needsInput();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((-1), true);
        long long28 = deflater27.getBytesWritten();
        deflater27.setLevel(2);
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater47.setInput(byteArray67, (int) (short) 0, (int) (short) 1);
        deflater32.setDictionary(byteArray67);
        deflater27.setInput(byteArray67);
        deflater12.setInput(byteArray67, 3, 1);
        deflater6.setDictionary(byteArray67);
        int int77 = deflater2.deflate(byteArray67);
        int int78 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        boolean boolean58 = deflater1.needsInput();
        int int59 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean61 = deflater1.finished();
        boolean boolean62 = deflater1.needsInput();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setInput(byteArray46, 0, 0);
        int int51 = deflater31.deflate(byteArray46);
        deflater5.setInput(byteArray46);
        deflater1.setDictionary(byteArray46);
        int int54 = deflater1.getAdler();
        deflater1.reset();
        int int56 = deflater1.getAdler();
        int int57 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 87360012 + "'", int54 == 87360012);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        long long14 = deflater1.getBytesRead();
        boolean boolean15 = deflater1.needsInput();
        deflater1.reset();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        int int5 = deflater2.getTotalOut();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater13.setInput(byteArray25);
        deflater11.setInput(byteArray25);
        deflater11.setStrategy(0);
        boolean boolean31 = deflater11.needsInput();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater11.setInput(byteArray48);
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        deflater11.setInput(byteArray74);
        int int79 = deflater5.deflate(byteArray74);
        deflater2.setInput(byteArray74);
        int int81 = deflater2.getAdler();
        int int82 = deflater2.getTotalOut();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        deflater2.end();
        boolean boolean5 = deflater2.finished();
        deflater2.end();
        boolean boolean7 = deflater2.needsInput();
        byte[] byteArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = deflater2.deflate(byteArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        long long4 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        deflater6.reset();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater6.setDictionary(byteArray19);
        deflater1.setDictionary(byteArray19);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        int int27 = deflater24.getTotalIn();
        deflater24.finish();
        deflater24.reset();
        boolean boolean30 = deflater24.finished();
        deflater24.finish();
        deflater24.finish();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((-1), true);
        int int36 = deflater35.getAdler();
        boolean boolean37 = deflater35.finished();
        deflater35.finish();
        deflater35.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        deflater41.finish();
        long long45 = deflater41.getBytesWritten();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        long long48 = deflater47.getBytesRead();
        long long49 = deflater47.getBytesRead();
        long long50 = deflater47.getBytesWritten();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater52.finish();
        long long64 = deflater52.getBytesRead();
        deflater52.reset();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater52.setInput(byteArray72, (int) (short) 0, (int) (short) 1);
        deflater47.setInput(byteArray72);
        deflater41.setInput(byteArray72);
        deflater35.setDictionary(byteArray72);
        deflater24.setDictionary(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray72, 720907, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        deflater1.setLevel(9);
        int int23 = deflater1.getAdler();
        deflater1.reset();
        long long25 = deflater1.getBytesWritten();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        long long10 = deflater9.getBytesWritten();
        long long11 = deflater9.getBytesWritten();
        long long12 = deflater9.getBytesWritten();
        boolean boolean13 = deflater9.finished();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        int int18 = deflater15.getTotalIn();
        deflater15.finish();
        int int20 = deflater15.getTotalOut();
        boolean boolean21 = deflater15.finished();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        deflater23.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater23.setDictionary(byteArray36);
        int int39 = deflater23.getAdler();
        int int40 = deflater23.getAdler();
        deflater23.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        long long44 = deflater43.getBytesWritten();
        long long45 = deflater43.getBytesWritten();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater47.setDictionary(byteArray82);
        deflater43.setInput(byteArray82);
        deflater23.setInput(byteArray82);
        int int89 = deflater15.deflate(byteArray82);
        int int90 = deflater9.deflate(byteArray82);
        deflater1.setDictionary(byteArray82, 0, (int) (byte) 0);
        int int94 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 87360012 + "'", int39 == 87360012);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 87360012 + "'", int40 == 87360012);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 6 + "'", int89 == 6);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.end();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater41.setInput(byteArray61, (int) (short) 0, (int) (short) 1);
        deflater28.setInput(byteArray61);
        boolean boolean66 = deflater28.finished();
        deflater28.finish();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        int int80 = deflater28.deflate(byteArray78);
        deflater1.setInput(byteArray78);
        java.lang.Class<?> wildcardClass82 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.end();
        deflater1.setLevel((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        int int5 = deflater2.getTotalIn();
        deflater2.finish();
        int int7 = deflater2.getTotalOut();
        long long8 = deflater2.getBytesRead();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        deflater1.setLevel(1);
        long long10 = deflater1.getBytesRead();
        deflater1.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean6 = deflater5.needsInput();
        int int7 = deflater5.getTotalIn();
        long long8 = deflater5.getBytesRead();
        deflater5.finish();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        long long12 = deflater11.getBytesWritten();
        int int13 = deflater11.getTotalOut();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        deflater11.setDictionary(byteArray50);
        deflater5.setDictionary(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = deflater2.deflate(byteArray50, 126419322, (int) (byte) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        long long22 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        int int26 = deflater25.getAdler();
        deflater25.setStrategy(0);
        int int29 = deflater25.getTotalOut();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        long long32 = deflater31.getBytesWritten();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        int int48 = deflater34.getAdler();
        boolean boolean49 = deflater34.needsInput();
        int int50 = deflater34.getTotalIn();
        int int51 = deflater34.getTotalIn();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater53.finish();
        long long65 = deflater53.getBytesRead();
        deflater53.reset();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater68.finish();
        long long80 = deflater68.getBytesRead();
        deflater68.reset();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater68.setInput(byteArray88, (int) (short) 0, (int) (short) 1);
        int int92 = deflater53.deflate(byteArray88);
        deflater34.setDictionary(byteArray88);
        deflater31.setInput(byteArray88);
        int int97 = deflater25.deflate(byteArray88, (int) (byte) 1, 3);
        int int98 = deflater1.deflate(byteArray88);
        long long99 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 6 + "'", int98 == 6);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 6L + "'", long99 == 6L);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        deflater1.setLevel((int) (short) 0);
        int int9 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (short) -1, false);
        int int13 = deflater12.getTotalIn();
        int int14 = deflater12.getTotalIn();
        boolean boolean15 = deflater12.finished();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        long long18 = deflater17.getBytesWritten();
        int int19 = deflater17.getTotalIn();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        int int61 = deflater17.deflate(byteArray56);
        deflater12.setDictionary(byteArray56);
        int int63 = deflater1.deflate(byteArray56);
        long long64 = deflater1.getBytesRead();
        boolean boolean65 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        deflater2.finish();
        deflater2.reset();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater12.setInput(byteArray24);
        deflater10.setInput(byteArray24);
        deflater10.setStrategy(0);
        boolean boolean30 = deflater10.needsInput();
        long long31 = deflater10.getBytesRead();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        long long34 = deflater33.getBytesWritten();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater51.setInput(byteArray71, (int) (short) 0, (int) (short) 1);
        deflater36.setDictionary(byteArray71);
        deflater33.setInput(byteArray71);
        int int77 = deflater10.deflate(byteArray71);
        deflater2.setDictionary(byteArray71);
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater40.setInput(byteArray52);
        deflater38.setInput(byteArray52);
        deflater38.setStrategy(0);
        boolean boolean58 = deflater38.needsInput();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater63.setInput(byteArray75);
        deflater61.setInput(byteArray75);
        deflater38.setInput(byteArray75);
        deflater22.setDictionary(byteArray75);
        int int81 = deflater18.deflate(byteArray75);
        int int82 = deflater1.deflate(byteArray75);
        int int83 = deflater1.getTotalIn();
        byte[] byteArray84 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 0);
        long long2 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater5.finish();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((-1));
        boolean boolean9 = deflater8.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater11.setInput(byteArray23);
        int int26 = deflater11.getTotalIn();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesRead();
        long long30 = deflater28.getBytesRead();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        int int46 = deflater32.getAdler();
        boolean boolean47 = deflater32.needsInput();
        int int48 = deflater32.getTotalIn();
        int int49 = deflater32.getTotalIn();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        int int90 = deflater51.deflate(byteArray86);
        deflater32.setDictionary(byteArray86);
        deflater28.setInput(byteArray86);
        deflater11.setDictionary(byteArray86);
        deflater8.setDictionary(byteArray86);
        deflater5.setInput(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = deflater1.deflate(byteArray86, 139789087, 118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        deflater2.finish();
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        long long17 = deflater1.getBytesWritten();
        deflater1.setStrategy(0);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        deflater28.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater28.setDictionary(byteArray41);
        long long44 = deflater28.getBytesWritten();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        long long47 = deflater46.getBytesWritten();
        int int48 = deflater46.getTotalOut();
        long long49 = deflater46.getBytesWritten();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        deflater51.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater51.setDictionary(byteArray64);
        deflater46.setDictionary(byteArray64);
        int int68 = deflater28.deflate(byteArray64);
        int int69 = deflater1.deflate(byteArray64);
        int int70 = deflater1.getAdler();
        java.lang.Class<?> wildcardClass71 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.lang.Class<?> wildcardClass44 = byteArray39.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesRead();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (short) -1, false);
        long long6 = deflater5.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater5.setDictionary(byteArray17);
        int int20 = deflater5.getTotalOut();
        boolean boolean21 = deflater5.needsInput();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((-1), true);
        deflater24.finish();
        deflater24.finish();
        boolean boolean27 = deflater24.finished();
        deflater24.finish();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater();
        deflater29.reset();
        long long31 = deflater29.getBytesWritten();
        int int32 = deflater29.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 1 };
        deflater29.setInput(byteArray35);
        deflater24.setInput(byteArray35);
        deflater5.setDictionary(byteArray35);
        int int39 = deflater0.deflate(byteArray35);
        int int40 = deflater0.getTotalIn();
        byte[] byteArray41 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater0.setDictionary(byteArray41, 196610, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        long long3 = deflater2.getBytesWritten();
        boolean boolean4 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        int int60 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        deflater1.reset();
        int int11 = deflater1.getTotalIn();
        long long12 = deflater1.getBytesRead();
        int int13 = deflater1.getTotalIn();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalIn();
        deflater1.end();
        java.lang.Class<?> wildcardClass7 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesRead();
        long long9 = deflater1.getBytesWritten();
        int int10 = deflater1.getTotalIn();
        int int11 = deflater1.getAdler();
        int int12 = deflater1.getTotalOut();
        int int13 = deflater1.getAdler();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        deflater2.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        deflater5.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater5.setDictionary(byteArray18);
        int int21 = deflater5.getAdler();
        int int22 = deflater5.getAdler();
        deflater5.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        long long26 = deflater25.getBytesWritten();
        long long27 = deflater25.getBytesWritten();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        deflater25.setInput(byteArray64);
        deflater5.setInput(byteArray64);
        int int71 = deflater2.deflate(byteArray64);
        boolean boolean72 = deflater2.finished();
        boolean boolean73 = deflater2.finished();
        boolean boolean74 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 87360012 + "'", int21 == 87360012);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 87360012 + "'", int22 == 87360012);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[3, 0, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesWritten();
        deflater1.finish();
        deflater1.reset();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        int int4 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        boolean boolean20 = deflater2.finished();
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 10, (byte) 0, (byte) 10, (byte) 10, (byte) 1 };
        int int28 = deflater2.deflate(byteArray27);
        long long29 = deflater2.getBytesRead();
        boolean boolean30 = deflater2.needsInput();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 10, 0, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 6L + "'", long29 == 6L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        int int17 = deflater2.getTotalOut();
        boolean boolean18 = deflater2.needsInput();
        int int19 = deflater2.getTotalOut();
        long long20 = deflater2.getBytesRead();
        int int21 = deflater2.getTotalIn();
        int int22 = deflater2.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(196610);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 87360012 + "'", int22 == 87360012);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (short) 0);
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean10 = deflater9.needsInput();
        long long11 = deflater9.getBytesWritten();
        deflater9.finish();
        boolean boolean13 = deflater9.needsInput();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean17 = deflater16.needsInput();
        int int18 = deflater16.getTotalOut();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        long long21 = deflater20.getBytesWritten();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater38.finish();
        long long50 = deflater38.getBytesRead();
        deflater38.reset();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater38.setInput(byteArray58, (int) (short) 0, (int) (short) 1);
        deflater23.setDictionary(byteArray58);
        deflater20.setInput(byteArray58);
        deflater16.setDictionary(byteArray58);
        deflater9.setDictionary(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray58, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        boolean boolean2 = deflater1.finished();
        int int3 = deflater1.getAdler();
        boolean boolean4 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(126419322);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        deflater7.finish();
        long long11 = deflater7.getBytesWritten();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        long long14 = deflater13.getBytesRead();
        long long15 = deflater13.getBytesRead();
        long long16 = deflater13.getBytesWritten();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater18.setInput(byteArray38, (int) (short) 0, (int) (short) 1);
        deflater13.setInput(byteArray38);
        deflater7.setInput(byteArray38);
        deflater1.setDictionary(byteArray38);
        int int45 = deflater1.getTotalOut();
        boolean boolean46 = deflater1.needsInput();
        byte[] byteArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int50 = deflater1.deflate(byteArray47, 118882828, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        int int20 = deflater1.getTotalOut();
        int int21 = deflater1.getTotalIn();
        long long22 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        int int3 = deflater2.getAdler();
        int int4 = deflater2.getAdler();
        boolean boolean5 = deflater2.needsInput();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater(0);
        long long8 = deflater7.getBytesWritten();
        deflater7.finish();
        deflater7.finish();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean13 = deflater12.finished();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        int int69 = deflater15.deflate(byteArray64);
        int int72 = deflater12.deflate(byteArray64, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater();
        deflater73.reset();
        long long75 = deflater73.getBytesWritten();
        int int76 = deflater73.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 1 };
        deflater73.setInput(byteArray79);
        deflater12.setDictionary(byteArray79);
        deflater7.setDictionary(byteArray79);
        deflater2.setDictionary(byteArray79);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 1]");
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater19.setInput(byteArray31);
        deflater17.setInput(byteArray31);
        deflater17.setStrategy(0);
        boolean boolean37 = deflater17.needsInput();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater42.setInput(byteArray54);
        deflater40.setInput(byteArray54);
        deflater17.setInput(byteArray54);
        deflater1.setDictionary(byteArray54);
        long long60 = deflater1.getBytesRead();
        long long61 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        long long46 = deflater1.getBytesRead();
        long long47 = deflater1.getBytesRead();
        boolean boolean48 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        deflater1.finish();
        long long10 = deflater1.getBytesWritten();
        boolean boolean11 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, true);
        deflater2.setLevel((int) (short) 0);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.needsInput();
        long long11 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        deflater1.reset();
        long long14 = deflater1.getBytesRead();
        boolean boolean15 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater(2, true);
        int int19 = deflater18.getTotalIn();
        int int20 = deflater18.getTotalOut();
        int int21 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        deflater23.finish();
        int int27 = deflater23.getTotalOut();
        boolean boolean28 = deflater23.needsInput();
        long long29 = deflater23.getBytesRead();
        int int30 = deflater23.getAdler();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        int int33 = deflater32.getTotalOut();
        int int34 = deflater32.getTotalOut();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getAdler();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater64.setInput(byteArray77, 0, 0);
        int int82 = deflater62.deflate(byteArray77);
        deflater36.setInput(byteArray77);
        deflater32.setDictionary(byteArray77);
        deflater23.setDictionary(byteArray77, 6, 0);
        int int88 = deflater18.deflate(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray77, (int) (short) 10, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        boolean boolean15 = deflater1.finished();
        boolean boolean16 = deflater1.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        long long59 = deflater1.getBytesWritten();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 6L + "'", long59 == 6L);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        boolean boolean11 = deflater1.finished();
        int int12 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        int int25 = deflater14.getAdler();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((-1), true);
        long long43 = deflater42.getBytesWritten();
        deflater42.setLevel(2);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater47.setDictionary(byteArray82);
        deflater42.setInput(byteArray82);
        deflater27.setInput(byteArray82, 3, 1);
        int int91 = deflater14.deflate(byteArray82);
        int int92 = deflater1.deflate(byteArray82);
        int int93 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        deflater1.finish();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        deflater11.reset();
        int int25 = deflater11.getAdler();
        byte[] byteArray27 = new byte[] { (byte) 10 };
        deflater11.setDictionary(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = deflater1.deflate(byteArray27, 126419322, 2, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10]");
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        int int26 = deflater1.getAdler();
        boolean boolean27 = deflater1.finished();
        int int28 = deflater1.getAdler();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        deflater1.reset();
        deflater1.reset();
        boolean boolean21 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        boolean boolean27 = deflater1.finished();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((-1));
        int int30 = deflater29.getTotalIn();
        boolean boolean31 = deflater29.finished();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        deflater33.reset();
        deflater33.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        deflater38.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater38.setDictionary(byteArray51);
        int int54 = deflater33.deflate(byteArray51);
        int int55 = deflater29.deflate(byteArray51);
        int int56 = deflater1.deflate(byteArray51);
        deflater1.finish();
        int int58 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        boolean boolean60 = deflater1.finished();
        long long61 = deflater1.getBytesRead();
        long long62 = deflater1.getBytesRead();
        int int63 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean27 = deflater1.needsInput();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        int int32 = deflater29.getTotalIn();
        deflater29.finish();
        deflater29.reset();
        boolean boolean35 = deflater29.finished();
        deflater29.finish();
        deflater29.setLevel(6);
        deflater29.finish();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        int int55 = deflater41.getAdler();
        boolean boolean56 = deflater41.needsInput();
        int int57 = deflater41.getTotalIn();
        deflater41.reset();
        int int59 = deflater41.getAdler();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        deflater61.reset();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater61.setDictionary(byteArray74);
        deflater41.setInput(byteArray74);
        deflater29.setInput(byteArray74);
        deflater1.setInput(byteArray74);
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        deflater2.end();
        boolean boolean7 = deflater2.needsInput();
        deflater2.end();
        deflater2.end();
        boolean boolean10 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        int int5 = deflater2.getTotalIn();
        deflater2.finish();
        long long7 = deflater2.getBytesWritten();
        int int8 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        boolean boolean13 = deflater1.needsInput();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        int int17 = deflater16.getAdler();
        deflater16.setStrategy(0);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean23 = deflater22.needsInput();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater28.setInput(byteArray40);
        deflater26.setInput(byteArray40);
        deflater26.setStrategy(0);
        boolean boolean46 = deflater26.needsInput();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater51.setInput(byteArray63);
        deflater49.setInput(byteArray63);
        deflater26.setInput(byteArray63);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater69.finish();
        long long81 = deflater69.getBytesRead();
        deflater69.reset();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater69.setInput(byteArray89, (int) (short) 0, (int) (short) 1);
        deflater26.setInput(byteArray89);
        int int94 = deflater22.deflate(byteArray89);
        deflater16.setInput(byteArray89, 2, 0);
        deflater1.setInput(byteArray89);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        boolean boolean20 = deflater2.finished();
        boolean boolean21 = deflater2.finished();
        boolean boolean22 = deflater2.needsInput();
        int int23 = deflater2.getTotalIn();
        boolean boolean24 = deflater2.finished();
        boolean boolean25 = deflater2.finished();
        java.lang.Class<?> wildcardClass26 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        deflater2.setStrategy((int) (short) 1);
        deflater2.reset();
        deflater2.reset();
        long long95 = deflater2.getBytesRead();
        deflater2.finish();
        int int97 = deflater2.getTotalIn();
        deflater2.reset();
        int int99 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        deflater2.reset();
        int int5 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        int int56 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.reset();
        boolean boolean9 = deflater1.finished();
        boolean boolean10 = deflater1.needsInput();
        deflater1.reset();
        java.lang.Class<?> wildcardClass12 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.reset();
        boolean boolean4 = deflater1.finished();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater19.setInput(byteArray39, (int) (short) 0, (int) (short) 1);
        deflater6.setInput(byteArray39);
        int int44 = deflater1.deflate(byteArray39);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((-1), true);
        deflater47.finish();
        deflater47.finish();
        boolean boolean50 = deflater47.finished();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (short) -1, false);
        long long54 = deflater53.getBytesWritten();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater53.setDictionary(byteArray65);
        deflater47.setInput(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = deflater1.deflate(byteArray65, (int) (byte) 10, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(0, false);
        long long3 = deflater2.getBytesRead();
        boolean boolean4 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        deflater2.reset();
        boolean boolean71 = deflater2.finished();
        int int72 = deflater2.getAdler();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        long long25 = deflater2.getBytesWritten();
        long long26 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((-1), true);
        deflater29.finish();
        deflater29.finish();
        boolean boolean32 = deflater29.finished();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (short) -1, false);
        long long36 = deflater35.getBytesWritten();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater35.setDictionary(byteArray47);
        deflater29.setInput(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = deflater2.deflate(byteArray47, (int) (short) 0, (int) (short) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        boolean boolean3 = deflater2.needsInput();
        boolean boolean4 = deflater2.needsInput();
        int int5 = deflater2.getAdler();
        long long6 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        long long4 = deflater1.getBytesWritten();
        int int5 = deflater1.getTotalOut();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalIn();
        deflater1.end();
        deflater1.setStrategy((int) (short) 1);
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((-1), true);
        long long12 = deflater11.getBytesWritten();
        deflater11.setLevel(2);
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        int int19 = deflater16.getTotalIn();
        int int20 = deflater16.getTotalIn();
        deflater16.end();
        boolean boolean22 = deflater16.needsInput();
        deflater16.finish();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        int int28 = deflater25.getTotalIn();
        int int29 = deflater25.getTotalIn();
        deflater25.setLevel((int) (short) 1);
        deflater25.setLevel((int) (byte) 1);
        boolean boolean34 = deflater25.finished();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (short) -1, false);
        int int38 = deflater37.getTotalIn();
        int int39 = deflater37.getTotalIn();
        boolean boolean40 = deflater37.finished();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        long long43 = deflater42.getBytesWritten();
        int int44 = deflater42.getTotalIn();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        int int63 = deflater61.getTotalIn();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater61.setInput(byteArray70);
        deflater61.finish();
        long long73 = deflater61.getBytesRead();
        deflater61.reset();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater61.setInput(byteArray81, (int) (short) 0, (int) (short) 1);
        deflater46.setDictionary(byteArray81);
        int int86 = deflater42.deflate(byteArray81);
        deflater37.setDictionary(byteArray81);
        int int88 = deflater25.deflate(byteArray81);
        deflater16.setInput(byteArray81);
        deflater11.setInput(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray81, 139789087, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        long long4 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater6.finish();
        long long18 = deflater6.getBytesRead();
        deflater6.reset();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater6.setInput(byteArray26, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray26);
        deflater1.finish();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        boolean boolean49 = deflater2.needsInput();
        deflater2.end();
        deflater2.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        int int21 = deflater20.getTotalOut();
        int int22 = deflater20.getTotalOut();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getAdler();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setInput(byteArray65, 0, 0);
        int int70 = deflater50.deflate(byteArray65);
        deflater24.setInput(byteArray65);
        deflater20.setDictionary(byteArray65);
        deflater1.setInput(byteArray65);
        long long74 = deflater1.getBytesRead();
        long long75 = deflater1.getBytesRead();
        long long76 = deflater1.getBytesWritten();
        int int77 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (short) 0);
        deflater1.setLevel(2);
        int int7 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        int int4 = deflater1.getTotalOut();
        int int5 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.setLevel(9);
        boolean boolean11 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        deflater1.setLevel((int) (short) 0);
        int int9 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (short) -1, false);
        int int13 = deflater12.getTotalIn();
        int int14 = deflater12.getTotalIn();
        boolean boolean15 = deflater12.finished();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        long long18 = deflater17.getBytesWritten();
        int int19 = deflater17.getTotalIn();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        int int61 = deflater17.deflate(byteArray56);
        deflater12.setDictionary(byteArray56);
        int int63 = deflater1.deflate(byteArray56);
        deflater1.finish();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        deflater1.finish();
        long long10 = deflater1.getBytesWritten();
        long long11 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        long long40 = deflater1.getBytesRead();
        deflater1.setStrategy(0);
        deflater1.reset();
        byte[] byteArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int47 = deflater1.deflate(byteArray44, 126419322, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getTotalIn();
        long long9 = deflater1.getBytesRead();
        deflater1.reset();
        long long11 = deflater1.getBytesRead();
        deflater1.reset();
        int int13 = deflater1.getAdler();
        boolean boolean14 = deflater1.finished();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater16.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater16.setInput(byteArray49);
        boolean boolean54 = deflater16.finished();
        long long55 = deflater16.getBytesRead();
        deflater16.setStrategy(0);
        deflater16.setLevel((-1));
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (byte) 1);
        deflater61.reset();
        int int63 = deflater61.getTotalIn();
        int int64 = deflater61.getTotalIn();
        deflater61.finish();
        deflater61.reset();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater61.setInput(byteArray77);
        int int80 = deflater16.deflate(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = deflater1.deflate(byteArray77, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesWritten();
        boolean boolean10 = deflater1.finished();
        boolean boolean11 = deflater1.finished();
        int int12 = deflater1.getTotalOut();
        boolean boolean13 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        deflater2.setStrategy((int) (byte) 1);
        long long6 = deflater2.getBytesWritten();
        long long7 = deflater2.getBytesWritten();
        int int8 = deflater2.getTotalOut();
        java.lang.Class<?> wildcardClass9 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesRead();
        boolean boolean61 = deflater1.finished();
        long long62 = deflater1.getBytesRead();
        deflater1.reset();
        deflater1.reset();
        int int65 = deflater1.getAdler();
        int int66 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        deflater1.end();
        deflater1.setLevel((-1));
        deflater1.end();
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        long long48 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        deflater50.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater50.setDictionary(byteArray63);
        deflater2.setInput(byteArray63);
        int int67 = deflater2.getTotalOut();
        boolean boolean68 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesWritten();
        boolean boolean10 = deflater1.finished();
        boolean boolean11 = deflater1.finished();
        deflater1.reset();
        long long13 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        boolean boolean5 = deflater2.needsInput();
        long long6 = deflater2.getBytesRead();
        long long7 = deflater2.getBytesRead();
        int int8 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        int int6 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater8.setInput(byteArray21);
        int int26 = deflater1.deflate(byteArray21, 0, 0);
        int int27 = deflater1.getTotalIn();
        boolean boolean28 = deflater1.finished();
        java.lang.Class<?> wildcardClass29 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        boolean boolean17 = deflater2.needsInput();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getAdler();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater22.setInput(byteArray35, 0, 0);
        int int40 = deflater20.deflate(byteArray35);
        deflater2.setInput(byteArray35);
        int int42 = deflater2.getAdler();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        long long45 = deflater44.getBytesWritten();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater47.setDictionary(byteArray82);
        deflater44.setInput(byteArray82);
        deflater2.setDictionary(byteArray82);
        java.lang.Class<?> wildcardClass89 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 87360012 + "'", int42 == 87360012);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        boolean boolean5 = deflater2.needsInput();
        long long6 = deflater2.getBytesRead();
        long long7 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater(0);
        int int10 = deflater9.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        long long13 = deflater12.getBytesRead();
        long long14 = deflater12.getBytesRead();
        long long15 = deflater12.getBytesWritten();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater17.setInput(byteArray37, (int) (short) 0, (int) (short) 1);
        deflater12.setInput(byteArray37);
        int int42 = deflater9.deflate(byteArray37);
        int int43 = deflater2.deflate(byteArray37);
        deflater2.setLevel((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.reset();
        boolean boolean9 = deflater1.finished();
        boolean boolean10 = deflater1.needsInput();
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (short) 1, false);
        int int15 = deflater14.getAdler();
        int int16 = deflater14.getTotalIn();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        int int21 = deflater18.getTotalIn();
        int int22 = deflater18.getTotalIn();
        int int23 = deflater18.getTotalOut();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        int int36 = deflater25.getAdler();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (short) -1, false);
        int int40 = deflater39.getTotalIn();
        int int41 = deflater39.getTotalIn();
        boolean boolean42 = deflater39.finished();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getAdler();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater44.setInput(byteArray57, 0, 0);
        int int62 = deflater39.deflate(byteArray57);
        int int65 = deflater25.deflate(byteArray57, 0, (int) (short) 0);
        deflater18.setInput(byteArray57, 0, 2);
        deflater14.setDictionary(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = deflater1.deflate(byteArray57, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean7 = deflater6.needsInput();
        int int8 = deflater6.getTotalOut();
        int int9 = deflater6.getTotalIn();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater();
        deflater10.reset();
        long long12 = deflater10.getBytesWritten();
        int int13 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean16 = deflater15.finished();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater47.finish();
        long long59 = deflater47.getBytesRead();
        deflater47.reset();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater47.setInput(byteArray67, (int) (short) 0, (int) (short) 1);
        deflater32.setDictionary(byteArray67);
        int int72 = deflater18.deflate(byteArray67);
        int int75 = deflater15.deflate(byteArray67, (int) (byte) 1, 2);
        int int78 = deflater10.deflate(byteArray67, 0, 1);
        deflater6.setInput(byteArray67);
        deflater1.setInput(byteArray67);
        int int81 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        long long54 = deflater1.getBytesRead();
        boolean boolean55 = deflater1.needsInput();
        int int56 = deflater1.getTotalIn();
        int int57 = deflater1.getTotalOut();
        deflater1.setStrategy(1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6L + "'", long54 == 6L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater();
        deflater62.reset();
        long long64 = deflater62.getBytesWritten();
        int int65 = deflater62.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 1 };
        deflater62.setInput(byteArray68);
        deflater1.setDictionary(byteArray68);
        long long71 = deflater1.getBytesRead();
        deflater1.reset();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (short) -1, false);
        int int14 = deflater13.getTotalIn();
        int int15 = deflater13.getTotalIn();
        boolean boolean16 = deflater13.finished();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesWritten();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater18.deflate(byteArray57);
        deflater13.setDictionary(byteArray57);
        int int64 = deflater1.deflate(byteArray57);
        int int65 = deflater1.getTotalIn();
        long long66 = deflater1.getBytesRead();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setInput(byteArray46, 0, 0);
        int int51 = deflater31.deflate(byteArray46);
        deflater5.setInput(byteArray46);
        deflater1.setDictionary(byteArray46);
        int int54 = deflater1.getAdler();
        deflater1.reset();
        deflater1.setLevel((int) (byte) -1);
        int int58 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        long long61 = deflater60.getBytesRead();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater63.setInput(byteArray75);
        deflater60.setDictionary(byteArray75);
        int int79 = deflater1.deflate(byteArray75);
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 87360012 + "'", int54 == 87360012);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((-1), true);
        long long17 = deflater16.getBytesWritten();
        deflater16.setLevel(2);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater36.setInput(byteArray56, (int) (short) 0, (int) (short) 1);
        deflater21.setDictionary(byteArray56);
        deflater16.setInput(byteArray56);
        deflater1.setInput(byteArray56, 3, 1);
        boolean boolean65 = deflater1.finished();
        int int66 = deflater1.getTotalOut();
        int int67 = deflater1.getTotalOut();
        long long68 = deflater1.getBytesWritten();
        int int69 = deflater1.getTotalIn();
        int int70 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesWritten();
        int int30 = deflater28.getTotalOut();
        long long31 = deflater28.getBytesWritten();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        deflater33.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setDictionary(byteArray46);
        deflater28.setDictionary(byteArray46);
        deflater1.setInput(byteArray46);
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getTotalIn();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater58.setInput(byteArray67);
        deflater55.setInput(byteArray67);
        deflater53.setInput(byteArray67);
        boolean boolean71 = deflater53.finished();
        byte[] byteArray78 = new byte[] { (byte) 100, (byte) 10, (byte) 0, (byte) 10, (byte) 10, (byte) 1 };
        int int79 = deflater53.deflate(byteArray78);
        int int80 = deflater1.deflate(byteArray78);
        boolean boolean81 = deflater1.needsInput();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[120, 1, 0, 10, 10, 1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        int int2 = deflater1.getTotalIn();
        boolean boolean3 = deflater1.finished();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        deflater5.reset();
        deflater5.reset();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        deflater10.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater10.setDictionary(byteArray23);
        int int26 = deflater5.deflate(byteArray23);
        int int27 = deflater1.deflate(byteArray23);
        java.lang.Class<?> wildcardClass28 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesRead();
        boolean boolean61 = deflater1.finished();
        deflater1.finish();
        deflater1.setLevel(1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(9);
        boolean boolean2 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setDictionary(byteArray14);
        int int17 = deflater1.getAdler();
        int int18 = deflater1.getAdler();
        deflater1.reset();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 87360012 + "'", int17 == 87360012);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 87360012 + "'", int18 == 87360012);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        deflater1.finish();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        int int23 = deflater9.getAdler();
        byte[] byteArray25 = new byte[] { (byte) 10 };
        deflater9.setDictionary(byteArray25);
        deflater1.setDictionary(byteArray25);
        java.lang.Class<?> wildcardClass28 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10]");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        long long60 = deflater1.getBytesWritten();
        long long61 = deflater1.getBytesRead();
        int int62 = deflater1.getAdler();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        long long60 = deflater1.getBytesRead();
        boolean boolean61 = deflater1.finished();
        long long62 = deflater1.getBytesRead();
        deflater1.reset();
        deflater1.reset();
        boolean boolean65 = deflater1.finished();
        deflater1.reset();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesWritten();
        deflater1.finish();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((-1), true);
        long long32 = deflater31.getBytesWritten();
        deflater31.setLevel(2);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater51.setInput(byteArray71, (int) (short) 0, (int) (short) 1);
        deflater36.setDictionary(byteArray71);
        deflater31.setInput(byteArray71);
        deflater17.setDictionary(byteArray71);
        deflater1.setDictionary(byteArray71);
        long long79 = deflater1.getBytesWritten();
        boolean boolean80 = deflater1.needsInput();
        boolean boolean81 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getTotalOut();
        long long7 = deflater2.getBytesWritten();
        deflater2.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        deflater1.reset();
        long long5 = deflater1.getBytesRead();
        deflater1.finish();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean9 = deflater8.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater40.setInput(byteArray60, (int) (short) 0, (int) (short) 1);
        deflater25.setDictionary(byteArray60);
        int int65 = deflater11.deflate(byteArray60);
        int int68 = deflater8.deflate(byteArray60, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater();
        deflater69.reset();
        long long71 = deflater69.getBytesWritten();
        int int72 = deflater69.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 1 };
        deflater69.setInput(byteArray75);
        deflater8.setDictionary(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray75, (int) (short) 0, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 1]");
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (short) -1, false);
        int int14 = deflater13.getTotalIn();
        int int15 = deflater13.getTotalIn();
        boolean boolean16 = deflater13.finished();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        long long19 = deflater18.getBytesWritten();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater37.setInput(byteArray57, (int) (short) 0, (int) (short) 1);
        deflater22.setDictionary(byteArray57);
        int int62 = deflater18.deflate(byteArray57);
        deflater13.setDictionary(byteArray57);
        int int64 = deflater1.deflate(byteArray57);
        int int65 = deflater1.getTotalIn();
        long long66 = deflater1.getBytesRead();
        boolean boolean67 = deflater1.finished();
        int int68 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalOut();
        int int5 = deflater2.getTotalIn();
        deflater2.setLevel((int) (short) 0);
        long long8 = deflater2.getBytesRead();
        int int9 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        deflater1.setLevel((int) (short) 0);
        boolean boolean24 = deflater1.needsInput();
        deflater1.finish();
        java.lang.Class<?> wildcardClass26 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, false);
        deflater2.setLevel((int) (short) -1);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater2.setLevel((-1));
        deflater2.setStrategy(2);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        boolean boolean10 = deflater1.finished();
        deflater1.setLevel(2);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getAdler();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (short) -1, false);
        int int10 = deflater9.getTotalIn();
        int int11 = deflater9.getTotalIn();
        boolean boolean12 = deflater9.finished();
        deflater9.end();
        deflater9.setLevel((int) (short) -1);
        deflater9.end();
        boolean boolean17 = deflater9.finished();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(0);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((-1), true);
        long long23 = deflater22.getBytesWritten();
        deflater22.setLevel(2);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater42.setInput(byteArray62, (int) (short) 0, (int) (short) 1);
        deflater27.setDictionary(byteArray62);
        deflater22.setInput(byteArray62);
        long long68 = deflater22.getBytesRead();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        deflater70.reset();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater74.setInput(byteArray83);
        deflater70.setDictionary(byteArray83);
        deflater22.setInput(byteArray83);
        deflater19.setDictionary(byteArray83, 1, (int) (byte) 1);
        deflater9.setInput(byteArray83);
        int int91 = deflater2.deflate(byteArray83);
        deflater2.setStrategy((int) (short) 0);
        deflater2.finish();
        boolean boolean95 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater13.setInput(byteArray25);
        deflater11.setInput(byteArray25);
        deflater11.setStrategy(0);
        boolean boolean31 = deflater11.needsInput();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater36.setInput(byteArray48);
        deflater34.setInput(byteArray48);
        deflater11.setInput(byteArray48);
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        deflater11.setInput(byteArray74);
        int int79 = deflater5.deflate(byteArray74);
        deflater2.setInput(byteArray74);
        java.lang.Class<?> wildcardClass81 = byteArray74.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        deflater1.setLevel(2);
        long long56 = deflater1.getBytesWritten();
        deflater1.setStrategy((int) (byte) 1);
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater69.setInput(byteArray78);
        deflater66.setInput(byteArray78);
        deflater64.setInput(byteArray78);
        int int82 = deflater61.deflate(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray78, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 6L + "'", long56 == 6L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        long long8 = deflater1.getBytesWritten();
        boolean boolean9 = deflater1.finished();
        int int10 = deflater1.getAdler();
        long long11 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        deflater1.reset();
        long long14 = deflater1.getBytesRead();
        deflater1.setLevel(3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        deflater1.setLevel((int) (short) 0);
        int int9 = deflater1.getAdler();
        long long10 = deflater1.getBytesRead();
        deflater1.setLevel(3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        deflater1.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(126419322);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        int int17 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater(3, true);
        deflater20.reset();
        deflater20.setStrategy(0);
        int int24 = deflater20.getAdler();
        deflater20.setLevel(2);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater28.setInput(byteArray48, (int) (short) 0, (int) (short) 1);
        int int52 = deflater20.deflate(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray48, 118882828, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        int int6 = deflater1.getTotalOut();
        boolean boolean7 = deflater1.finished();
        boolean boolean8 = deflater1.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.reset();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        deflater23.reset();
        int int25 = deflater23.getTotalIn();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater23.setInput(byteArray32);
        deflater23.finish();
        long long35 = deflater23.getBytesRead();
        deflater23.reset();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater23.setInput(byteArray43, (int) (short) 0, (int) (short) 1);
        deflater10.setInput(byteArray43);
        boolean boolean48 = deflater10.finished();
        deflater10.finish();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        int int62 = deflater10.deflate(byteArray60);
        long long63 = deflater10.getBytesRead();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 100, (byte) 10, (byte) 0, (byte) 0 };
        deflater10.setInput(byteArray69, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray69, (int) ' ', 87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 6L + "'", long63 == 6L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 100, 10, 0, 0]");
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater1.setInput(byteArray14, 0, 0);
        long long19 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.finish();
        long long33 = deflater21.getBytesRead();
        deflater21.reset();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater21.setInput(byteArray41, (int) (short) 0, (int) (short) 1);
        deflater1.setDictionary(byteArray41);
        int int46 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.finish();
        deflater1.finish();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        int int13 = deflater12.getAdler();
        boolean boolean14 = deflater12.finished();
        deflater12.finish();
        deflater12.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        deflater18.finish();
        long long22 = deflater18.getBytesWritten();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        long long25 = deflater24.getBytesRead();
        long long26 = deflater24.getBytesRead();
        long long27 = deflater24.getBytesWritten();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater24.setInput(byteArray49);
        deflater18.setInput(byteArray49);
        deflater12.setDictionary(byteArray49);
        deflater1.setDictionary(byteArray49);
        boolean boolean57 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesWritten();
        deflater1.finish();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((-1), true);
        long long32 = deflater31.getBytesWritten();
        deflater31.setLevel(2);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater51.setInput(byteArray71, (int) (short) 0, (int) (short) 1);
        deflater36.setDictionary(byteArray71);
        deflater31.setInput(byteArray71);
        deflater17.setDictionary(byteArray71);
        deflater1.setDictionary(byteArray71);
        long long79 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(0, false);
        long long3 = deflater2.getBytesRead();
        long long4 = deflater2.getBytesRead();
        boolean boolean5 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 1, false);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (short) -1, false);
        int int7 = deflater6.getTotalIn();
        int int8 = deflater6.getTotalIn();
        boolean boolean9 = deflater6.finished();
        deflater6.end();
        deflater6.setLevel((int) (short) -1);
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        int int28 = deflater14.getTotalIn();
        deflater14.finish();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater(3, true);
        int int33 = deflater32.getAdler();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((-1), true);
        long long37 = deflater36.getBytesWritten();
        deflater36.setLevel(2);
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        byte[] byteArray76 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater56.setInput(byteArray76, (int) (short) 0, (int) (short) 1);
        deflater41.setDictionary(byteArray76);
        deflater36.setInput(byteArray76);
        deflater32.setDictionary(byteArray76);
        deflater14.setInput(byteArray76);
        deflater6.setInput(byteArray76);
        int int85 = deflater2.deflate(byteArray76);
        boolean boolean86 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        boolean boolean60 = deflater1.finished();
        deflater1.setLevel(1);
        long long63 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        long long8 = deflater1.getBytesRead();
        java.lang.Class<?> wildcardClass9 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        deflater1.end();
        deflater1.end();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(131074);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        int int8 = deflater1.getTotalIn();
        int int9 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        long long12 = deflater11.getBytesWritten();
        long long13 = deflater11.getBytesWritten();
        long long14 = deflater11.getBytesWritten();
        boolean boolean15 = deflater11.finished();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        int int20 = deflater17.getTotalIn();
        deflater17.finish();
        int int22 = deflater17.getTotalOut();
        boolean boolean23 = deflater17.finished();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        deflater25.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater25.setDictionary(byteArray38);
        int int41 = deflater25.getAdler();
        int int42 = deflater25.getAdler();
        deflater25.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        long long46 = deflater45.getBytesWritten();
        long long47 = deflater45.getBytesWritten();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray84);
        deflater45.setInput(byteArray84);
        deflater25.setInput(byteArray84);
        int int91 = deflater17.deflate(byteArray84);
        int int92 = deflater11.deflate(byteArray84);
        int int93 = deflater1.deflate(byteArray84);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 87360012 + "'", int41 == 87360012);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 87360012 + "'", int42 == 87360012);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 6 + "'", int91 == 6);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        deflater2.finish();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        boolean boolean8 = deflater1.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        long long11 = deflater10.getBytesWritten();
        int int12 = deflater10.getTotalIn();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater14.setDictionary(byteArray49);
        int int54 = deflater10.deflate(byteArray49);
        deflater1.setInput(byteArray49);
        deflater1.finish();
        long long57 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        int int22 = deflater1.getTotalIn();
        long long23 = deflater1.getBytesWritten();
        int int24 = deflater1.getAdler();
        int int25 = deflater1.getTotalIn();
        int int26 = deflater1.getTotalOut();
        int int27 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, false);
        deflater2.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        deflater5.finish();
        int int9 = deflater5.getTotalOut();
        boolean boolean10 = deflater5.needsInput();
        deflater5.setLevel((int) (short) 0);
        int int13 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (short) -1, false);
        int int17 = deflater16.getTotalIn();
        int int18 = deflater16.getTotalIn();
        boolean boolean19 = deflater16.finished();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        long long22 = deflater21.getBytesWritten();
        int int23 = deflater21.getTotalIn();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater25.finish();
        long long37 = deflater25.getBytesRead();
        deflater25.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        int int42 = deflater40.getTotalIn();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater40.setInput(byteArray49);
        deflater40.finish();
        long long52 = deflater40.getBytesRead();
        deflater40.reset();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater40.setInput(byteArray60, (int) (short) 0, (int) (short) 1);
        deflater25.setDictionary(byteArray60);
        int int65 = deflater21.deflate(byteArray60);
        deflater16.setDictionary(byteArray60);
        int int67 = deflater5.deflate(byteArray60);
        deflater2.setInput(byteArray60);
        boolean boolean69 = deflater2.needsInput();
        java.lang.Class<?> wildcardClass70 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        boolean boolean5 = deflater1.finished();
        int int6 = deflater1.getTotalIn();
        boolean boolean7 = deflater1.needsInput();
        deflater1.finish();
        int int9 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        deflater2.finish();
        deflater2.finish();
        deflater2.setLevel(0);
        deflater2.finish();
        java.lang.Class<?> wildcardClass8 = deflater2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        deflater40.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater40.setInput(byteArray52);
        deflater38.setInput(byteArray52);
        deflater38.setStrategy(0);
        boolean boolean58 = deflater38.needsInput();
        java.util.zip.Deflater deflater61 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater63.setInput(byteArray75);
        deflater61.setInput(byteArray75);
        deflater38.setInput(byteArray75);
        deflater22.setDictionary(byteArray75);
        int int81 = deflater18.deflate(byteArray75);
        int int82 = deflater1.deflate(byteArray75);
        int int83 = deflater1.getTotalIn();
        deflater1.setStrategy((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        int int6 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.end();
        boolean boolean19 = deflater1.finished();
        boolean boolean20 = deflater1.needsInput();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        deflater1.setStrategy(0);
        int int17 = deflater1.getTotalOut();
        byte[] byteArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = deflater1.deflate(byteArray18, 0, (int) '#', 12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        int int4 = deflater1.getTotalIn();
        long long5 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.setLevel((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, true);
        deflater2.setLevel((-1));
        boolean boolean5 = deflater2.needsInput();
        deflater2.setLevel(0);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater(3, true);
        int int11 = deflater10.getAdler();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((-1), true);
        long long15 = deflater14.getBytesWritten();
        deflater14.setLevel(2);
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater19.finish();
        long long31 = deflater19.getBytesRead();
        deflater19.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater34.setInput(byteArray54, (int) (short) 0, (int) (short) 1);
        deflater19.setDictionary(byteArray54);
        deflater14.setInput(byteArray54);
        deflater10.setDictionary(byteArray54);
        int int64 = deflater2.deflate(byteArray54, 6, (int) (short) 0, 0);
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesWritten();
        int int30 = deflater28.getTotalOut();
        long long31 = deflater28.getBytesWritten();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        deflater33.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setDictionary(byteArray46);
        deflater28.setDictionary(byteArray46);
        deflater1.setInput(byteArray46);
        boolean boolean51 = deflater1.needsInput();
        boolean boolean52 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        deflater2.reset();
        long long50 = deflater2.getBytesRead();
        int int51 = deflater2.getTotalIn();
        long long52 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        deflater1.setLevel((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        long long54 = deflater1.getBytesRead();
        boolean boolean55 = deflater1.needsInput();
        int int56 = deflater1.getTotalOut();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6L + "'", long54 == 6L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        int int2 = deflater1.getAdler();
        boolean boolean3 = deflater1.needsInput();
        boolean boolean4 = deflater1.finished();
        long long5 = deflater1.getBytesRead();
        boolean boolean6 = deflater1.finished();
        int int7 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        deflater2.finish();
        long long6 = deflater2.getBytesWritten();
        long long7 = deflater2.getBytesRead();
        java.lang.Class<?> wildcardClass8 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        boolean boolean4 = deflater1.finished();
        int int5 = deflater1.getTotalOut();
        int int6 = deflater1.getAdler();
        deflater1.finish();
        int int8 = deflater1.getTotalOut();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        deflater63.finish();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater63.setInput(byteArray77);
        deflater1.setInput(byteArray77);
        int int81 = deflater1.getTotalOut();
        int int82 = deflater1.getTotalOut();
        java.lang.Class<?> wildcardClass83 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(0, false);
        long long3 = deflater2.getBytesRead();
        boolean boolean4 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 0);
        deflater1.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((-1), true);
        int int6 = deflater5.getAdler();
        boolean boolean7 = deflater5.finished();
        boolean boolean8 = deflater5.needsInput();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (short) -1, true);
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        int int16 = deflater13.getTotalIn();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater21.setInput(byteArray33);
        deflater19.setInput(byteArray33);
        deflater19.setStrategy(0);
        boolean boolean39 = deflater19.needsInput();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater44.setInput(byteArray56);
        deflater42.setInput(byteArray56);
        deflater19.setInput(byteArray56);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater19.setInput(byteArray82);
        int int87 = deflater13.deflate(byteArray82);
        deflater11.setInput(byteArray82, 1, 0);
        deflater5.setDictionary(byteArray82);
        deflater1.setInput(byteArray82);
        byte[] byteArray93 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int96 = deflater1.deflate(byteArray93, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        long long22 = deflater1.getBytesWritten();
        deflater1.finish();
        deflater1.finish();
        int int25 = deflater1.getTotalOut();
        long long26 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        deflater1.finish();
        long long55 = deflater1.getBytesWritten();
        deflater1.end();
        boolean boolean57 = deflater1.needsInput();
        boolean boolean58 = deflater1.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 6L + "'", long55 == 6L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        deflater1.setInput(byteArray40);
        int int46 = deflater1.getTotalIn();
        byte[] byteArray47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int51 = deflater1.deflate(byteArray47, 1, 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalOut();
        long long58 = deflater1.getBytesRead();
        deflater1.reset();
        deflater1.setLevel(0);
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 6L + "'", long58 == 6L);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        boolean boolean62 = deflater1.needsInput();
        boolean boolean63 = deflater1.finished();
        int int64 = deflater1.getTotalIn();
        deflater1.setStrategy(1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        deflater4.finish();
        int int8 = deflater4.getTotalOut();
        boolean boolean9 = deflater4.needsInput();
        long long10 = deflater4.getBytesRead();
        long long11 = deflater4.getBytesWritten();
        boolean boolean12 = deflater4.finished();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater14.setInput(byteArray26);
        int int29 = deflater14.getTotalIn();
        int int30 = deflater14.getTotalOut();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        int int46 = deflater32.getAdler();
        boolean boolean47 = deflater32.needsInput();
        int int48 = deflater32.getTotalIn();
        int int49 = deflater32.getTotalIn();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1);
        deflater66.reset();
        int int68 = deflater66.getTotalIn();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater66.setInput(byteArray75);
        deflater66.finish();
        long long78 = deflater66.getBytesRead();
        deflater66.reset();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater66.setInput(byteArray86, (int) (short) 0, (int) (short) 1);
        int int90 = deflater51.deflate(byteArray86);
        deflater32.setDictionary(byteArray86);
        deflater14.setInput(byteArray86);
        deflater4.setInput(byteArray86);
        deflater1.setDictionary(byteArray86);
        java.lang.Class<?> wildcardClass95 = byteArray86.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        deflater1.setLevel((int) (short) 0);
        int int9 = deflater1.getTotalIn();
        deflater1.reset();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        deflater12.finish();
        int int16 = deflater12.getTotalIn();
        int int17 = deflater12.getAdler();
        boolean boolean18 = deflater12.finished();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        deflater20.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater20.setDictionary(byteArray33);
        int int36 = deflater12.deflate(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = deflater1.deflate(byteArray33, 126419322, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[120, 1, 3, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        boolean boolean5 = deflater2.needsInput();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater();
        deflater6.reset();
        long long8 = deflater6.getBytesRead();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (short) -1, false);
        deflater11.finish();
        boolean boolean13 = deflater11.finished();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater18.setInput(byteArray30);
        deflater16.setInput(byteArray30);
        deflater16.setStrategy(0);
        boolean boolean36 = deflater16.needsInput();
        long long37 = deflater16.getBytesWritten();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        long long40 = deflater39.getBytesWritten();
        int int41 = deflater39.getTotalIn();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getTotalIn();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater58.setInput(byteArray67);
        deflater58.finish();
        long long70 = deflater58.getBytesRead();
        deflater58.reset();
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater58.setInput(byteArray78, (int) (short) 0, (int) (short) 1);
        deflater43.setDictionary(byteArray78);
        int int83 = deflater39.deflate(byteArray78);
        deflater16.setInput(byteArray78, (int) (short) 1, (int) (byte) 0);
        deflater11.setDictionary(byteArray78);
        deflater6.setInput(byteArray78, 2, 0);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray78, (int) (short) -1, 131074);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        boolean boolean13 = deflater1.finished();
        long long14 = deflater1.getBytesWritten();
        boolean boolean15 = deflater1.needsInput();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean18 = deflater17.finished();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater49.setInput(byteArray69, (int) (short) 0, (int) (short) 1);
        deflater34.setDictionary(byteArray69);
        int int74 = deflater20.deflate(byteArray69);
        int int77 = deflater17.deflate(byteArray69, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        int int81 = deflater79.getTotalIn();
        deflater79.finish();
        java.util.zip.Deflater deflater84 = new java.util.zip.Deflater((int) (byte) 1);
        deflater84.reset();
        int int86 = deflater84.getTotalIn();
        byte[] byteArray93 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater84.setInput(byteArray93);
        deflater79.setInput(byteArray93);
        deflater17.setInput(byteArray93);
        deflater1.setDictionary(byteArray93);
        boolean boolean98 = deflater1.finished();
        long long99 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(2);
        long long2 = deflater1.getBytesRead();
        deflater1.setLevel((int) (byte) 0);
        int int5 = deflater1.getTotalOut();
        long long6 = deflater1.getBytesRead();
        deflater1.finish();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean28 = deflater27.finished();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater59.finish();
        long long71 = deflater59.getBytesRead();
        deflater59.reset();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater59.setInput(byteArray79, (int) (short) 0, (int) (short) 1);
        deflater44.setDictionary(byteArray79);
        int int84 = deflater30.deflate(byteArray79);
        int int87 = deflater27.deflate(byteArray79, (int) (byte) 1, 2);
        int int88 = deflater1.deflate(byteArray79);
        long long89 = deflater1.getBytesRead();
        int int90 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 6 + "'", int84 == 6);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        int int4 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        deflater6.reset();
        boolean boolean10 = deflater6.finished();
        int int11 = deflater6.getTotalOut();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getAdler();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater13.setInput(byteArray26);
        int int31 = deflater6.deflate(byteArray26, 0, 0);
        deflater2.setInput(byteArray26);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        deflater1.setLevel((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater();
        deflater11.reset();
        long long13 = deflater11.getBytesRead();
        int int14 = deflater11.getTotalIn();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater(2, true);
        long long18 = deflater17.getBytesRead();
        int int19 = deflater17.getAdler();
        boolean boolean20 = deflater17.needsInput();
        int int21 = deflater17.getAdler();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((-1), true);
        long long25 = deflater24.getBytesWritten();
        deflater24.setLevel(2);
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        deflater24.setInput(byteArray64);
        long long70 = deflater24.getBytesRead();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        deflater72.reset();
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater((int) (byte) 1);
        deflater76.reset();
        int int78 = deflater76.getTotalIn();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater76.setInput(byteArray85);
        deflater72.setDictionary(byteArray85);
        deflater24.setInput(byteArray85);
        int int89 = deflater17.deflate(byteArray85);
        deflater11.setDictionary(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = deflater1.deflate(byteArray85, 2, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        deflater4.reset();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater4.setInput(byteArray24, (int) (short) 0, (int) (short) 1);
        deflater4.reset();
        deflater4.end();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater31.setInput(byteArray64);
        boolean boolean69 = deflater31.finished();
        deflater31.finish();
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater72.setInput(byteArray81);
        int int83 = deflater31.deflate(byteArray81);
        deflater4.setInput(byteArray81);
        deflater1.setInput(byteArray81);
        boolean boolean86 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 6 + "'", int83 == 6);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.finish();
        int int6 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        int int8 = deflater1.getTotalIn();
        boolean boolean9 = deflater1.finished();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(0);
        int int12 = deflater11.getAdler();
        boolean boolean13 = deflater11.needsInput();
        boolean boolean14 = deflater11.finished();
        boolean boolean15 = deflater11.finished();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        int int20 = deflater17.getTotalIn();
        deflater17.finish();
        deflater17.reset();
        boolean boolean23 = deflater17.finished();
        deflater17.finish();
        deflater17.finish();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((-1), true);
        int int29 = deflater28.getAdler();
        boolean boolean30 = deflater28.finished();
        deflater28.finish();
        deflater28.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        deflater34.finish();
        long long38 = deflater34.getBytesWritten();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        long long41 = deflater40.getBytesRead();
        long long42 = deflater40.getBytesRead();
        long long43 = deflater40.getBytesWritten();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater40.setInput(byteArray65);
        deflater34.setInput(byteArray65);
        deflater28.setDictionary(byteArray65);
        deflater17.setDictionary(byteArray65);
        deflater11.setInput(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray65, 9, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        deflater1.setStrategy(2);
        int int7 = deflater1.getAdler();
        boolean boolean8 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        deflater1.finish();
        long long55 = deflater1.getBytesWritten();
        int int56 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 6L + "'", long55 == 6L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 118882828 + "'", int56 == 118882828);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        int int23 = deflater21.getTotalIn();
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater21.setInput(byteArray30);
        deflater21.reset();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater34.finish();
        long long46 = deflater34.getBytesRead();
        deflater34.reset();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater34.setInput(byteArray54, (int) (short) 0, (int) (short) 1);
        deflater21.setInput(byteArray54);
        deflater1.setDictionary(byteArray54);
        int int60 = deflater1.getAdler();
        byte[] byteArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 118882828 + "'", int60 == 118882828);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getTotalIn();
        long long7 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater9.setInput(byteArray21);
        boolean boolean24 = deflater9.needsInput();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        int int49 = deflater47.getTotalIn();
        byte[] byteArray56 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater47.setInput(byteArray56);
        deflater44.setInput(byteArray56);
        deflater42.setInput(byteArray56);
        deflater42.setStrategy(0);
        boolean boolean62 = deflater42.needsInput();
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater67 = new java.util.zip.Deflater((int) (byte) 1);
        deflater67.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater67.setInput(byteArray79);
        deflater65.setInput(byteArray79);
        deflater42.setInput(byteArray79);
        deflater26.setDictionary(byteArray79);
        int int85 = deflater9.deflate(byteArray79);
        deflater2.setInput(byteArray79);
        deflater2.finish();
        deflater2.setLevel(6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        int int6 = deflater2.getTotalOut();
        boolean boolean7 = deflater2.finished();
        int int8 = deflater2.getTotalOut();
        long long9 = deflater2.getBytesRead();
        deflater2.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        long long4 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        int int9 = deflater6.getTotalIn();
        int int10 = deflater6.getTotalIn();
        long long11 = deflater6.getBytesWritten();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        deflater13.reset();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater13.setInput(byteArray33, (int) (short) 0, (int) (short) 1);
        deflater13.reset();
        deflater13.reset();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (byte) 1);
        long long41 = deflater40.getBytesWritten();
        int int42 = deflater40.getTotalOut();
        long long43 = deflater40.getBytesWritten();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        deflater45.reset();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater45.setDictionary(byteArray58);
        deflater40.setDictionary(byteArray58);
        deflater13.setInput(byteArray58);
        deflater6.setDictionary(byteArray58, 2, (int) (short) 0);
        deflater2.setInput(byteArray58);
        boolean boolean67 = deflater2.finished();
        java.lang.Class<?> wildcardClass68 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.finished();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass9 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        long long20 = deflater1.getBytesWritten();
        deflater1.reset();
        int int22 = deflater1.getAdler();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        int int38 = deflater24.getAdler();
        byte[] byteArray40 = new byte[] { (byte) 10 };
        deflater24.setDictionary(byteArray40);
        deflater1.setDictionary(byteArray40);
        boolean boolean43 = deflater1.needsInput();
        int int44 = deflater1.getAdler();
        boolean boolean45 = deflater1.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(131074);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 720907 + "'", int44 == 720907);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        deflater1.setLevel((int) (short) 1);
        boolean boolean8 = deflater1.needsInput();
        int int9 = deflater1.getAdler();
        deflater1.finish();
        deflater1.reset();
        int int12 = deflater1.getTotalIn();
        long long13 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (short) 0, true);
        boolean boolean6 = deflater5.needsInput();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        int int11 = deflater8.getTotalIn();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        int int21 = deflater19.getTotalIn();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater19.setInput(byteArray28);
        deflater16.setInput(byteArray28);
        deflater14.setInput(byteArray28);
        deflater14.setStrategy(0);
        boolean boolean34 = deflater14.needsInput();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater39.setInput(byteArray51);
        deflater37.setInput(byteArray51);
        deflater14.setInput(byteArray51);
        java.util.zip.Deflater deflater57 = new java.util.zip.Deflater((int) (byte) 1);
        deflater57.reset();
        int int59 = deflater57.getTotalIn();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater57.setInput(byteArray66);
        deflater57.finish();
        long long69 = deflater57.getBytesRead();
        deflater57.reset();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater57.setInput(byteArray77, (int) (short) 0, (int) (short) 1);
        deflater14.setInput(byteArray77);
        int int82 = deflater8.deflate(byteArray77);
        deflater5.setInput(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray77, 100, 139789087);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        int int19 = deflater1.getTotalOut();
        int int20 = deflater1.getAdler();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getAdler();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater38.setInput(byteArray51, 0, 0);
        int int56 = deflater36.deflate(byteArray51);
        deflater22.setDictionary(byteArray51, (int) (byte) 0, 2);
        deflater1.setDictionary(byteArray51, 0, (int) (byte) 0);
        boolean boolean63 = deflater1.finished();
        int int64 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((-1));
        boolean boolean2 = deflater1.finished();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((-1), true);
        long long7 = deflater6.getBytesWritten();
        deflater6.setLevel(2);
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater11.finish();
        long long23 = deflater11.getBytesRead();
        deflater11.reset();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater26.setInput(byteArray46, (int) (short) 0, (int) (short) 1);
        deflater11.setDictionary(byteArray46);
        deflater6.setInput(byteArray46);
        long long52 = deflater6.getBytesRead();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        deflater54.reset();
        java.util.zip.Deflater deflater58 = new java.util.zip.Deflater((int) (byte) 1);
        deflater58.reset();
        int int60 = deflater58.getTotalIn();
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater58.setInput(byteArray67);
        deflater54.setDictionary(byteArray67);
        deflater6.setInput(byteArray67);
        deflater1.setDictionary(byteArray67);
        deflater1.setStrategy(0);
        int int74 = deflater1.getTotalIn();
        int int75 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass21 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesWritten();
        deflater1.finish();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((-1), true);
        long long32 = deflater31.getBytesWritten();
        deflater31.setLevel(2);
        java.util.zip.Deflater deflater36 = new java.util.zip.Deflater((int) (byte) 1);
        deflater36.reset();
        int int38 = deflater36.getTotalIn();
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater36.setInput(byteArray45);
        deflater36.finish();
        long long48 = deflater36.getBytesRead();
        deflater36.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater51.setInput(byteArray60);
        deflater51.finish();
        long long63 = deflater51.getBytesRead();
        deflater51.reset();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater51.setInput(byteArray71, (int) (short) 0, (int) (short) 1);
        deflater36.setDictionary(byteArray71);
        deflater31.setInput(byteArray71);
        deflater17.setDictionary(byteArray71);
        deflater1.setDictionary(byteArray71);
        java.util.zip.Deflater deflater80 = new java.util.zip.Deflater((int) (byte) 1);
        deflater80.reset();
        int int82 = deflater80.getTotalIn();
        byte[] byteArray89 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater80.setInput(byteArray89);
        int int93 = deflater1.deflate(byteArray89, 0, 0);
        deflater1.setStrategy((int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        int int6 = deflater1.getTotalOut();
        deflater1.reset();
        int int8 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        int int6 = deflater2.getTotalOut();
        boolean boolean7 = deflater2.finished();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        int int23 = deflater9.getAdler();
        boolean boolean24 = deflater9.needsInput();
        int int25 = deflater9.getTotalIn();
        deflater9.end();
        boolean boolean27 = deflater9.finished();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        deflater29.finish();
        int int33 = deflater29.getTotalOut();
        boolean boolean34 = deflater29.needsInput();
        deflater29.setLevel((int) (short) 0);
        int int37 = deflater29.getTotalIn();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater((int) (short) -1, false);
        int int41 = deflater40.getTotalIn();
        int int42 = deflater40.getTotalIn();
        boolean boolean43 = deflater40.finished();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        long long46 = deflater45.getBytesWritten();
        int int47 = deflater45.getTotalIn();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray84);
        int int89 = deflater45.deflate(byteArray84);
        deflater40.setDictionary(byteArray84);
        int int91 = deflater29.deflate(byteArray84);
        deflater9.setInput(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray84, 1, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.finish();
        deflater1.finish();
        long long10 = deflater1.getBytesWritten();
        int int11 = deflater1.getTotalOut();
        deflater1.reset();
        deflater1.finish();
        long long14 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean18 = deflater17.needsInput();
        int int19 = deflater17.getTotalOut();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        long long22 = deflater21.getBytesWritten();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        deflater24.setDictionary(byteArray59);
        deflater21.setInput(byteArray59);
        deflater17.setDictionary(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray59, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        long long22 = deflater1.getBytesWritten();
        deflater1.finish();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean26 = deflater25.finished();
        deflater25.reset();
        boolean boolean28 = deflater25.finished();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater30.setInput(byteArray63);
        int int68 = deflater25.deflate(byteArray63);
        deflater1.setDictionary(byteArray63);
        deflater1.reset();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getTotalIn();
        int int16 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(2, true);
        long long20 = deflater19.getBytesRead();
        int int21 = deflater19.getAdler();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((int) (byte) 1);
        long long24 = deflater23.getBytesRead();
        long long25 = deflater23.getBytesRead();
        deflater23.reset();
        boolean boolean27 = deflater23.needsInput();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((-1), true);
        long long45 = deflater44.getBytesWritten();
        deflater44.setLevel(2);
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.finish();
        long long61 = deflater49.getBytesRead();
        deflater49.reset();
        java.util.zip.Deflater deflater64 = new java.util.zip.Deflater((int) (byte) 1);
        deflater64.reset();
        int int66 = deflater64.getTotalIn();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater64.setInput(byteArray73);
        deflater64.finish();
        long long76 = deflater64.getBytesRead();
        deflater64.reset();
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater64.setInput(byteArray84, (int) (short) 0, (int) (short) 1);
        deflater49.setDictionary(byteArray84);
        deflater44.setInput(byteArray84);
        deflater29.setInput(byteArray84, 3, 1);
        deflater23.setDictionary(byteArray84);
        int int94 = deflater19.deflate(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray84, 196610, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getTotalOut();
        boolean boolean4 = deflater2.needsInput();
        deflater2.setStrategy(0);
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        int int11 = deflater8.getTotalIn();
        deflater8.finish();
        deflater8.reset();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater8.setInput(byteArray24);
        deflater8.finish();
        int int28 = deflater8.getAdler();
        int int29 = deflater8.getTotalIn();
        int int30 = deflater8.getAdler();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        deflater32.reset();
        long long35 = deflater32.getBytesWritten();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        deflater37.finish();
        int int41 = deflater37.getTotalOut();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        deflater43.finish();
        long long47 = deflater43.getBytesWritten();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        long long50 = deflater49.getBytesRead();
        long long51 = deflater49.getBytesRead();
        long long52 = deflater49.getBytesWritten();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        deflater54.reset();
        int int56 = deflater54.getTotalIn();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater54.setInput(byteArray63);
        deflater54.finish();
        long long66 = deflater54.getBytesRead();
        deflater54.reset();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater54.setInput(byteArray74, (int) (short) 0, (int) (short) 1);
        deflater49.setInput(byteArray74);
        deflater43.setInput(byteArray74);
        deflater37.setDictionary(byteArray74);
        int int81 = deflater32.deflate(byteArray74);
        deflater8.setInput(byteArray74);
        int int85 = deflater2.deflate(byteArray74, 2, 2);
        deflater2.setLevel((-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        int int8 = deflater1.getTotalOut();
        int int9 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        boolean boolean5 = deflater1.finished();
        int int6 = deflater1.getTotalIn();
        boolean boolean7 = deflater1.needsInput();
        deflater1.finish();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean11 = deflater10.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater13.finish();
        long long25 = deflater13.getBytesRead();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        deflater42.finish();
        long long54 = deflater42.getBytesRead();
        deflater42.reset();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater42.setInput(byteArray62, (int) (short) 0, (int) (short) 1);
        deflater27.setDictionary(byteArray62);
        int int67 = deflater13.deflate(byteArray62);
        int int70 = deflater10.deflate(byteArray62, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (byte) 1);
        deflater72.reset();
        int int74 = deflater72.getTotalIn();
        deflater72.finish();
        java.util.zip.Deflater deflater77 = new java.util.zip.Deflater((int) (byte) 1);
        deflater77.reset();
        int int79 = deflater77.getTotalIn();
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater77.setInput(byteArray86);
        deflater72.setInput(byteArray86);
        deflater10.setInput(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = deflater1.deflate(byteArray86, (-1), 87360012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater14.finish();
        long long26 = deflater14.getBytesRead();
        deflater14.reset();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater14.setInput(byteArray34, (int) (short) 0, (int) (short) 1);
        deflater1.setInput(byteArray34);
        boolean boolean39 = deflater1.finished();
        deflater1.finish();
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        int int44 = deflater42.getTotalIn();
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater42.setInput(byteArray51);
        int int53 = deflater1.deflate(byteArray51);
        long long54 = deflater1.getBytesRead();
        boolean boolean55 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[120, 1, 99, 100, -4, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 6L + "'", long54 == 6L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater(2, true);
        int int12 = deflater11.getTotalIn();
        int int13 = deflater11.getTotalOut();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater15.setInput(byteArray27);
        boolean boolean30 = deflater15.needsInput();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (byte) 1);
        deflater53.reset();
        int int55 = deflater53.getTotalIn();
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater53.setInput(byteArray62);
        deflater50.setInput(byteArray62);
        deflater48.setInput(byteArray62);
        deflater48.setStrategy(0);
        boolean boolean68 = deflater48.needsInput();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        java.util.zip.Deflater deflater76 = new java.util.zip.Deflater((int) (byte) 1);
        deflater76.reset();
        int int78 = deflater76.getTotalIn();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater76.setInput(byteArray85);
        deflater73.setInput(byteArray85);
        deflater71.setInput(byteArray85);
        deflater48.setInput(byteArray85);
        deflater32.setDictionary(byteArray85);
        int int91 = deflater15.deflate(byteArray85);
        int int92 = deflater11.deflate(byteArray85);
        deflater1.setInput(byteArray85);
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[120, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater20.setInput(byteArray40, (int) (short) 0, (int) (short) 1);
        deflater5.setDictionary(byteArray40);
        int int45 = deflater1.deflate(byteArray40);
        long long46 = deflater1.getBytesWritten();
        int int47 = deflater1.getAdler();
        boolean boolean48 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        deflater1.finish();
        int int59 = deflater1.getTotalOut();
        int int60 = deflater1.getTotalIn();
        deflater1.setStrategy(0);
        deflater1.finish();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean27 = deflater1.needsInput();
        deflater1.finish();
        int int29 = deflater1.getAdler();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.reset();
        boolean boolean43 = deflater31.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        int int56 = deflater31.deflate(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray54, 139789087, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        deflater2.finish();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        deflater5.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater5.setDictionary(byteArray18);
        int int21 = deflater5.getAdler();
        int int22 = deflater5.getAdler();
        deflater5.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        long long26 = deflater25.getBytesWritten();
        long long27 = deflater25.getBytesWritten();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        deflater25.setInput(byteArray64);
        deflater5.setInput(byteArray64);
        int int71 = deflater2.deflate(byteArray64);
        int int72 = deflater2.getTotalIn();
        deflater2.setLevel(0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 87360012 + "'", int21 == 87360012);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 87360012 + "'", int22 == 87360012);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[3, 0, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        boolean boolean17 = deflater2.needsInput();
        boolean boolean18 = deflater2.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setStrategy(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater(3, true);
        int int20 = deflater19.getAdler();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((-1), true);
        long long24 = deflater23.getBytesWritten();
        deflater23.setLevel(2);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        deflater23.setInput(byteArray63);
        deflater19.setDictionary(byteArray63);
        deflater1.setInput(byteArray63);
        long long71 = deflater1.getBytesRead();
        deflater1.reset();
        int int73 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater19 = new java.util.zip.Deflater((int) (byte) 1);
        deflater19.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater19.setInput(byteArray31);
        deflater17.setInput(byteArray31);
        deflater17.setStrategy(0);
        boolean boolean37 = deflater17.needsInput();
        java.util.zip.Deflater deflater40 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater42 = new java.util.zip.Deflater((int) (byte) 1);
        deflater42.reset();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater42.setInput(byteArray54);
        deflater40.setInput(byteArray54);
        deflater17.setInput(byteArray54);
        deflater1.setDictionary(byteArray54);
        int int60 = deflater1.getTotalOut();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        int int3 = deflater2.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        int int8 = deflater5.getTotalIn();
        deflater5.finish();
        deflater5.reset();
        boolean boolean11 = deflater5.finished();
        deflater5.finish();
        deflater5.setLevel(6);
        deflater5.finish();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        int int31 = deflater17.getAdler();
        boolean boolean32 = deflater17.needsInput();
        int int33 = deflater17.getTotalIn();
        deflater17.reset();
        int int35 = deflater17.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        deflater37.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater37.setDictionary(byteArray50);
        deflater17.setInput(byteArray50);
        deflater5.setInput(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray50, 126419322, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        deflater2.finish();
        deflater2.reset();
        deflater2.end();
        boolean boolean8 = deflater2.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        deflater10.reset();
        int int24 = deflater10.getAdler();
        boolean boolean25 = deflater10.needsInput();
        int int26 = deflater10.getTotalIn();
        deflater10.reset();
        int int28 = deflater10.getAdler();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getAdler();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater30.setInput(byteArray43, 0, 0);
        long long48 = deflater30.getBytesRead();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater50.setInput(byteArray70, (int) (short) 0, (int) (short) 1);
        deflater30.setDictionary(byteArray70);
        deflater10.setDictionary(byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = deflater2.deflate(byteArray70, 118882828, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the compressor and discards any unprocessed input. This method should be called when the compressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Deflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getTotalIn();
        boolean boolean49 = deflater2.needsInput();
        deflater2.setLevel(9);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        deflater1.setLevel((int) (byte) 1);
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater28.setInput(byteArray40);
        deflater26.setInput(byteArray40);
        deflater26.setStrategy(0);
        boolean boolean46 = deflater26.needsInput();
        long long47 = deflater26.getBytesWritten();
        long long48 = deflater26.getBytesRead();
        deflater26.setLevel(1);
        long long51 = deflater26.getBytesWritten();
        boolean boolean52 = deflater26.needsInput();
        int int53 = deflater26.getTotalIn();
        boolean boolean54 = deflater26.needsInput();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater56.finish();
        long long68 = deflater56.getBytesRead();
        deflater56.reset();
        int int70 = deflater56.getAdler();
        byte[] byteArray72 = new byte[] { (byte) 10 };
        deflater56.setDictionary(byteArray72);
        deflater26.setDictionary(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = deflater1.deflate(byteArray72, (int) (byte) 0, (int) (short) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10]");
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.setStrategy(0);
        int int6 = deflater2.getAdler();
        int int7 = deflater2.getTotalOut();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesWritten();
        boolean boolean10 = deflater1.needsInput();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        long long26 = deflater1.getBytesRead();
        int int27 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        deflater29.finish();
        java.util.zip.Deflater deflater34 = new java.util.zip.Deflater((int) (byte) 1);
        deflater34.reset();
        int int36 = deflater34.getTotalIn();
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater34.setInput(byteArray43);
        deflater29.setInput(byteArray43);
        int int46 = deflater29.getTotalIn();
        int int47 = deflater29.getTotalOut();
        java.util.zip.Deflater deflater49 = new java.util.zip.Deflater((int) (byte) 1);
        deflater49.reset();
        int int51 = deflater49.getTotalIn();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater49.setInput(byteArray58);
        deflater49.reset();
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater((int) (byte) 1);
        deflater62.reset();
        int int64 = deflater62.getTotalIn();
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater62.setInput(byteArray71);
        deflater62.finish();
        long long74 = deflater62.getBytesRead();
        deflater62.reset();
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater62.setInput(byteArray82, (int) (short) 0, (int) (short) 1);
        deflater49.setInput(byteArray82);
        deflater29.setDictionary(byteArray82);
        deflater1.setInput(byteArray82);
        deflater1.reset();
        deflater1.setLevel(0);
        java.lang.Class<?> wildcardClass92 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        long long48 = deflater2.getBytesWritten();
        long long49 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        int int53 = deflater51.getTotalIn();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        java.util.zip.Deflater deflater70 = new java.util.zip.Deflater((int) (byte) 1);
        deflater70.reset();
        int int72 = deflater70.getTotalIn();
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater70.setInput(byteArray79);
        deflater70.finish();
        long long82 = deflater70.getBytesRead();
        deflater70.reset();
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater70.setInput(byteArray90, (int) (short) 0, (int) (short) 1);
        deflater55.setDictionary(byteArray90);
        deflater51.setInput(byteArray90);
        // The following exception was thrown during execution in test generation
        try {
            int int99 = deflater2.deflate(byteArray90, 8, 16777472, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[1, 1, -1, -1, 1, 10]");
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        long long23 = deflater2.getBytesWritten();
        long long24 = deflater2.getBytesRead();
        deflater2.setLevel(1);
        long long27 = deflater2.getBytesWritten();
        boolean boolean28 = deflater2.needsInput();
        boolean boolean29 = deflater2.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(720907);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setInput(byteArray46, 0, 0);
        int int51 = deflater31.deflate(byteArray46);
        deflater5.setInput(byteArray46);
        deflater1.setDictionary(byteArray46);
        int int54 = deflater1.getAdler();
        deflater1.reset();
        deflater1.setLevel((int) (byte) -1);
        deflater1.end();
        deflater1.finish();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 87360012 + "'", int54 == 87360012);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel(139789087);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        deflater1.finish();
        long long19 = deflater1.getBytesWritten();
        int int20 = deflater1.getTotalIn();
        deflater1.finish();
        int int22 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater0.setLevel(126419322);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        int int58 = deflater1.getAdler();
        int int59 = deflater1.getTotalIn();
        boolean boolean60 = deflater1.needsInput();
        int int61 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 87360012 + "'", int58 == 87360012);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        deflater1.reset();
        deflater1.reset();
        int int5 = deflater1.getTotalIn();
        int int6 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        long long5 = deflater1.getBytesWritten();
        int int6 = deflater1.getTotalIn();
        int int7 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(2, true);
        int int3 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        deflater5.finish();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater5.setInput(byteArray19);
        int int22 = deflater5.getAdler();
        deflater5.reset();
        long long24 = deflater5.getBytesWritten();
        int int25 = deflater5.getTotalOut();
        long long26 = deflater5.getBytesRead();
        int int27 = deflater5.getAdler();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        deflater29.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater29.setDictionary(byteArray42);
        deflater5.setInput(byteArray42);
        deflater2.setDictionary(byteArray42);
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setInput(byteArray46, 0, 0);
        int int51 = deflater31.deflate(byteArray46);
        deflater5.setInput(byteArray46);
        deflater1.setDictionary(byteArray46);
        deflater1.finish();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((-1), true);
        long long5 = deflater4.getBytesWritten();
        deflater4.setLevel(2);
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        deflater9.setDictionary(byteArray44);
        deflater4.setInput(byteArray44);
        long long50 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        deflater52.reset();
        java.util.zip.Deflater deflater56 = new java.util.zip.Deflater((int) (byte) 1);
        deflater56.reset();
        int int58 = deflater56.getTotalIn();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater56.setInput(byteArray65);
        deflater52.setDictionary(byteArray65);
        deflater4.setInput(byteArray65);
        deflater1.setDictionary(byteArray65, 1, (int) (byte) 1);
        long long72 = deflater1.getBytesWritten();
        boolean boolean73 = deflater1.finished();
        boolean boolean74 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 0);
        long long2 = deflater1.getBytesRead();
        long long3 = deflater1.getBytesRead();
        long long4 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean18 = deflater1.finished();
        long long19 = deflater1.getBytesRead();
        deflater1.setStrategy(0);
        deflater1.setLevel(0);
        deflater1.setLevel(8);
        long long26 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater62 = new java.util.zip.Deflater();
        deflater62.reset();
        long long64 = deflater62.getBytesWritten();
        int int65 = deflater62.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 1 };
        deflater62.setInput(byteArray68);
        deflater1.setDictionary(byteArray68);
        long long71 = deflater1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(196610);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 1]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        int int13 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        int int4 = deflater2.getTotalIn();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean8 = deflater7.needsInput();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((-1), true);
        long long25 = deflater24.getBytesWritten();
        deflater24.setLevel(2);
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        int int46 = deflater44.getTotalIn();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater44.setInput(byteArray53);
        deflater44.finish();
        long long56 = deflater44.getBytesRead();
        deflater44.reset();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater44.setInput(byteArray64, (int) (short) 0, (int) (short) 1);
        deflater29.setDictionary(byteArray64);
        deflater24.setInput(byteArray64);
        deflater10.setDictionary(byteArray64);
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater75 = new java.util.zip.Deflater((int) (byte) 1);
        deflater75.reset();
        int int77 = deflater75.getAdler();
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        int int81 = deflater79.getTotalIn();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater79.setInput(byteArray88);
        deflater75.setInput(byteArray88, 0, 0);
        int int93 = deflater73.deflate(byteArray88);
        deflater10.setInput(byteArray88);
        int int95 = deflater7.deflate(byteArray88);
        int int96 = deflater2.deflate(byteArray88);
        long long97 = deflater2.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        boolean boolean3 = deflater2.needsInput();
        deflater2.setStrategy((int) (short) 1);
        int int6 = deflater2.getTotalIn();
        deflater2.finish();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        int int12 = deflater9.getTotalIn();
        deflater9.finish();
        deflater9.reset();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater16.setInput(byteArray25);
        deflater9.setInput(byteArray25);
        long long28 = deflater9.getBytesWritten();
        deflater9.reset();
        int int30 = deflater9.getAdler();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        int int46 = deflater32.getAdler();
        byte[] byteArray48 = new byte[] { (byte) 10 };
        deflater32.setDictionary(byteArray48);
        deflater9.setDictionary(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = deflater2.deflate(byteArray48, 8, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10]");
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        long long19 = deflater1.getBytesWritten();
        long long20 = deflater1.getBytesWritten();
        long long21 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        byte[] byteArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater2.setDictionary(byteArray14);
        int int17 = deflater2.getTotalOut();
        boolean boolean18 = deflater2.needsInput();
        int int19 = deflater2.getTotalOut();
        int int20 = deflater2.getAdler();
        int int21 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 87360012 + "'", int20 == 87360012);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        boolean boolean13 = deflater1.needsInput();
        long long14 = deflater1.getBytesRead();
        byte[] byteArray15 = new byte[] {};
        // The following exception was thrown during execution in test generation
        try {
            int int19 = deflater1.deflate(byteArray15, (int) (byte) 10, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        long long29 = deflater28.getBytesWritten();
        int int30 = deflater28.getTotalOut();
        long long31 = deflater28.getBytesWritten();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        deflater33.reset();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setDictionary(byteArray46);
        deflater28.setDictionary(byteArray46);
        deflater1.setInput(byteArray46);
        boolean boolean51 = deflater1.needsInput();
        long long52 = deflater1.getBytesRead();
        long long53 = deflater1.getBytesWritten();
        int int54 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalOut();
        deflater1.setStrategy((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        deflater1.setLevel(9);
        deflater1.reset();
        deflater1.finish();
        int int25 = deflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        long long8 = deflater1.getBytesWritten();
        boolean boolean9 = deflater1.finished();
        deflater1.reset();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        deflater12.reset();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater12.setInput(byteArray32, (int) (short) 0, (int) (short) 1);
        deflater12.reset();
        deflater12.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        long long40 = deflater39.getBytesWritten();
        int int41 = deflater39.getTotalOut();
        long long42 = deflater39.getBytesWritten();
        java.util.zip.Deflater deflater44 = new java.util.zip.Deflater((int) (byte) 1);
        deflater44.reset();
        deflater44.reset();
        java.util.zip.Deflater deflater48 = new java.util.zip.Deflater((int) (byte) 1);
        deflater48.reset();
        int int50 = deflater48.getTotalIn();
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater48.setInput(byteArray57);
        deflater44.setDictionary(byteArray57);
        deflater39.setDictionary(byteArray57);
        deflater12.setInput(byteArray57);
        deflater1.setDictionary(byteArray57, 1, 3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        deflater1.setLevel((int) (short) 1);
        int int8 = deflater1.getAdler();
        int int9 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getAdler();
        int int58 = deflater1.getTotalIn();
        int int59 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 87360012 + "'", int57 == 87360012);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        deflater1.setLevel(3);
        deflater1.setLevel((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        long long8 = deflater1.getBytesWritten();
        boolean boolean9 = deflater1.finished();
        long long10 = deflater1.getBytesRead();
        byte[] byteArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setInput(byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        deflater1.reset();
        int int19 = deflater1.getAdler();
        long long20 = deflater1.getBytesWritten();
        deflater1.setLevel(9);
        boolean boolean23 = deflater1.finished();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getAdler();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        int int19 = deflater5.getAdler();
        boolean boolean20 = deflater5.needsInput();
        int int21 = deflater5.getTotalIn();
        int int22 = deflater5.getTotalIn();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        int int63 = deflater24.deflate(byteArray59);
        deflater5.setDictionary(byteArray59);
        int int65 = deflater1.deflate(byteArray59);
        int int66 = deflater1.getTotalOut();
        deflater1.finish();
        boolean boolean68 = deflater1.finished();
        java.lang.Class<?> wildcardClass69 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        deflater13.reset();
        int int15 = deflater13.getTotalIn();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater13.setInput(byteArray22);
        deflater10.setInput(byteArray22);
        deflater8.setInput(byteArray22);
        deflater8.setStrategy(0);
        boolean boolean28 = deflater8.needsInput();
        long long29 = deflater8.getBytesWritten();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        long long32 = deflater31.getBytesWritten();
        int int33 = deflater31.getTotalIn();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater50.finish();
        long long62 = deflater50.getBytesRead();
        deflater50.reset();
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater50.setInput(byteArray70, (int) (short) 0, (int) (short) 1);
        deflater35.setDictionary(byteArray70);
        int int75 = deflater31.deflate(byteArray70);
        deflater8.setInput(byteArray70, (int) (short) 1, (int) (byte) 0);
        deflater2.setDictionary(byteArray70, 0, 3);
        deflater2.finish();
        long long83 = deflater2.getBytesWritten();
        boolean boolean84 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        boolean boolean20 = deflater2.finished();
        boolean boolean21 = deflater2.finished();
        boolean boolean22 = deflater2.needsInput();
        int int23 = deflater2.getTotalIn();
        boolean boolean24 = deflater2.finished();
        boolean boolean25 = deflater2.finished();
        int int26 = deflater2.getAdler();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(0, false);
        deflater2.end();
        deflater2.end();
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        deflater1.reset();
        long long14 = deflater1.getBytesWritten();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        deflater16.reset();
        deflater16.reset();
        java.util.zip.Deflater deflater21 = new java.util.zip.Deflater((int) (byte) 1);
        deflater21.reset();
        deflater21.reset();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        int int27 = deflater25.getTotalIn();
        byte[] byteArray34 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater25.setInput(byteArray34);
        deflater21.setDictionary(byteArray34);
        int int37 = deflater16.deflate(byteArray34);
        deflater1.setDictionary(byteArray34);
        long long39 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(1, false);
        deflater2.reset();
        int int4 = deflater2.getAdler();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        int int9 = deflater6.getTotalIn();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater11.setInput(byteArray23);
        int int26 = deflater6.deflate(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray23, 10, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(1);
        long long2 = deflater1.getBytesRead();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        int int3 = deflater2.getAdler();
        boolean boolean4 = deflater2.finished();
        deflater2.finish();
        deflater2.reset();
        deflater2.end();
        boolean boolean8 = deflater2.needsInput();
        java.lang.Class<?> wildcardClass9 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        boolean boolean91 = deflater2.finished();
        int int92 = deflater2.getTotalIn();
        int int93 = deflater2.getTotalOut();
        long long94 = deflater2.getBytesRead();
        deflater2.reset();
        long long96 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 6L + "'", long94 == 6L);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        int int6 = deflater2.getAdler();
        long long7 = deflater2.getBytesWritten();
        int int8 = deflater2.getAdler();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        deflater2.setStrategy(0);
        long long6 = deflater2.getBytesRead();
        int int7 = deflater2.getTotalOut();
        boolean boolean8 = deflater2.needsInput();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        long long3 = deflater2.getBytesWritten();
        boolean boolean4 = deflater2.finished();
        long long5 = deflater2.getBytesRead();
        int int6 = deflater2.getTotalOut();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        deflater0.reset();
        long long2 = deflater0.getBytesWritten();
        int int3 = deflater0.getTotalIn();
        long long4 = deflater0.getBytesRead();
        boolean boolean5 = deflater0.needsInput();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater();
        deflater6.reset();
        long long8 = deflater6.getBytesWritten();
        deflater6.finish();
        boolean boolean10 = deflater6.needsInput();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater12.finish();
        long long24 = deflater12.getBytesRead();
        java.util.zip.Deflater deflater26 = new java.util.zip.Deflater((int) (byte) 1);
        deflater26.reset();
        int int28 = deflater26.getTotalIn();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater26.setInput(byteArray35);
        deflater26.finish();
        long long38 = deflater26.getBytesRead();
        deflater26.reset();
        java.util.zip.Deflater deflater41 = new java.util.zip.Deflater((int) (byte) 1);
        deflater41.reset();
        int int43 = deflater41.getTotalIn();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater41.setInput(byteArray50);
        deflater41.finish();
        long long53 = deflater41.getBytesRead();
        deflater41.reset();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater41.setInput(byteArray61, (int) (short) 0, (int) (short) 1);
        deflater26.setDictionary(byteArray61);
        int int66 = deflater12.deflate(byteArray61);
        boolean boolean67 = deflater12.finished();
        int int68 = deflater12.getTotalIn();
        int int69 = deflater12.getTotalIn();
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        deflater74.finish();
        java.util.zip.Deflater deflater79 = new java.util.zip.Deflater((int) (byte) 1);
        deflater79.reset();
        int int81 = deflater79.getTotalIn();
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater79.setInput(byteArray88);
        deflater74.setInput(byteArray88);
        int int91 = deflater71.deflate(byteArray88);
        int int92 = deflater12.deflate(byteArray88);
        deflater6.setDictionary(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            deflater0.setInput(byteArray88, 126419322, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean3 = deflater2.needsInput();
        int int4 = deflater2.getTotalOut();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        long long7 = deflater6.getBytesWritten();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        long long21 = deflater9.getBytesRead();
        deflater9.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater24.setInput(byteArray44, (int) (short) 0, (int) (short) 1);
        deflater9.setDictionary(byteArray44);
        deflater6.setInput(byteArray44);
        deflater2.setDictionary(byteArray44);
        int int51 = deflater2.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(126419322);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        java.util.zip.Deflater deflater0 = new java.util.zip.Deflater();
        boolean boolean1 = deflater0.needsInput();
        deflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(2);
        long long2 = deflater1.getBytesRead();
        deflater1.setLevel((int) (byte) 0);
        int int5 = deflater1.getAdler();
        int int6 = deflater1.getTotalOut();
        int int7 = deflater1.getTotalOut();
        java.lang.Class<?> wildcardClass8 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((-1), true);
        long long16 = deflater15.getBytesWritten();
        deflater15.setLevel(2);
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater20.setInput(byteArray29);
        deflater20.finish();
        long long32 = deflater20.getBytesRead();
        deflater20.reset();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater20.setDictionary(byteArray55);
        deflater15.setInput(byteArray55);
        deflater1.setDictionary(byteArray55);
        int int62 = deflater1.getAdler();
        deflater1.finish();
        deflater1.setLevel(6);
        boolean boolean66 = deflater1.needsInput();
        int int67 = deflater1.getTotalIn();
        long long68 = deflater1.getBytesWritten();
        int int69 = deflater1.getAdler();
        int int70 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118882828 + "'", int62 == 118882828);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 118882828 + "'", int69 == 118882828);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 118882828 + "'", int70 == 118882828);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getAdler();
        boolean boolean16 = deflater1.needsInput();
        int int17 = deflater1.getTotalIn();
        int int18 = deflater1.getTotalIn();
        int int19 = deflater1.getTotalOut();
        deflater1.reset();
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        int int10 = deflater7.getTotalIn();
        int int11 = deflater7.getTotalIn();
        deflater7.end();
        boolean boolean13 = deflater7.needsInput();
        deflater7.finish();
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        int int19 = deflater16.getTotalIn();
        int int20 = deflater16.getTotalIn();
        deflater16.setLevel((int) (short) 1);
        deflater16.setLevel((int) (byte) 1);
        boolean boolean25 = deflater16.finished();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (short) -1, false);
        int int29 = deflater28.getTotalIn();
        int int30 = deflater28.getTotalIn();
        boolean boolean31 = deflater28.finished();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        long long34 = deflater33.getBytesWritten();
        int int35 = deflater33.getTotalIn();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater37.finish();
        long long49 = deflater37.getBytesRead();
        deflater37.reset();
        java.util.zip.Deflater deflater52 = new java.util.zip.Deflater((int) (byte) 1);
        deflater52.reset();
        int int54 = deflater52.getTotalIn();
        byte[] byteArray61 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater52.setInput(byteArray61);
        deflater52.finish();
        long long64 = deflater52.getBytesRead();
        deflater52.reset();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater52.setInput(byteArray72, (int) (short) 0, (int) (short) 1);
        deflater37.setDictionary(byteArray72);
        int int77 = deflater33.deflate(byteArray72);
        deflater28.setDictionary(byteArray72);
        int int79 = deflater16.deflate(byteArray72);
        deflater7.setInput(byteArray72);
        deflater2.setInput(byteArray72);
        deflater2.finish();
        java.lang.Class<?> wildcardClass83 = deflater2.getClass();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setInput(byteArray46, 0, 0);
        int int51 = deflater31.deflate(byteArray46);
        deflater5.setInput(byteArray46);
        deflater1.setDictionary(byteArray46);
        boolean boolean54 = deflater1.finished();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 0);
        int int2 = deflater1.getTotalIn();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        int int22 = deflater1.getTotalIn();
        boolean boolean23 = deflater1.needsInput();
        int int24 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        deflater2.finish();
        long long4 = deflater2.getBytesRead();
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalOut();
        long long58 = deflater1.getBytesRead();
        boolean boolean59 = deflater1.needsInput();
        int int60 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 6L + "'", long58 == 6L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater(3, true);
        int int9 = deflater8.getAdler();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((-1), true);
        long long13 = deflater12.getBytesWritten();
        deflater12.setLevel(2);
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        deflater17.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater32.finish();
        long long44 = deflater32.getBytesRead();
        deflater32.reset();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater32.setInput(byteArray52, (int) (short) 0, (int) (short) 1);
        deflater17.setDictionary(byteArray52);
        deflater12.setInput(byteArray52);
        deflater8.setDictionary(byteArray52);
        int int59 = deflater1.deflate(byteArray52);
        boolean boolean60 = deflater1.finished();
        deflater1.setStrategy(1);
        int int63 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (byte) 1, true);
        int int67 = deflater66.getAdler();
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((-1));
        int int70 = deflater69.getTotalIn();
        boolean boolean71 = deflater69.finished();
        java.util.zip.Deflater deflater73 = new java.util.zip.Deflater((int) (byte) 1);
        deflater73.reset();
        deflater73.reset();
        deflater73.reset();
        java.util.zip.Deflater deflater78 = new java.util.zip.Deflater((int) (byte) 1);
        deflater78.reset();
        deflater78.reset();
        java.util.zip.Deflater deflater82 = new java.util.zip.Deflater((int) (byte) 1);
        deflater82.reset();
        int int84 = deflater82.getTotalIn();
        byte[] byteArray91 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater82.setInput(byteArray91);
        deflater78.setDictionary(byteArray91);
        int int94 = deflater73.deflate(byteArray91);
        int int95 = deflater69.deflate(byteArray91);
        int int96 = deflater66.deflate(byteArray91);
        deflater1.setDictionary(byteArray91);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (short) -1, false);
        long long10 = deflater9.getBytesWritten();
        java.util.zip.Deflater deflater12 = new java.util.zip.Deflater((int) (byte) 1);
        deflater12.reset();
        int int14 = deflater12.getTotalIn();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater12.setInput(byteArray21);
        deflater9.setDictionary(byteArray21);
        deflater1.setInput(byteArray21);
        deflater1.setLevel(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        deflater1.reset();
        int int14 = deflater1.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (byte) 1);
        deflater15.reset();
        int int17 = deflater15.getTotalIn();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater15.setInput(byteArray24);
        deflater15.finish();
        long long27 = deflater15.getBytesRead();
        deflater15.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater30.setInput(byteArray50, (int) (short) 0, (int) (short) 1);
        deflater15.setDictionary(byteArray50);
        int int55 = deflater1.deflate(byteArray50);
        boolean boolean56 = deflater1.finished();
        int int57 = deflater1.getTotalIn();
        int int58 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater60 = new java.util.zip.Deflater((int) (byte) 1);
        deflater60.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        deflater63.finish();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater63.setInput(byteArray77);
        int int80 = deflater60.deflate(byteArray77);
        int int81 = deflater1.deflate(byteArray77);
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, -97, 17, 0, 5, 53]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 6 + "'", int81 == 6);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater1.setDictionary(byteArray16);
        deflater1.reset();
        deflater1.end();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        deflater1.setLevel((int) (byte) -1);
        long long18 = deflater1.getBytesWritten();
        java.lang.Class<?> wildcardClass19 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        int int3 = deflater1.getTotalOut();
        long long4 = deflater1.getBytesWritten();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setLevel((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.reset();
        boolean boolean5 = deflater1.finished();
        int int6 = deflater1.getTotalOut();
        int int7 = deflater1.getTotalIn();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        deflater9.finish();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater9.setInput(byteArray23);
        deflater1.setDictionary(byteArray23);
        java.lang.Class<?> wildcardClass27 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesRead();
        deflater1.finish();
        int int4 = deflater1.getAdler();
        long long5 = deflater1.getBytesRead();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        int int4 = deflater2.getTotalIn();
        int int5 = deflater2.getTotalOut();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        int int10 = deflater7.getTotalIn();
        deflater7.finish();
        deflater7.reset();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) 1);
        deflater14.reset();
        int int16 = deflater14.getTotalIn();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater14.setInput(byteArray23);
        deflater7.setInput(byteArray23);
        long long26 = deflater7.getBytesWritten();
        deflater7.reset();
        int int28 = deflater7.getAdler();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater30.finish();
        long long42 = deflater30.getBytesRead();
        deflater30.reset();
        int int44 = deflater30.getAdler();
        byte[] byteArray46 = new byte[] { (byte) 10 };
        deflater30.setDictionary(byteArray46);
        deflater7.setDictionary(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray46, (int) (short) -1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10]");
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        deflater1.reset();
        deflater1.reset();
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        deflater28.reset();
        java.util.zip.Deflater deflater32 = new java.util.zip.Deflater((int) (byte) 1);
        deflater32.reset();
        int int34 = deflater32.getTotalIn();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater32.setInput(byteArray41);
        deflater28.setDictionary(byteArray41);
        long long44 = deflater28.getBytesWritten();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        long long47 = deflater46.getBytesWritten();
        int int48 = deflater46.getTotalOut();
        long long49 = deflater46.getBytesWritten();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        deflater51.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater51.setDictionary(byteArray64);
        deflater46.setDictionary(byteArray64);
        int int68 = deflater28.deflate(byteArray64);
        int int69 = deflater1.deflate(byteArray64);
        int int70 = deflater1.getAdler();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        int int5 = deflater1.getTotalOut();
        boolean boolean6 = deflater1.needsInput();
        long long7 = deflater1.getBytesRead();
        long long8 = deflater1.getBytesWritten();
        boolean boolean9 = deflater1.finished();
        int int10 = deflater1.getTotalOut();
        java.lang.Class<?> wildcardClass11 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        int int2 = deflater1.getTotalOut();
        deflater1.setLevel(8);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        boolean boolean62 = deflater1.needsInput();
        boolean boolean63 = deflater1.needsInput();
        java.util.zip.Deflater deflater66 = new java.util.zip.Deflater((int) (short) 1, false);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater71 = new java.util.zip.Deflater((int) (byte) 1);
        deflater71.reset();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater74.setInput(byteArray83);
        deflater71.setInput(byteArray83);
        deflater69.setInput(byteArray83);
        int int87 = deflater66.deflate(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray83, (int) (byte) 1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        deflater2.setStrategy((int) (short) 1);
        deflater2.reset();
        deflater2.reset();
        long long95 = deflater2.getBytesRead();
        deflater2.finish();
        int int97 = deflater2.getTotalIn();
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalOut();
        long long6 = deflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getTotalIn();
        int int13 = deflater1.getAdler();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17, 0, 0);
        int int22 = deflater2.deflate(byteArray17);
        deflater2.reset();
        int int24 = deflater2.getTotalIn();
        boolean boolean25 = deflater2.needsInput();
        long long26 = deflater2.getBytesWritten();
        boolean boolean27 = deflater2.needsInput();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 0, false);
        boolean boolean31 = deflater30.needsInput();
        int int32 = deflater30.getTotalIn();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (short) -1, false);
        long long36 = deflater35.getBytesWritten();
        java.util.zip.Deflater deflater38 = new java.util.zip.Deflater((int) (byte) 1);
        deflater38.reset();
        int int40 = deflater38.getTotalIn();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater38.setInput(byteArray47);
        deflater35.setDictionary(byteArray47);
        boolean boolean50 = deflater35.needsInput();
        java.util.zip.Deflater deflater53 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getAdler();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        int int61 = deflater59.getTotalIn();
        byte[] byteArray68 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater59.setInput(byteArray68);
        deflater55.setInput(byteArray68, 0, 0);
        int int73 = deflater53.deflate(byteArray68);
        deflater35.setInput(byteArray68);
        deflater30.setDictionary(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = deflater2.deflate(byteArray68, 10, 8, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater4.finish();
        long long16 = deflater4.getBytesRead();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((int) (byte) 1);
        deflater18.reset();
        int int20 = deflater18.getTotalIn();
        byte[] byteArray27 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater18.setInput(byteArray27);
        deflater18.finish();
        long long30 = deflater18.getBytesRead();
        deflater18.reset();
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getTotalIn();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater33.setInput(byteArray42);
        deflater33.finish();
        long long45 = deflater33.getBytesRead();
        deflater33.reset();
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater33.setInput(byteArray53, (int) (short) 0, (int) (short) 1);
        deflater18.setDictionary(byteArray53);
        int int58 = deflater4.deflate(byteArray53);
        int int61 = deflater1.deflate(byteArray53, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        deflater63.finish();
        java.util.zip.Deflater deflater68 = new java.util.zip.Deflater((int) (byte) 1);
        deflater68.reset();
        int int70 = deflater68.getTotalIn();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater68.setInput(byteArray77);
        deflater63.setInput(byteArray77);
        deflater1.setInput(byteArray77);
        int int81 = deflater1.getTotalOut();
        int int82 = deflater1.getTotalOut();
        boolean boolean83 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        int int8 = deflater1.getTotalIn();
        boolean boolean9 = deflater1.finished();
        java.lang.Class<?> wildcardClass10 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        long long2 = deflater1.getBytesWritten();
        long long3 = deflater1.getBytesWritten();
        deflater1.setLevel((int) (byte) 0);
        deflater1.reset();
        int int7 = deflater1.getTotalIn();
        int int8 = deflater1.getTotalIn();
        int int9 = deflater1.getTotalOut();
        deflater1.setStrategy((int) (short) 0);
        deflater1.end();
        deflater1.setLevel((int) (byte) 1);
        java.util.zip.Deflater deflater16 = new java.util.zip.Deflater((int) (byte) 1);
        deflater16.reset();
        int int18 = deflater16.getTotalIn();
        deflater16.finish();
        int int20 = deflater16.getTotalOut();
        boolean boolean21 = deflater16.needsInput();
        long long22 = deflater16.getBytesRead();
        deflater16.finish();
        deflater16.setLevel(9);
        deflater16.finish();
        deflater16.finish();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater29.finish();
        long long41 = deflater29.getBytesRead();
        deflater29.reset();
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater29.setInput(byteArray49, (int) (short) 0, (int) (short) 1);
        deflater29.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater55.finish();
        long long67 = deflater55.getBytesRead();
        deflater55.reset();
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater55.setInput(byteArray75, (int) (short) 0, (int) (short) 1);
        int int79 = deflater29.deflate(byteArray75);
        java.util.zip.Deflater deflater81 = new java.util.zip.Deflater((int) (byte) 1);
        deflater81.reset();
        int int83 = deflater81.getTotalIn();
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater81.setInput(byteArray90);
        deflater29.setInput(byteArray90);
        deflater16.setInput(byteArray90);
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setDictionary(byteArray90, 12, 16777472);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((int) (short) 0, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getAdler();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater4.setInput(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setInput(byteArray17, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        deflater1.finish();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater6.setInput(byteArray15);
        deflater1.setInput(byteArray15);
        int int18 = deflater1.getAdler();
        deflater1.reset();
        long long20 = deflater1.getBytesWritten();
        int int21 = deflater1.getTotalOut();
        long long22 = deflater1.getBytesRead();
        int int23 = deflater1.getAdler();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater((int) (byte) 1);
        deflater25.reset();
        deflater25.reset();
        java.util.zip.Deflater deflater29 = new java.util.zip.Deflater((int) (byte) 1);
        deflater29.reset();
        int int31 = deflater29.getTotalIn();
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater29.setInput(byteArray38);
        deflater25.setDictionary(byteArray38);
        deflater1.setInput(byteArray38);
        java.lang.Class<?> wildcardClass42 = deflater1.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater1.setInput(byteArray21, (int) (short) 0, (int) (short) 1);
        boolean boolean25 = deflater1.needsInput();
        deflater1.reset();
        boolean boolean27 = deflater1.needsInput();
        deflater1.finish();
        long long29 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater24.setInput(byteArray36);
        deflater22.setInput(byteArray36);
        deflater22.setStrategy(0);
        boolean boolean42 = deflater22.needsInput();
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater47 = new java.util.zip.Deflater((int) (byte) 1);
        deflater47.reset();
        java.util.zip.Deflater deflater50 = new java.util.zip.Deflater((int) (byte) 1);
        deflater50.reset();
        int int52 = deflater50.getTotalIn();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater50.setInput(byteArray59);
        deflater47.setInput(byteArray59);
        deflater45.setInput(byteArray59);
        deflater22.setInput(byteArray59);
        java.util.zip.Deflater deflater65 = new java.util.zip.Deflater((int) (byte) 1);
        deflater65.reset();
        int int67 = deflater65.getTotalIn();
        byte[] byteArray74 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater65.setInput(byteArray74);
        deflater65.finish();
        long long77 = deflater65.getBytesRead();
        deflater65.reset();
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater65.setInput(byteArray85, (int) (short) 0, (int) (short) 1);
        deflater22.setInput(byteArray85);
        int int90 = deflater2.deflate(byteArray85);
        deflater2.setStrategy((int) (short) 1);
        deflater2.reset();
        deflater2.reset();
        long long95 = deflater2.getBytesRead();
        deflater2.finish();
        boolean boolean97 = deflater2.finished();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        deflater1.finish();
        long long13 = deflater1.getBytesRead();
        deflater1.reset();
        int int15 = deflater1.getTotalIn();
        int int16 = deflater1.getTotalIn();
        deflater1.reset();
        int int18 = deflater1.getAdler();
        int int19 = deflater1.getAdler();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (short) -1, false);
        long long25 = deflater24.getBytesWritten();
        deflater24.setStrategy((int) (byte) 1);
        long long28 = deflater24.getBytesWritten();
        long long29 = deflater24.getBytesWritten();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        int int42 = deflater31.getAdler();
        deflater31.reset();
        long long44 = deflater31.getBytesWritten();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        deflater46.reset();
        deflater46.reset();
        java.util.zip.Deflater deflater51 = new java.util.zip.Deflater((int) (byte) 1);
        deflater51.reset();
        deflater51.reset();
        java.util.zip.Deflater deflater55 = new java.util.zip.Deflater((int) (byte) 1);
        deflater55.reset();
        int int57 = deflater55.getTotalIn();
        byte[] byteArray64 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater55.setInput(byteArray64);
        deflater51.setDictionary(byteArray64);
        int int67 = deflater46.deflate(byteArray64);
        deflater31.setDictionary(byteArray64);
        deflater24.setDictionary(byteArray64);
        deflater2.setDictionary(byteArray64);
        byte[] byteArray71 = null;
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setDictionary(byteArray71, 12, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater1.setInput(byteArray10);
        int int12 = deflater1.getAdler();
        java.util.zip.Deflater deflater15 = new java.util.zip.Deflater((int) (short) -1, false);
        int int16 = deflater15.getTotalIn();
        int int17 = deflater15.getTotalIn();
        boolean boolean18 = deflater15.finished();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getAdler();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater20.setInput(byteArray33, 0, 0);
        int int38 = deflater15.deflate(byteArray33);
        int int41 = deflater1.deflate(byteArray33, 0, (int) (short) 0);
        boolean boolean42 = deflater1.finished();
        boolean boolean43 = deflater1.needsInput();
        deflater1.reset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater4.setInput(byteArray16);
        deflater2.setInput(byteArray16);
        deflater2.setStrategy(0);
        boolean boolean22 = deflater2.needsInput();
        java.util.zip.Deflater deflater25 = new java.util.zip.Deflater(3, true);
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        deflater30.reset();
        int int32 = deflater30.getTotalIn();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater30.setInput(byteArray39);
        deflater27.setInput(byteArray39);
        deflater25.setInput(byteArray39);
        deflater2.setInput(byteArray39);
        java.util.zip.Deflater deflater45 = new java.util.zip.Deflater((int) (byte) 1);
        deflater45.reset();
        int int47 = deflater45.getTotalIn();
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater45.setInput(byteArray54);
        deflater45.finish();
        long long57 = deflater45.getBytesRead();
        deflater45.reset();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater45.setInput(byteArray65, (int) (short) 0, (int) (short) 1);
        deflater2.setInput(byteArray65);
        boolean boolean70 = deflater2.finished();
        boolean boolean71 = deflater2.needsInput();
        deflater2.finish();
        long long73 = deflater2.getBytesRead();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        boolean boolean7 = deflater1.finished();
        deflater1.reset();
        boolean boolean9 = deflater1.finished();
        boolean boolean10 = deflater1.needsInput();
        deflater1.reset();
        deflater1.finish();
        java.util.zip.Deflater deflater14 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean15 = deflater14.finished();
        java.util.zip.Deflater deflater17 = new java.util.zip.Deflater((int) (byte) 1);
        deflater17.reset();
        int int19 = deflater17.getTotalIn();
        byte[] byteArray26 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater17.setInput(byteArray26);
        deflater17.finish();
        long long29 = deflater17.getBytesRead();
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (byte) 1);
        deflater31.reset();
        int int33 = deflater31.getTotalIn();
        byte[] byteArray40 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater31.setInput(byteArray40);
        deflater31.finish();
        long long43 = deflater31.getBytesRead();
        deflater31.reset();
        java.util.zip.Deflater deflater46 = new java.util.zip.Deflater((int) (byte) 1);
        deflater46.reset();
        int int48 = deflater46.getTotalIn();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater46.setInput(byteArray55);
        deflater46.finish();
        long long58 = deflater46.getBytesRead();
        deflater46.reset();
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater46.setInput(byteArray66, (int) (short) 0, (int) (short) 1);
        deflater31.setDictionary(byteArray66);
        int int71 = deflater17.deflate(byteArray66);
        int int74 = deflater14.deflate(byteArray66, (int) (byte) 1, 2);
        deflater1.setInput(byteArray66, (int) (short) 0, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        int int3 = deflater2.getAdler();
        long long4 = deflater2.getBytesWritten();
        java.util.zip.Deflater deflater6 = new java.util.zip.Deflater((int) (byte) 1);
        deflater6.reset();
        int int8 = deflater6.getTotalIn();
        deflater6.finish();
        int int10 = deflater6.getTotalOut();
        boolean boolean11 = deflater6.finished();
        java.util.zip.Deflater deflater13 = new java.util.zip.Deflater((int) (byte) 1);
        long long14 = deflater13.getBytesWritten();
        int int15 = deflater13.getTotalOut();
        long long16 = deflater13.getBytesWritten();
        deflater13.reset();
        deflater13.reset();
        java.util.zip.Deflater deflater20 = new java.util.zip.Deflater((int) (byte) 1);
        deflater20.reset();
        int int22 = deflater20.getTotalIn();
        int int23 = deflater20.getTotalIn();
        int int24 = deflater20.getTotalIn();
        long long25 = deflater20.getBytesWritten();
        java.util.zip.Deflater deflater27 = new java.util.zip.Deflater((int) (byte) 1);
        deflater27.reset();
        int int29 = deflater27.getTotalIn();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater27.setInput(byteArray36);
        deflater27.finish();
        long long39 = deflater27.getBytesRead();
        deflater27.reset();
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater27.setInput(byteArray47, (int) (short) 0, (int) (short) 1);
        deflater27.reset();
        deflater27.reset();
        java.util.zip.Deflater deflater54 = new java.util.zip.Deflater((int) (byte) 1);
        long long55 = deflater54.getBytesWritten();
        int int56 = deflater54.getTotalOut();
        long long57 = deflater54.getBytesWritten();
        java.util.zip.Deflater deflater59 = new java.util.zip.Deflater((int) (byte) 1);
        deflater59.reset();
        deflater59.reset();
        java.util.zip.Deflater deflater63 = new java.util.zip.Deflater((int) (byte) 1);
        deflater63.reset();
        int int65 = deflater63.getTotalIn();
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater63.setInput(byteArray72);
        deflater59.setDictionary(byteArray72);
        deflater54.setDictionary(byteArray72);
        deflater27.setInput(byteArray72);
        deflater20.setDictionary(byteArray72, 2, (int) (short) 0);
        int int80 = deflater13.deflate(byteArray72);
        deflater6.setDictionary(byteArray72);
        deflater2.setInput(byteArray72);
        deflater2.finish();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        int int5 = deflater1.getTotalIn();
        long long6 = deflater1.getBytesWritten();
        int int7 = deflater1.getTotalOut();
        int int8 = deflater1.getAdler();
        long long9 = deflater1.getBytesWritten();
        boolean boolean10 = deflater1.finished();
        boolean boolean11 = deflater1.finished();
        deflater1.setStrategy((int) (short) 0);
        int int14 = deflater1.getTotalOut();
        long long15 = deflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater((-1), true);
        long long3 = deflater2.getBytesWritten();
        deflater2.setLevel(2);
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater7.setInput(byteArray16);
        deflater7.finish();
        long long19 = deflater7.getBytesRead();
        deflater7.reset();
        java.util.zip.Deflater deflater22 = new java.util.zip.Deflater((int) (byte) 1);
        deflater22.reset();
        int int24 = deflater22.getTotalIn();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater22.setInput(byteArray31);
        deflater22.finish();
        long long34 = deflater22.getBytesRead();
        deflater22.reset();
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater22.setInput(byteArray42, (int) (short) 0, (int) (short) 1);
        deflater7.setDictionary(byteArray42);
        deflater2.setInput(byteArray42);
        int int48 = deflater2.getAdler();
        deflater2.setLevel((-1));
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel(118882828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean2 = deflater1.finished();
        deflater1.reset();
        int int4 = deflater1.getTotalIn();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getAdler();
        java.util.zip.Deflater deflater11 = new java.util.zip.Deflater((int) (byte) 1);
        deflater11.reset();
        int int13 = deflater11.getTotalIn();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater11.setInput(byteArray20);
        deflater7.setInput(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = deflater1.deflate(byteArray20, 1, 118882828, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 10, -1, -1, 1]");
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(0);
        int int2 = deflater1.getAdler();
        boolean boolean3 = deflater1.needsInput();
        boolean boolean4 = deflater1.finished();
        boolean boolean5 = deflater1.finished();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) 1);
        deflater7.reset();
        int int9 = deflater7.getTotalIn();
        int int10 = deflater7.getTotalIn();
        deflater7.finish();
        deflater7.reset();
        boolean boolean13 = deflater7.finished();
        deflater7.finish();
        deflater7.finish();
        java.util.zip.Deflater deflater18 = new java.util.zip.Deflater((-1), true);
        int int19 = deflater18.getAdler();
        boolean boolean20 = deflater18.finished();
        deflater18.finish();
        deflater18.reset();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        deflater24.finish();
        long long28 = deflater24.getBytesWritten();
        java.util.zip.Deflater deflater30 = new java.util.zip.Deflater((int) (byte) 1);
        long long31 = deflater30.getBytesRead();
        long long32 = deflater30.getBytesRead();
        long long33 = deflater30.getBytesWritten();
        java.util.zip.Deflater deflater35 = new java.util.zip.Deflater((int) (byte) 1);
        deflater35.reset();
        int int37 = deflater35.getTotalIn();
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater35.setInput(byteArray44);
        deflater35.finish();
        long long47 = deflater35.getBytesRead();
        deflater35.reset();
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater35.setInput(byteArray55, (int) (short) 0, (int) (short) 1);
        deflater30.setInput(byteArray55);
        deflater24.setInput(byteArray55);
        deflater18.setDictionary(byteArray55);
        deflater7.setDictionary(byteArray55);
        deflater1.setInput(byteArray55);
        int int64 = deflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater(9);
        java.util.zip.Deflater deflater3 = new java.util.zip.Deflater((int) (byte) 1);
        long long4 = deflater3.getBytesWritten();
        long long5 = deflater3.getBytesWritten();
        java.util.zip.Deflater deflater7 = new java.util.zip.Deflater((int) (byte) -1);
        boolean boolean8 = deflater7.finished();
        java.util.zip.Deflater deflater10 = new java.util.zip.Deflater((int) (byte) 1);
        deflater10.reset();
        int int12 = deflater10.getTotalIn();
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater10.setInput(byteArray19);
        deflater10.finish();
        long long22 = deflater10.getBytesRead();
        java.util.zip.Deflater deflater24 = new java.util.zip.Deflater((int) (byte) 1);
        deflater24.reset();
        int int26 = deflater24.getTotalIn();
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater24.setInput(byteArray33);
        deflater24.finish();
        long long36 = deflater24.getBytesRead();
        deflater24.reset();
        java.util.zip.Deflater deflater39 = new java.util.zip.Deflater((int) (byte) 1);
        deflater39.reset();
        int int41 = deflater39.getTotalIn();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater39.setInput(byteArray48);
        deflater39.finish();
        long long51 = deflater39.getBytesRead();
        deflater39.reset();
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater39.setInput(byteArray59, (int) (short) 0, (int) (short) 1);
        deflater24.setDictionary(byteArray59);
        int int64 = deflater10.deflate(byteArray59);
        int int67 = deflater7.deflate(byteArray59, (int) (byte) 1, 2);
        java.util.zip.Deflater deflater69 = new java.util.zip.Deflater((int) (byte) 1);
        deflater69.reset();
        int int71 = deflater69.getTotalIn();
        deflater69.finish();
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getTotalIn();
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater74.setInput(byteArray83);
        deflater69.setInput(byteArray83);
        deflater7.setInput(byteArray83);
        int int87 = deflater3.deflate(byteArray83);
        int int88 = deflater1.deflate(byteArray83);
        deflater1.end();
        deflater1.finish();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[120, 1, 99, 100, -28, -6]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        int int2 = deflater1.getTotalOut();
        int int3 = deflater1.getTotalOut();
        java.util.zip.Deflater deflater5 = new java.util.zip.Deflater((int) (byte) 1);
        deflater5.reset();
        int int7 = deflater5.getTotalIn();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater5.setInput(byteArray14);
        deflater5.finish();
        long long17 = deflater5.getBytesRead();
        deflater5.reset();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater5.setInput(byteArray25, (int) (short) 0, (int) (short) 1);
        java.util.zip.Deflater deflater31 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater33 = new java.util.zip.Deflater((int) (byte) 1);
        deflater33.reset();
        int int35 = deflater33.getAdler();
        java.util.zip.Deflater deflater37 = new java.util.zip.Deflater((int) (byte) 1);
        deflater37.reset();
        int int39 = deflater37.getTotalIn();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater37.setInput(byteArray46);
        deflater33.setInput(byteArray46, 0, 0);
        int int51 = deflater31.deflate(byteArray46);
        deflater5.setInput(byteArray46);
        deflater1.setDictionary(byteArray46);
        int int54 = deflater1.getAdler();
        long long55 = deflater1.getBytesRead();
        int int56 = deflater1.getTotalIn();
        int int57 = deflater1.getAdler();
        deflater1.end();
        boolean boolean59 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 87360012 + "'", int54 == 87360012);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 87360012 + "'", int57 == 87360012);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getTotalIn();
        int int4 = deflater1.getTotalIn();
        deflater1.finish();
        deflater1.reset();
        java.util.zip.Deflater deflater8 = new java.util.zip.Deflater((int) (byte) 1);
        deflater8.reset();
        int int10 = deflater8.getTotalIn();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater8.setInput(byteArray17);
        deflater1.setInput(byteArray17);
        deflater1.finish();
        int int21 = deflater1.getAdler();
        int int22 = deflater1.getTotalIn();
        long long23 = deflater1.getBytesWritten();
        int int24 = deflater1.getAdler();
        int int25 = deflater1.getTotalIn();
        int int26 = deflater1.getTotalOut();
        boolean boolean27 = deflater1.finished();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        int int3 = deflater1.getAdler();
        boolean boolean4 = deflater1.needsInput();
        deflater1.reset();
        deflater1.finish();
        // The following exception was thrown during execution in test generation
        try {
            deflater1.setStrategy(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, false);
        int int3 = deflater2.getTotalIn();
        int int4 = deflater2.getTotalIn();
        int int5 = deflater2.getAdler();
        int int6 = deflater2.getTotalIn();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        java.util.zip.Deflater deflater2 = new java.util.zip.Deflater(3, true);
        deflater2.reset();
        deflater2.setStrategy(0);
        int int6 = deflater2.getAdler();
        long long7 = deflater2.getBytesRead();
        java.util.zip.Deflater deflater9 = new java.util.zip.Deflater((int) (byte) 1);
        deflater9.reset();
        int int11 = deflater9.getTotalIn();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater9.setInput(byteArray18);
        deflater9.finish();
        java.util.zip.Deflater deflater23 = new java.util.zip.Deflater((-1), true);
        long long24 = deflater23.getBytesWritten();
        deflater23.setLevel(2);
        java.util.zip.Deflater deflater28 = new java.util.zip.Deflater((int) (byte) 1);
        deflater28.reset();
        int int30 = deflater28.getTotalIn();
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater28.setInput(byteArray37);
        deflater28.finish();
        long long40 = deflater28.getBytesRead();
        deflater28.reset();
        java.util.zip.Deflater deflater43 = new java.util.zip.Deflater((int) (byte) 1);
        deflater43.reset();
        int int45 = deflater43.getTotalIn();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater43.setInput(byteArray52);
        deflater43.finish();
        long long55 = deflater43.getBytesRead();
        deflater43.reset();
        byte[] byteArray63 = new byte[] { (byte) 1, (byte) 1, (byte) -1, (byte) -1, (byte) 1, (byte) 10 };
        deflater43.setInput(byteArray63, (int) (short) 0, (int) (short) 1);
        deflater28.setDictionary(byteArray63);
        deflater23.setInput(byteArray63);
        deflater9.setDictionary(byteArray63);
        java.util.zip.Deflater deflater72 = new java.util.zip.Deflater((int) (short) -1, false);
        java.util.zip.Deflater deflater74 = new java.util.zip.Deflater((int) (byte) 1);
        deflater74.reset();
        int int76 = deflater74.getAdler();
        java.util.zip.Deflater deflater78 = new java.util.zip.Deflater((int) (byte) 1);
        deflater78.reset();
        int int80 = deflater78.getTotalIn();
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater78.setInput(byteArray87);
        deflater74.setInput(byteArray87, 0, 0);
        int int92 = deflater72.deflate(byteArray87);
        deflater9.setInput(byteArray87);
        deflater2.setInput(byteArray87, 2, 3);
        // The following exception was thrown during execution in test generation
        try {
            deflater2.setLevel((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid compression level");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1, 1, -1, -1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        java.util.zip.Deflater deflater1 = new java.util.zip.Deflater((int) (byte) 1);
        deflater1.reset();
        java.util.zip.Deflater deflater4 = new java.util.zip.Deflater((int) (byte) 1);
        deflater4.reset();
        int int6 = deflater4.getTotalIn();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 1, (byte) 10, (byte) -1, (byte) -1, (byte) 1 };
        deflater4.setInput(byteArray13);
        deflater1.setInput(byteArray13);
        int int16 = deflater1.getTotalIn();
        long long17 = deflater1.getBytesWritten();
        deflater1.setStrategy(0);
        int int20 = deflater1.getTotalOut();
        long long21 = deflater1.getBytesWritten();
        boolean boolean22 = deflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 1, 10, -1, -1, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }
}

