[
  {
    "signature": "cern.colt.list.AbstractBooleanList()",
    "name": "cern.colt.list.AbstractBooleanList",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "cern.colt.list.AbstractBooleanList()",
      "comment": "Makes this class non instantiable, but still let's others inherit from it.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(boolean element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "add(boolean element)",
      "comment": "Appends the specified element to the end of this list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAllOfFromTo(cern.colt.list.AbstractBooleanList other, int from, int to)",
    "name": "addAllOfFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.AbstractBooleanList",
          "name": "AbstractBooleanList",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "addAllOfFromTo(cern.colt.list.AbstractBooleanList other, int from, int to)",
      "comment": "Appends the part of the specified list between from (inclusive) and to (inclusive) to the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "beforeInsert(int index, boolean element)",
    "name": "beforeInsert",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "beforeInsert(int index, boolean element)",
      "comment": "Inserts the specified element before the specified position into the receiver. Shifts the element currently at that position (if any) and any subsequent elements to the right.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "beforeInsertAllOfFromTo(int index, cern.colt.list.AbstractBooleanList other, int from, int to)",
    "name": "beforeInsertAllOfFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.AbstractBooleanList",
          "name": "AbstractBooleanList",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "beforeInsertAllOfFromTo(int index, cern.colt.list.AbstractBooleanList other, int from, int to)",
      "comment": "Inserts the part of the specified list between otherFrom (inclusive) and otherTo (inclusive) before the specified position into the receiver. Shifts the element currently at that position (if any) and any subsequent elements to the right.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "beforeInsertDummies(int index, int length)",
    "name": "beforeInsertDummies",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "protocol": {
      "member": "beforeInsertDummies(int index, int length)",
      "comment": "Inserts length dummy elements before the specified position into the receiver. Shifts the element currently at that position (if any) and any subsequent elements to the right. <b>This method must set the new size to be method_0+length.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "binarySearch(boolean key)",
    "name": "binarySearch",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "binarySearch(boolean key)",
      "comment": "Searches the receiver for the specified value using the binary search algorithm. The receiver must must be sorted (as by the sort method) prior to making this call. If it is not sorted, the results are undefined: in particular, the call may enter an infinite loop. If the receiver contains multiple elements equal to the specified object, there is no guarantee which instance will be found.",
      "kind": "FreeText",
      "condition": "receiverObjectID.sort()->receiverObjectID.binarySearch(args[0])"
    }
  },
  {
    "signature": "binarySearchFromTo(boolean key, int from, int to)",
    "name": "binarySearchFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "binarySearchFromTo(boolean key, int from, int to)",
      "comment": "Searches the receiver for the specified value using the binary search algorithm. The receiver must must be sorted (as by the sort method) prior to making this call. If it is not sorted, the results are undefined: in particular, the call may enter an infinite loop. If the receiver contains multiple elements equal to the specified object, there is no guarantee which instance will be found.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "Returns a deep copy of the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(boolean elem)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "elem"
      }
    ],
    "protocol": {
      "member": "contains(boolean elem)",
      "comment": "Returns true if the receiver contains the specified element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "delete(boolean element)",
    "name": "delete",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "delete(boolean element)",
      "comment": "Deletes the first element from the receiver that is identical to the specified element. Does nothing, if no such matching element is contained.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "elements()",
    "name": "elements",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "elements()",
      "comment": "Returns the elements currently stored, possibly including invalid elements between size and capacity. WARNING: For efficiency reasons and to keep memory usage low, this method may decide not to copy the array. So if subsequently you modify the returned array directly via the [] operator, be sure you know what you're doing.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "elements(boolean[] elements)",
    "name": "elements",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "cern.colt.list.AbstractBooleanList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "elements"
      }
    ],
    "protocol": {
      "member": "elements(boolean[] elements)",
      "comment": "Sets the receiver's elements to be the specified array. The size and capacity of the list is the length of the array. WARNING: For efficiency reasons and to keep memory usage low, this method may decide not to copy the array. So if subsequently you modify the returned array directly via the [] operator, be sure you know what you're doing.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ensureCapacity(int minCapacity)",
    "name": "ensureCapacity",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minCapacity"
      }
    ],
    "protocol": {
      "member": "ensureCapacity(int minCapacity)",
      "comment": "Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory. If necessary, allocates new internal memory and increases the capacity of the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object otherObj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "otherObj"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object otherObj)",
      "comment": "Compares the specified Object with the receiver. Returns true if and only if the specified Object is also an ArrayList of the same type, both Lists have the same size, and all corresponding pairs of elements in the two Lists are identical. In other words, two Lists are defined to be equal if they contain the same elements in the same order.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "fillFromToWith(int from, int to, boolean val)",
    "name": "fillFromToWith",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "val"
      }
    ],
    "protocol": {
      "member": "fillFromToWith(int from, int to, boolean val)",
      "comment": "Sets the specified range of elements in the specified array to the specified value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEach(cern.colt.function.BooleanProcedure procedure)",
    "name": "forEach",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.function.BooleanProcedure",
          "name": "BooleanProcedure",
          "isArray": false
        },
        "name": "procedure"
      }
    ],
    "protocol": {
      "member": "forEach(cern.colt.function.BooleanProcedure procedure)",
      "comment": "Applies a procedure to each element of the receiver, if any. Starts at index 0, moving rightwards.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(int index)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "get(int index)",
      "comment": "Returns the element at the specified position in the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQuick(int index)",
    "name": "getQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "getQuick(int index)",
      "comment": "Returns the element at the specified position in the receiver; WARNING: Does not check preconditions. Provided with invalid parameters this method may return invalid elements without throwing any exception! You should only use this method when you are absolutely sure that the index is within bounds. Precondition (unchecked): index >= 0 && index < method_0. This method is normally only used internally in large loops where bounds are explicitly checked before the loop and need no be rechecked within the loop. However, when desperately, you can give this method public visibility in subclasses.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(boolean element)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "indexOf(boolean element)",
      "comment": "Returns the index of the first occurrence of the specified element. Returns -1 if the receiver does not contain this element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOfFromTo(boolean element, int from, int to)",
    "name": "indexOfFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "indexOfFromTo(boolean element, int from, int to)",
      "comment": "Returns the index of the first occurrence of the specified element. Returns -1 if the receiver does not contain this element. Searches between from, inclusive and to, inclusive. Tests for identity.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastIndexOf(boolean element)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "lastIndexOf(boolean element)",
      "comment": "Returns the index of the last occurrence of the specified element. Returns -1 if the receiver does not contain this element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastIndexOfFromTo(boolean element, int from, int to)",
    "name": "lastIndexOfFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "lastIndexOfFromTo(boolean element, int from, int to)",
      "comment": "Returns the index of the last occurrence of the specified element. Returns -1 if the receiver does not contain this element. Searches beginning at to, inclusive until from, inclusive. Tests for identity.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "partFromTo(int from, int to)",
    "name": "partFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "cern.colt.list.AbstractBooleanList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "partFromTo(int from, int to)",
      "comment": "Returns a new list of the part of the receiver between from, inclusive, and to, inclusive.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAll(cern.colt.list.AbstractBooleanList other)",
    "name": "removeAll",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.AbstractBooleanList",
          "name": "AbstractBooleanList",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "protocol": {
      "member": "removeAll(cern.colt.list.AbstractBooleanList other)",
      "comment": "Removes from the receiver all elements that are contained in the specified list. Tests for identity.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeFromTo(int from, int to)",
    "name": "removeFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "removeFromTo(int from, int to)",
      "comment": "Removes from the receiver all elements whose index is between from, inclusive and to, inclusive. Shifts any succeeding elements to the left (reduces their index). This call booleanens the list by (to - from + 1) elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceFromToWithFrom(int from, int to, cern.colt.list.AbstractBooleanList other, int otherFrom)",
    "name": "replaceFromToWithFrom",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.AbstractBooleanList",
          "name": "AbstractBooleanList",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "otherFrom"
      }
    ],
    "protocol": {
      "member": "replaceFromToWithFrom(int from, int to, cern.colt.list.AbstractBooleanList other, int otherFrom)",
      "comment": "Replaces a number of elements in the receiver with the same number of elements of another list. Replaces elements in the receiver, between from (inclusive) and to (inclusive), with elements of other, starting from otherFrom (inclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceFromToWithFromTo(int from, int to, cern.colt.list.AbstractBooleanList other, int otherFrom, int otherTo)",
    "name": "replaceFromToWithFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.AbstractBooleanList",
          "name": "AbstractBooleanList",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "otherFrom"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "otherTo"
      }
    ],
    "protocol": {
      "member": "replaceFromToWithFromTo(int from, int to, cern.colt.list.AbstractBooleanList other, int otherFrom, int otherTo)",
      "comment": "Replaces the part between from (inclusive) and to (inclusive) with the other list's part between otherFrom and otherTo. Powerful (and tricky) method! Both parts need not be of the same size (part A can both be smaller or larger than part B). Parts may overlap. Receiver and other list may (but most not) be identical. If from > to, then inserts other part before from.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceFromWith(int from, java.util.Collection other)",
    "name": "replaceFromWith",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "protocol": {
      "member": "replaceFromWith(int from, java.util.Collection other)",
      "comment": "Replaces the part of the receiver starting at from (inclusive) with all the elements of the specified collection. Does not alter the size of the receiver. Replaces exactly method_0-from, method_1 elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "retainAll(cern.colt.list.AbstractBooleanList other)",
    "name": "retainAll",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.AbstractBooleanList",
          "name": "AbstractBooleanList",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "protocol": {
      "member": "retainAll(cern.colt.list.AbstractBooleanList other)",
      "comment": "Retains (keeps) only the elements in the receiver that are contained in the specified other list. In other words, removes from the receiver all of its elements that are not contained in the specified other list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reverse()",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "reverse()",
      "comment": "Reverses the elements of the receiver. Last becomes first, second last becomes second first, and so on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(int index, boolean element)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "set(int index, boolean element)",
      "comment": "Replaces the element at the specified position in the receiver with the specified element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setQuick(int index, boolean element)",
    "name": "setQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "setQuick(int index, boolean element)",
      "comment": "Replaces the element at the specified position in the receiver with the specified element; WARNING: Does not check preconditions. Provided with invalid parameters this method may access invalid indexes without throwing any exception! You should only use this method when you are absolutely sure that the index is within bounds. Precondition (unchecked): index >= 0 && index < method_0. This method is normally only used internally in large loops where bounds are explicitly checked before the loop and need no be rechecked within the loop. However, when desperately, you can give this method public visibility in subclasses.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSizeRaw(int newSize)",
    "name": "setSizeRaw",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newSize"
      }
    ],
    "protocol": {
      "member": "setSizeRaw(int newSize)",
      "comment": "Sets the size of the receiver without modifying it otherwise. This method should not release or allocate new memory but simply set some instance variable like size. If your subclass overrides and delegates size changing methods to some other object, you must make sure that those overriding methods not only update the size of the delegate but also of this class. For example: public DatabaseList extends AbstractBooleanList { ... public void method_0 { method_1; method_2; } }",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "shuffleFromTo(int from, int to)",
    "name": "shuffleFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "shuffleFromTo(int from, int to)",
      "comment": "Randomly permutes the part of the receiver between from (inclusive) and to (inclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of elements contained in the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "times(int times)",
    "name": "times",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "cern.colt.list.AbstractBooleanList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "times"
      }
    ],
    "protocol": {
      "member": "times(int times)",
      "comment": "Returns a list which is a concatenation of times times the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toInt(boolean value)",
    "name": "toInt",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "toInt(boolean value)",
      "comment": "Transforms a boolean value to an integer (false --> 0, true --> 1)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toList()",
    "name": "toList",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayList",
      "name": "java.util.ArrayList",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toList()",
      "comment": "Returns a javamethod_0method_1 containing all the elements in the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "cern.colt.list.AbstractBooleanList",
      "name": "AbstractBooleanList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.AbstractBooleanList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a string representation of the receiver, containing the String representation of each element.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]