[
  {
    "signature": "weka.classifiers.functions.supportVector.NormalizedPolyKernel()",
    "name": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
      "name": "NormalizedPolyKernel",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.functions.supportVector.NormalizedPolyKernel()",
      "comment": "default constructor - does nothing",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "weka.classifiers.functions.supportVector.NormalizedPolyKernel(weka.core.Instances dataset, int cacheSize, double exponent, boolean lowerOrder)",
    "name": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
      "name": "NormalizedPolyKernel",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "dataset"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "cacheSize"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "exponent"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "lowerOrder"
      }
    ],
    "protocol": {
      "member": "weka.classifiers.functions.supportVector.NormalizedPolyKernel(weka.core.Instances dataset, int cacheSize, double exponent, boolean lowerOrder)",
      "comment": "Creates a new NormalizedPolyKernel instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
      "name": "NormalizedPolyKernel",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing the kernel",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eval(int id1, int id2, weka.core.Instance inst1)",
    "name": "eval",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
      "name": "NormalizedPolyKernel",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "id1"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "id2"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "inst1"
      }
    ],
    "protocol": {
      "member": "eval(int id1, int id2, weka.core.Instance inst1)",
      "comment": "Computes the result of the kernel function for two instances. If id1 == -1, eval use inst1 instead of an instance in the dataset. Redefines the eval function of PolyKernel.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setExponent(double value)",
    "name": "setExponent",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
      "name": "NormalizedPolyKernel",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setExponent(double value)",
      "comment": "Sets the exponent value (must be different from 1method_0).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
      "name": "NormalizedPolyKernel",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "returns a string representation for the Kernel",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
      "name": "NormalizedPolyKernel",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]