[
  {
    "signature": "weka.classifiers.functions.supportVector.RegSMO()",
    "name": "weka.classifiers.functions.supportVector.RegSMO",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.functions.supportVector.RegSMO()",
      "comment": "default constructor",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTechnicalInformation()",
    "name": "getTechnicalInformation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.TechnicalInformation",
      "name": "weka.core.TechnicalInformation",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTechnicalInformation()",
      "comment": "Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, emethod_0., paper reference or book this class is based on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.   -P <double> The epsilon for round-off error. (default 1method_0-12)   -L <double> The epsilon parameter in epsilon-insensitive loss function. (default 1method_0-3)   -W <double> The random number seed. (default 1)  <!-- options-end -->",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "epsilonTipText()",
    "name": "epsilonTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "epsilonTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEpsilon()",
    "name": "getEpsilon",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getEpsilon()",
      "comment": "Get the value of epsilon.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setEpsilon(double v)",
    "name": "setEpsilon",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "v"
      }
    ],
    "protocol": {
      "member": "setEpsilon(double v)",
      "comment": "Set the value of epsilon.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "init(weka.core.Instances data)",
    "name": "init",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "init(weka.core.Instances data)",
      "comment": "initialize various variables before starting the actual optimizer",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "wrapUp()",
    "name": "wrapUp",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "wrapUp()",
      "comment": "wrap up various variables to save memeory and do some housekeeping after optimization has finished.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "findOptimalPointOnLine(int i1, double alpha1, double alpha1Star, double C1, int i2, double alpha2, double alpha2Star, double C2, double gamma, double eta, double deltaPhi)",
    "name": "findOptimalPointOnLine",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "alpha1"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "alpha1Star"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "C1"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "alpha2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "alpha2Star"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "C2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "gamma"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "eta"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "deltaPhi"
      }
    ],
    "protocol": {
      "member": "findOptimalPointOnLine(int i1, double alpha1, double alpha1Star, double C1, int i2, double alpha2, double alpha2Star, double C2, double gamma, double eta, double deltaPhi)",
      "comment": "Finds optimal point on line constrained by first (i1) and second (i2) candidate. Parameters correspond to pseudocode (see technicalinformation)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "takeStep(int i1, int i2, double alpha2, double alpha2Star, double phi2)",
    "name": "takeStep",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i1"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "alpha2"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "alpha2Star"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "phi2"
      }
    ],
    "protocol": {
      "member": "takeStep(int i1, int i2, double alpha2, double alpha2Star, double phi2)",
      "comment": "takeStep method from pseudocode. Parameters correspond to pseudocode (see technicalinformation)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "examineExample(int i2)",
    "name": "examineExample",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i2"
      }
    ],
    "protocol": {
      "member": "examineExample(int i2)",
      "comment": "examineExample method from pseudocode. Parameters correspond to pseudocode (see technicalinformation)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "secondChoiceHeuristic(int i2)",
    "name": "secondChoiceHeuristic",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "i2"
      }
    ],
    "protocol": {
      "member": "secondChoiceHeuristic(int i2)",
      "comment": "applies heuristic for finding candidate that is expected to lead to good gain when applying takeStep together with second candidate.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "optimize()",
    "name": "optimize",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "optimize()",
      "comment": "finds alpha and alpha* parameters that optimize the SVM target function",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances instances)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "instances"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances instances)",
      "comment": "learn SVM parameters from data using Smola's SMO algorithm. Subclasses should implement something more interesting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.supportVector.RegSMO",
      "name": "RegSMO",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.supportVector.RegSMO",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]