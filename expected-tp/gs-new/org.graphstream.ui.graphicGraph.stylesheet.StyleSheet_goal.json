[
  {
    "signature": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet()",
    "name": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet()",
      "comment": "New style sheet initialised to defaults.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDefaultGraphRule()",
    "name": "getDefaultGraphRule",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Rule",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.Rule",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDefaultGraphRule()",
      "comment": "The default rule for graphs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDefaultNodeRule()",
    "name": "getDefaultNodeRule",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Rule",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.Rule",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDefaultNodeRule()",
      "comment": "The default rule for nodes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDefaultEdgeRule()",
    "name": "getDefaultEdgeRule",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Rule",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.Rule",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDefaultEdgeRule()",
      "comment": "The default rule for edges.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDefaultSpriteRule()",
    "name": "getDefaultSpriteRule",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Rule",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.Rule",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDefaultSpriteRule()",
      "comment": "The default rule for sprites.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDefaultGraphStyle()",
    "name": "getDefaultGraphStyle",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Style",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.Style",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDefaultGraphStyle()",
      "comment": "The default style for graphs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDefaultNodeStyle()",
    "name": "getDefaultNodeStyle",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Style",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.Style",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDefaultNodeStyle()",
      "comment": "The default style for nodes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDefaultEdgeStyle()",
    "name": "getDefaultEdgeStyle",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Style",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.Style",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDefaultEdgeStyle()",
      "comment": "The default style for edges.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDefaultSpriteStyle()",
    "name": "getDefaultSpriteStyle",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Style",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.Style",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDefaultSpriteStyle()",
      "comment": "The default style for sprites.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getGraphStyleNameSpace()",
    "name": "getGraphStyleNameSpace",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet$NameSpace",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet$NameSpace",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getGraphStyleNameSpace()",
      "comment": "All the rules (default, specific and class) that apply to graphs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNodeStyleNameSpace()",
    "name": "getNodeStyleNameSpace",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet$NameSpace",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet$NameSpace",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNodeStyleNameSpace()",
      "comment": "All the rules (default, specific and class) that apply to nodes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEdgeStyleNameSpace()",
    "name": "getEdgeStyleNameSpace",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet$NameSpace",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet$NameSpace",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getEdgeStyleNameSpace()",
      "comment": "All the rules (default, specific and class) that apply to edges.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSpriteStyleNameSpace()",
    "name": "getSpriteStyleNameSpace",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet$NameSpace",
      "name": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet$NameSpace",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSpriteStyleNameSpace()",
      "comment": "All the rules (default, specific and class) that apply to sprites.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRulesFor(org.graphstream.graph.Element element)",
    "name": "getRulesFor",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayList<org.graphstream.ui.graphicGraph.stylesheet.Rule>",
      "name": "java.util.ArrayList<org.graphstream.ui.graphicGraph.stylesheet.Rule>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "getRulesFor(org.graphstream.graph.Element element)",
      "comment": "Get the rules that match a given element. First a rule for the identifier of the element is looked for. It is looked for in its name space (nodes for Node element, etc.) If it is not found, the default rule for this kind of element is used. This rule is pushed at start of the returned array of rules. After a rule for the element is found, then the various classes the element pertains to are looked at and each class rule found is added in order in the returned array.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStyleGroupIdFor(org.graphstream.graph.Element element, java.util.ArrayList<org.graphstream.ui.graphicGraph.stylesheet.Rule> rules)",
    "name": "getStyleGroupIdFor",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.graph.Element",
          "name": "Element",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "java.util.ArrayList",
          "name": "ArrayList",
          "isArray": false
        },
        "name": "rules"
      }
    ],
    "protocol": {
      "member": "getStyleGroupIdFor(org.graphstream.graph.Element element, java.util.ArrayList<org.graphstream.ui.graphicGraph.stylesheet.Rule> rules)",
      "comment": "Compute the name of the style group and element will pertain to knowing its styling rules.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "initRules()",
    "name": "initRules",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "initRules()",
      "comment": "Create the default rules. This method is the place to set defaults for specific element types. This is here that the edge width is reset to one, since the default width is larger. The default z index that is different for every class of element is also set here.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addListener(org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener listener)",
    "name": "addListener",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener",
          "name": "StyleSheetListener",
          "isArray": false
        },
        "name": "listener"
      }
    ],
    "protocol": {
      "member": "addListener(org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener listener)",
      "comment": "Add a listener for style events. You never receive events for default rules and styles. You receive events only for the rules and styles that are added after this listener is registered.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeListener(org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener listener)",
    "name": "removeListener",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener",
          "name": "StyleSheetListener",
          "isArray": false
        },
        "name": "listener"
      }
    ],
    "protocol": {
      "member": "removeListener(org.graphstream.ui.graphicGraph.stylesheet.StyleSheetListener listener)",
      "comment": "Remove a previously registered listener.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Clear all specific rules and initialise the default rules. The listeners are not changed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parseFromFile(java.lang.String fileName)",
    "name": "parseFromFile",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "fileName"
      }
    ],
    "protocol": {
      "member": "parseFromFile(java.lang.String fileName)",
      "comment": "Parse a style sheet from a file. The style sheet will complete the previously parsed style sheets.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parseFromURL(java.lang.String url)",
    "name": "parseFromURL",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "url"
      }
    ],
    "protocol": {
      "member": "parseFromURL(java.lang.String url)",
      "comment": "Parse a style sheet from an URL. The style sheet will complete the previously parsed style sheets. First, this method will search the URL as SystemRessource, then as a file and if there is no match, just try to create an URL object giving the URL as constructor's parameter.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parseFromString(java.lang.String styleSheet)",
    "name": "parseFromString",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "styleSheet"
      }
    ],
    "protocol": {
      "member": "parseFromString(java.lang.String styleSheet)",
      "comment": "Parse a style sheet from a string. The style sheet will complete the previously parsed style sheets.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parseStyleFromString(org.graphstream.ui.graphicGraph.stylesheet.Selector select, java.lang.String styleString)",
    "name": "parseStyleFromString",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Selector",
          "name": "Selector",
          "isArray": false
        },
        "name": "select"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "styleString"
      }
    ],
    "protocol": {
      "member": "parseStyleFromString(org.graphstream.ui.graphicGraph.stylesheet.Selector select, java.lang.String styleString)",
      "comment": "Parse only one style, create a rule with the given selector, and add this rule.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "load(java.lang.String styleSheetValue)",
    "name": "load",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "styleSheetValue"
      }
    ],
    "protocol": {
      "member": "load(java.lang.String styleSheetValue)",
      "comment": "Load a style sheet from an attribute value, the value can either be the contents of the whole style sheet, or begin by \"url\". If it starts with \"url\", it must then contain between parenthesis the string of the URL to load. For example:  method_0  Or  method_1  The loaded style sheet will be merged with the styles already present in the style sheet.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parse(java.io.Reader reader)",
    "name": "parse",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "reader"
      }
    ],
    "protocol": {
      "member": "parse(java.io.Reader reader)",
      "comment": "Parse the style sheet from the given reader.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addRule(org.graphstream.ui.graphicGraph.stylesheet.Rule newRule)",
    "name": "addRule",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.Rule",
          "name": "Rule",
          "isArray": false
        },
        "name": "newRule"
      }
    ],
    "protocol": {
      "member": "addRule(org.graphstream.ui.graphicGraph.stylesheet.Rule newRule)",
      "comment": "Add a new rule with its style. If the rule selector is just GRAPH, NODE, EDGE or SPRITE, the default corresponding rules make a copy (or augmentation) of its style. Else if an id or class is specified the rules are added (or changed/augmented if the id or class was already set) and their parent is set to the default graph, node, edge or sprite rules. If this is an event rule (or meta-class rule), its sibling rule (the same rule without the meta-class) is searched and created if not found and the event rule is added as an alternative to it.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
      "name": "StyleSheet",
      "isArray": false
    },
    "targetClass": "org.graphstream.ui.graphicGraph.stylesheet.StyleSheet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]