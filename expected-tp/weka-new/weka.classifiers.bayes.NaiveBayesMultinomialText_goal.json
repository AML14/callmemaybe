[
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCapabilities()",
    "name": "getCapabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Capabilities",
      "name": "weka.core.Capabilities",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCapabilities()",
      "comment": "Returns default capabilities of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances data)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances data)",
      "comment": "Generates the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "updateClassifier(weka.core.Instance instance)",
    "name": "updateClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "updateClassifier(weka.core.Instance instance)",
      "comment": "Updates the classifier with the given instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "updateClassifier(weka.core.Instance instance, boolean updateDictionary)",
    "name": "updateClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "updateDictionary"
      }
    ],
    "protocol": {
      "member": "updateClassifier(weka.core.Instance instance, boolean updateDictionary)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distributionForInstance(weka.core.Instance instance)",
    "name": "distributionForInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "distributionForInstance(weka.core.Instance instance)",
      "comment": "Calculates the class membership probabilities for the given test instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tokenizeInstance(weka.core.Instance instance, boolean updateDictionary)",
    "name": "tokenizeInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "updateDictionary"
      }
    ],
    "protocol": {
      "member": "tokenizeInstance(weka.core.Instance instance, boolean updateDictionary)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pruneDictionary(boolean force)",
    "name": "pruneDictionary",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "force"
      }
    ],
    "protocol": {
      "member": "pruneDictionary(boolean force)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reset()",
    "name": "reset",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "reset()",
      "comment": "Reset the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setStemmer(weka.core.stemmers.Stemmer value)",
    "name": "setStemmer",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.stemmers.Stemmer",
          "name": "Stemmer",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setStemmer(weka.core.stemmers.Stemmer value)",
      "comment": "the stemming algorithm to use, null means no stemming at all (imethod_0., the NullStemmer is used).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStemmer()",
    "name": "getStemmer",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.stemmers.Stemmer",
      "name": "weka.core.stemmers.Stemmer",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getStemmer()",
      "comment": "Returns the current stemming algorithm, null if none is used.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "stemmerTipText()",
    "name": "stemmerTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "stemmerTipText()",
      "comment": "Returns the tip text for this property.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setTokenizer(weka.core.tokenizers.Tokenizer value)",
    "name": "setTokenizer",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.tokenizers.Tokenizer",
          "name": "Tokenizer",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setTokenizer(weka.core.tokenizers.Tokenizer value)",
      "comment": "the tokenizer algorithm to use.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTokenizer()",
    "name": "getTokenizer",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.tokenizers.Tokenizer",
      "name": "weka.core.tokenizers.Tokenizer",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTokenizer()",
      "comment": "Returns the current tokenizer algorithm.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tokenizerTipText()",
    "name": "tokenizerTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "tokenizerTipText()",
      "comment": "Returns the tip text for this property.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useWordFrequenciesTipText()",
    "name": "useWordFrequenciesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "useWordFrequenciesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUseWordFrequencies(boolean u)",
    "name": "setUseWordFrequencies",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "u"
      }
    ],
    "protocol": {
      "member": "setUseWordFrequencies(boolean u)",
      "comment": "Set whether to use word frequencies rather than binary bag of words representation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUseWordFrequencies()",
    "name": "getUseWordFrequencies",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getUseWordFrequencies()",
      "comment": "Get whether to use word frequencies rather than binary bag of words representation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lowercaseTokensTipText()",
    "name": "lowercaseTokensTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "lowercaseTokensTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setLowercaseTokens(boolean l)",
    "name": "setLowercaseTokens",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "l"
      }
    ],
    "protocol": {
      "member": "setLowercaseTokens(boolean l)",
      "comment": "Set whether to convert all tokens to lowercase",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLowercaseTokens()",
    "name": "getLowercaseTokens",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getLowercaseTokens()",
      "comment": "Get whether to convert all tokens to lowercase",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "periodicPruningTipText()",
    "name": "periodicPruningTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "periodicPruningTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setPeriodicPruning(int p)",
    "name": "setPeriodicPruning",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "p"
      }
    ],
    "protocol": {
      "member": "setPeriodicPruning(int p)",
      "comment": "Set how often to prune the dictionary",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getPeriodicPruning()",
    "name": "getPeriodicPruning",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getPeriodicPruning()",
      "comment": "Get how often to prune the dictionary",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minWordFrequencyTipText()",
    "name": "minWordFrequencyTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "minWordFrequencyTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMinWordFrequency(double minFreq)",
    "name": "setMinWordFrequency",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minFreq"
      }
    ],
    "protocol": {
      "member": "setMinWordFrequency(double minFreq)",
      "comment": "Set the minimum word frequency. Words that don't occur at least min freq times are ignored when updating weights. If periodic pruning is turned on, then min frequency is used when removing words from the dictionary.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinWordFrequency()",
    "name": "getMinWordFrequency",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMinWordFrequency()",
      "comment": "Get the minimum word frequency. Words that don't occur at least min freq times are ignored when updating weights. If periodic pruning is turned on, then min frequency is used when removing words from the dictionary.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "normalizeDocLengthTipText()",
    "name": "normalizeDocLengthTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "normalizeDocLengthTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setNormalizeDocLength(boolean norm)",
    "name": "setNormalizeDocLength",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "norm"
      }
    ],
    "protocol": {
      "member": "setNormalizeDocLength(boolean norm)",
      "comment": "Set whether to normalize the length of each document",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNormalizeDocLength()",
    "name": "getNormalizeDocLength",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNormalizeDocLength()",
      "comment": "Get whether to normalize the length of each document",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "normTipText()",
    "name": "normTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "normTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNorm()",
    "name": "getNorm",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNorm()",
      "comment": "Get the instance's Norm.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setNorm(double newNorm)",
    "name": "setNorm",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "newNorm"
      }
    ],
    "protocol": {
      "member": "setNorm(double newNorm)",
      "comment": "Set the norm of the instances",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "LNormTipText()",
    "name": "LNormTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "LNormTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLNorm()",
    "name": "getLNorm",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getLNorm()",
      "comment": "Get the L Norm used.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setLNorm(double newLNorm)",
    "name": "setLNorm",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "newLNorm"
      }
    ],
    "protocol": {
      "member": "setLNorm(double newLNorm)",
      "comment": "Set the L-norm to used",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setStopwordsHandler(weka.core.stopwords.StopwordsHandler value)",
    "name": "setStopwordsHandler",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.stopwords.StopwordsHandler",
          "name": "StopwordsHandler",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setStopwordsHandler(weka.core.stopwords.StopwordsHandler value)",
      "comment": "Sets the stopwords handler to use.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStopwordsHandler()",
    "name": "getStopwordsHandler",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.stopwords.StopwordsHandler",
      "name": "weka.core.stopwords.StopwordsHandler",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getStopwordsHandler()",
      "comment": "Gets the stopwords handler.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "stopwordsHandlerTipText()",
    "name": "stopwordsHandlerTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "stopwordsHandlerTipText()",
      "comment": "Returns the tip text for this property.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.   -W Use word frequencies instead of binary bag of words.  -P <# instances> How often to prune the dictionary of low frequency words (default = 0, imethod_0. don't prune)  -M <double> Minimum word frequency. Words with less than this frequence are ignored. If periodic pruning is turned on then this is also used to determine which words to remove from the dictionary (default = 3).  -normalize Normalize document length (use in conjunction with -norm and -lnorm)  -norm <num> Specify the norm that each instance must have (default 1method_1)  -lnorm <num> Specify L-norm to use (default 2method_1)  -lowercase Convert all tokens to lowercase before adding to the dictionary.  -stopwords-handler The stopwords handler to use (default Null).  -tokenizer <spec> The tokenizing algorihtm (classname plus parameters) to use. (default: wekamethod_3method_4method_5)  -stemmer <spec> The stemmering algorihtm (classname plus parameters) to use.  -output-debug-info If set, classifier is run in debug mode and may output additional info to the console  -do-not-check-capabilities If set, classifier capabilities are not checked before classifier is built (use with caution).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a textual description of this classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "aggregate(weka.classifiers.bayes.NaiveBayesMultinomialText toAggregate)",
    "name": "aggregate",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
          "name": "NaiveBayesMultinomialText",
          "isArray": false
        },
        "name": "toAggregate"
      }
    ],
    "protocol": {
      "member": "aggregate(weka.classifiers.bayes.NaiveBayesMultinomialText toAggregate)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "finalizeAggregation()",
    "name": "finalizeAggregation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "finalizeAggregation()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "batchFinished()",
    "name": "batchFinished",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "batchFinished()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] args)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "weka.classifiers.bayes.NaiveBayesMultinomialText",
      "name": "NaiveBayesMultinomialText",
      "isArray": false
    },
    "targetClass": "weka.classifiers.bayes.NaiveBayesMultinomialText",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "args"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] args)",
      "comment": "Main method for testing this class.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]