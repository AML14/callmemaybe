[
  {
    "signature": "java.util.LinkedHashMap(int initialCapacity, float loadFactor)",
    "name": "java.util.LinkedHashMap",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "loadFactor"
      }
    ],
    "protocol": {
      "member": "java.util.LinkedHashMap(int initialCapacity, float loadFactor)",
      "comment": "Constructs an empty insertion-ordered LinkedHashMap instance with the specified initial capacity and load factor.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.LinkedHashMap(int initialCapacity)",
    "name": "java.util.LinkedHashMap",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      }
    ],
    "protocol": {
      "member": "java.util.LinkedHashMap(int initialCapacity)",
      "comment": "Constructs an empty insertion-ordered LinkedHashMap instance with the specified initial capacity and a default load factor (0method_0).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.LinkedHashMap()",
    "name": "java.util.LinkedHashMap",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.LinkedHashMap()",
      "comment": "Constructs an empty insertion-ordered LinkedHashMap instance with the default initial capacity (16) and load factor (0method_0).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.LinkedHashMap(java.util.Map<? extends K, ? extends V> m)",
    "name": "java.util.LinkedHashMap",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "java.util.LinkedHashMap(java.util.Map<? extends K, ? extends V> m)",
      "comment": "Constructs an insertion-ordered LinkedHashMap instance with the same mappings as the specified map. The LinkedHashMap instance is created with a default load factor (0method_0) and an initial capacity sufficient to hold the mappings in the specified map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)",
    "name": "java.util.LinkedHashMap",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      },
      {
        "type": {
          "qualifiedName": "float",
          "name": "float",
          "isArray": false
        },
        "name": "loadFactor"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "accessOrder"
      }
    ],
    "protocol": {
      "member": "java.util.LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)",
      "comment": "Constructs an empty LinkedHashMap instance with the specified initial capacity, load factor and ordering mode.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reinitialize()",
    "name": "reinitialize",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "reinitialize()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "newNode(int hash, K key, V value, java.util.HashMap$Node<K, V> e)",
    "name": "newNode",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.HashMap$Node<K, V>",
      "name": "java.util.HashMap$Node<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hash"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "java.util.HashMap$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "newNode(int hash, K key, V value, java.util.HashMap$Node<K, V> e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replacementNode(java.util.HashMap$Node<K, V> p, java.util.HashMap$Node<K, V> next)",
    "name": "replacementNode",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.HashMap$Node<K, V>",
      "name": "java.util.HashMap$Node<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.HashMap$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "p"
      },
      {
        "type": {
          "qualifiedName": "java.util.HashMap$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "next"
      }
    ],
    "protocol": {
      "member": "replacementNode(java.util.HashMap$Node<K, V> p, java.util.HashMap$Node<K, V> next)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "newTreeNode(int hash, K key, V value, java.util.HashMap$Node<K, V> next)",
    "name": "newTreeNode",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.HashMap$TreeNode<K, V>",
      "name": "java.util.HashMap$TreeNode<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "hash"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      },
      {
        "type": {
          "qualifiedName": "java.util.HashMap$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "next"
      }
    ],
    "protocol": {
      "member": "newTreeNode(int hash, K key, V value, java.util.HashMap$Node<K, V> next)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replacementTreeNode(java.util.HashMap$Node<K, V> p, java.util.HashMap$Node<K, V> next)",
    "name": "replacementTreeNode",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.HashMap$TreeNode<K, V>",
      "name": "java.util.HashMap$TreeNode<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.HashMap$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "p"
      },
      {
        "type": {
          "qualifiedName": "java.util.HashMap$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "next"
      }
    ],
    "protocol": {
      "member": "replacementTreeNode(java.util.HashMap$Node<K, V> p, java.util.HashMap$Node<K, V> next)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "afterNodeRemoval(java.util.HashMap$Node<K, V> e)",
    "name": "afterNodeRemoval",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.HashMap$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "afterNodeRemoval(java.util.HashMap$Node<K, V> e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "afterNodeInsertion(boolean evict)",
    "name": "afterNodeInsertion",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "evict"
      }
    ],
    "protocol": {
      "member": "afterNodeInsertion(boolean evict)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "afterNodeAccess(java.util.HashMap$Node<K, V> e)",
    "name": "afterNodeAccess",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.HashMap$Node",
          "name": "Node",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "afterNodeAccess(java.util.HashMap$Node<K, V> e)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "internalWriteEntries(java.io.ObjectOutputStream s)",
    "name": "internalWriteEntries",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.ObjectOutputStream",
          "name": "ObjectOutputStream",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "internalWriteEntries(java.io.ObjectOutputStream s)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsValue(java.lang.Object value)",
    "name": "containsValue",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "containsValue(java.lang.Object value)",
      "comment": "Returns true if this map maps one or more keys to the specified value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(java.lang.Object key)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "get(java.lang.Object key)",
      "comment": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that (key==null ? k==null : method_0, then this method returns v; otherwise it returns null. (There can be at most one such mapping.) A return value of null does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to null. The method_2 containsKey operation may be used to distinguish these two cases.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOrDefault(java.lang.Object key, V defaultValue)",
    "name": "getOrDefault",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "defaultValue"
      }
    ],
    "protocol": {
      "member": "getOrDefault(java.lang.Object key, V defaultValue)",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "{@inheritDoc}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeEldestEntry(java.util.Map$Entry<K, V> eldest)",
    "name": "removeEldestEntry",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map$Entry",
          "name": "Entry",
          "isArray": false
        },
        "name": "eldest"
      }
    ],
    "protocol": {
      "member": "removeEldestEntry(java.util.Map$Entry<K, V> eldest)",
      "comment": "Returns true if this map should remove its eldest entry. This method is invoked by put and putAll after inserting a new entry into the map. It provides the implementor with the opportunity to remove the eldest entry each time a new one is added. This is useful if the map represents a cache: it allows the map to reduce memory consumption by deleting stale entries. Sample use: this override will allow the map to grow up to 100 entries and then delete the eldest entry each time a new entry is added, maintaining a steady state of 100 entries.  private static final int MAX_ENTRIES = 100; protected boolean method_0 { return method_1 > MAX_ENTRIES; }  This method typically does not modify the map in any way, instead allowing the map to modify itself as directed by its return value. It is permitted for this method to modify the map directly, but if it does so, it must return false (indicating that the map should not attempt any further modification). The effects of returning true after modifying the map from within this method are unspecified. This implementation merely returns false (so that this map acts like a normal map - the eldest element is never removed).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "keySet()",
    "name": "keySet",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<K>",
      "name": "java.util.Set<K>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "keySet()",
      "comment": "Returns a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the method_0, method_1, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. Its Spliterator typically provides faster sequential performance but much poorer parallel performance than that of HashMap.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "values()",
    "name": "values",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "values()",
      "comment": "Returns a Collection view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the method_0, method_1, removeAll, retainAll and clear operations. It does not support the add or addAll operations. Its Spliterator typically provides faster sequential performance but much poorer parallel performance than that of HashMap.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "entrySet()",
    "name": "entrySet",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<java.util.Map$Entry<K, V>>",
      "name": "java.util.Set<java.util.Map$Entry<K, V>>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "entrySet()",
      "comment": "Returns a Set view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation, or through the setValue operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the method_0, method_1, removeAll, retainAll and clear operations. It does not support the add or addAll operations. Its Spliterator typically provides faster sequential performance but much poorer parallel performance than that of HashMap.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEach(java.util.function.BiConsumer<? super K, ? super V> action)",
    "name": "forEach",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.BiConsumer",
          "name": "BiConsumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "forEach(java.util.function.BiConsumer<? super K, ? super V> action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V> function)",
    "name": "replaceAll",
    "containingClass": {
      "qualifiedName": "java.util.LinkedHashMap",
      "name": "LinkedHashMap",
      "isArray": false
    },
    "targetClass": "java.util.LinkedHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.BiFunction",
          "name": "BiFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "protocol": {
      "member": "replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V> function)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]