[
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minNumTipText()",
    "name": "minNumTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "minNumTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinNum()",
    "name": "getMinNum",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMinNum()",
      "comment": "Get the value of MinNum.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMinNum(double newMinNum)",
    "name": "setMinNum",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "newMinNum"
      }
    ],
    "protocol": {
      "member": "setMinNum(double newMinNum)",
      "comment": "Set the value of MinNum.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minVariancePropTipText()",
    "name": "minVariancePropTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "minVariancePropTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinVarianceProp()",
    "name": "getMinVarianceProp",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMinVarianceProp()",
      "comment": "Get the value of MinVarianceProp.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMinVarianceProp(double newMinVarianceProp)",
    "name": "setMinVarianceProp",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "newMinVarianceProp"
      }
    ],
    "protocol": {
      "member": "setMinVarianceProp(double newMinVarianceProp)",
      "comment": "Set the value of MinVarianceProp.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "KValueTipText()",
    "name": "KValueTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "KValueTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getKValue()",
    "name": "getKValue",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getKValue()",
      "comment": "Get the value of K.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setKValue(int k)",
    "name": "setKValue",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "protocol": {
      "member": "setKValue(int k)",
      "comment": "Set the value of K.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "seedTipText()",
    "name": "seedTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "seedTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setSeed(int seed)",
    "name": "setSeed",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "seed"
      }
    ],
    "protocol": {
      "member": "setSeed(int seed)",
      "comment": "Set the seed for random number generation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSeed()",
    "name": "getSeed",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSeed()",
      "comment": "Gets the seed for the random number generations",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "maxDepthTipText()",
    "name": "maxDepthTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "maxDepthTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMaxDepth()",
    "name": "getMaxDepth",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMaxDepth()",
      "comment": "Get the maximum depth of trh tree, 0 for unlimited.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMaxDepth(int value)",
    "name": "setMaxDepth",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setMaxDepth(int value)",
      "comment": "Set the maximum depth of the tree, 0 for unlimited.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "numFoldsTipText()",
    "name": "numFoldsTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "numFoldsTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNumFolds()",
    "name": "getNumFolds",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNumFolds()",
      "comment": "Get the value of NumFolds.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setNumFolds(int newNumFolds)",
    "name": "setNumFolds",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newNumFolds"
      }
    ],
    "protocol": {
      "member": "setNumFolds(int newNumFolds)",
      "comment": "Set the value of NumFolds.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "allowUnclassifiedInstancesTipText()",
    "name": "allowUnclassifiedInstancesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "allowUnclassifiedInstancesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAllowUnclassifiedInstances()",
    "name": "getAllowUnclassifiedInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getAllowUnclassifiedInstances()",
      "comment": "Gets whether tree is allowed to abstain from making a prediction.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setAllowUnclassifiedInstances(boolean newAllowUnclassifiedInstances)",
    "name": "setAllowUnclassifiedInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newAllowUnclassifiedInstances"
      }
    ],
    "protocol": {
      "member": "setAllowUnclassifiedInstances(boolean newAllowUnclassifiedInstances)",
      "comment": "Set the value of AllowUnclassifiedInstances.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "breakTiesRandomlyTipText()",
    "name": "breakTiesRandomlyTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "breakTiesRandomlyTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getBreakTiesRandomly()",
    "name": "getBreakTiesRandomly",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getBreakTiesRandomly()",
      "comment": "Get whether to break ties randomly.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setBreakTiesRandomly(boolean newBreakTiesRandomly)",
    "name": "setBreakTiesRandomly",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newBreakTiesRandomly"
      }
    ],
    "protocol": {
      "member": "setBreakTiesRandomly(boolean newBreakTiesRandomly)",
      "comment": "Set whether to break ties randomly.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Lists the command-line options for this classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets options from this classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.  Valid options are:   -K <number of attributes> Number of attributes to randomly investigate. (default 0) (<1 = method_0+1)).  -M <minimum number of instances> Set minimum number of instances per leaf. (default 1)  -V <minimum variance for split> Set minimum numeric class variance proportion of train variance for split (default 1e-3).  -S <num> Seed for random number generator. (default 1)  -depth <num> The maximum depth of the tree, 0 for unlimited. (default 0)  -N <num> Number of folds for backfitting (default 0, no backfitting).  -U Allow unclassified instances.  -B Break ties randomly when several attributes look equally good.  -output-debug-info If set, classifier is run in debug mode and may output additional info to the console  -do-not-check-capabilities If set, classifier capabilities are not checked before classifier is built (use with caution).  -num-decimal-places The number of decimal places for the output of numbers in the model (default 2).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCapabilities()",
    "name": "getCapabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Capabilities",
      "name": "weka.core.Capabilities",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCapabilities()",
      "comment": "Returns default capabilities of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances data)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances data)",
      "comment": "Builds classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distributionForInstance(weka.core.Instance instance)",
    "name": "distributionForInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "distributionForInstance(weka.core.Instance instance)",
      "comment": "Computes class distribution of an instance using the tree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Outputs the decision tree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "graph()",
    "name": "graph",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "graph()",
      "comment": "Returns graph describing the tree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "graphType()",
    "name": "graphType",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "graphType()",
      "comment": "Returns the type of graph this classifier represents.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "generatePartition(weka.core.Instances data)",
    "name": "generatePartition",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "generatePartition(weka.core.Instances data)",
      "comment": "Builds the classifier to generate a partition.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMembershipValues(weka.core.Instance instance)",
    "name": "getMembershipValues",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "getMembershipValues(weka.core.Instance instance)",
      "comment": "Computes array that indicates node membership. Array locations are allocated based on breadth-first exploration of the tree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "numElements()",
    "name": "numElements",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "numElements()",
      "comment": "Returns the number of elements in the partition.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "variance(double[] s, double[] sS, double[] sumOfWeights)",
    "name": "variance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "sS"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "sumOfWeights"
      }
    ],
    "protocol": {
      "member": "variance(double[] s, double[] sS, double[] sumOfWeights)",
      "comment": "Computes variance for subsets.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "singleVariance(double s, double sS, double weight)",
    "name": "singleVariance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "s"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "sS"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "weight"
      }
    ],
    "protocol": {
      "member": "singleVariance(double s, double sS, double weight)",
      "comment": "Computes the variance for a single set",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] argv)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.RandomTree",
      "name": "RandomTree",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.RandomTree",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "argv"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] argv)",
      "comment": "Main method for this class.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]