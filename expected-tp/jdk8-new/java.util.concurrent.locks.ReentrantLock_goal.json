[
  {
    "signature": "java.util.concurrent.locks.ReentrantLock()",
    "name": "java.util.concurrent.locks.ReentrantLock",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.locks.ReentrantLock()",
      "comment": "Creates an instance of ReentrantLock. This is equivalent to using method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.locks.ReentrantLock(boolean fair)",
    "name": "java.util.concurrent.locks.ReentrantLock",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fair"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.locks.ReentrantLock(boolean fair)",
      "comment": "Creates an instance of ReentrantLock with the given fairness policy.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lock()",
    "name": "lock",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "lock()",
      "comment": "Acquires the lock. Acquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one. If the current thread already holds the lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired, at which time the lock hold count is set to one.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lockInterruptibly()",
    "name": "lockInterruptibly",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "lockInterruptibly()",
      "comment": "Acquires the lock unless the current thread is method_0 interrupted. Acquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one. If the current thread already holds this lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens:  <li>The lock is acquired by the current thread; or <li>Some other thread method_0 interrupts the current thread.  If the lock is acquired by the current thread then the lock hold count is set to one. If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_0 interrupted while acquiring the lock,  then InterruptedException is thrown and the current thread's interrupted status is cleared. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryLock()",
    "name": "tryLock",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "tryLock()",
      "comment": "Acquires the lock only if it is not held by another thread at the time of invocation. Acquires the lock if it is not held by another thread and returns immediately with the value true, setting the lock hold count to one. Even when this lock has been set to use a fair ordering policy, a call to method_0 will immediately acquire the lock if it is available, whether or not other threads are currently waiting for the lock. This &quot;barging&quot; behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting for this lock, then use method_2  which is almost equivalent (it also detects interruption). If the current thread already holds this lock then the hold count is incremented by one and the method returns true. If the lock is held by another thread then this method will return immediately with the value false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryLock(long timeout, java.util.concurrent.TimeUnit unit)",
    "name": "tryLock",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "timeout"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "tryLock(long timeout, java.util.concurrent.TimeUnit unit)",
      "comment": "Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been method_3 interrupted. Acquires the lock if it is not held by another thread and returns immediately with the value true, setting the lock hold count to one. If this lock has been set to use a fair ordering policy then an available lock will not be acquired if any other threads are waiting for the lock. This is in contrast to the method_0 method. If you want a timed tryLock that does permit barging on a fair lock then combine the timed and un-timed forms together:  if (lock.method_0 || method_2 { ... } If the current thread already holds this lock then the hold count is incremented by one and the method returns true. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens:  <li>The lock is acquired by the current thread; or <li>Some other thread method_3 interrupts the current thread; or <li>The specified waiting time elapses  If the lock is acquired then the value true is returned and the lock hold count is set to one. If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_3 interrupted while acquiring the lock,  then InterruptedException is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unlock()",
    "name": "unlock",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "unlock()",
      "comment": "Attempts to release this lock. If the current thread is the holder of this lock then the hold count is decremented. If the hold count is now zero then the lock is released. If the current thread is not the holder of this lock then IllegalMonitorStateException is thrown.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "newCondition()",
    "name": "newCondition",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.locks.Condition",
      "name": "java.util.concurrent.locks.Condition",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "newCondition()",
      "comment": "Returns a Condition instance for use with this Lock instance. The returned Condition instance supports the same usages as do the Object monitor methods (method_0 wait, method_4 notify, and method_4All notifyAll) when used with the built-in monitor lock.  <li>If this lock is not held when any of the Condition method_1 waiting or method_7 signalling methods are called, then an IllegalMonitorStateException is thrown. <li>When the condition method_1 waiting methods are called the lock is released and, before they return, the lock is reacquired and the lock hold count restored to what it was when the method was called. <li>If a thread is method_9 interrupted while waiting then the wait will terminate, an InterruptedException will be thrown, and the thread's interrupted status will be cleared. <li> Waiting threads are signalled in FIFO order. <li>The ordering of lock reacquisition for threads returning from waiting methods is the same as for threads initially acquiring the lock, which is in the default case not specified, but for <em>fair</em> locks favors those threads that have been waiting the longest.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getHoldCount()",
    "name": "getHoldCount",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getHoldCount()",
      "comment": "Queries the number of holds on this lock by the current thread. A thread has a hold on a lock for each lock action that is not matched by an unlock action. The hold count information is typically only used for testing and debugging purposes. For example, if a certain section of code should not be entered with the lock already held then we can assert that fact:  class X { ReentrantLock lock = method_0; // ... public void method_1 { assert method_2 == 0; method_3; try { // ... method body  finally { method_4; } } }}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isHeldByCurrentThread()",
    "name": "isHeldByCurrentThread",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isHeldByCurrentThread()",
      "comment": "Queries if this lock is held by the current thread. Analogous to the method_0 method for built-in monitor locks, this method is typically used for debugging and testing. For example, a method that should only be called while a lock is held can assert that this is the case:  class X { ReentrantLock lock = method_1; // ... public void method_2 { assert method_3; // ... method body  }} It can also be used to ensure that a reentrant lock is used in a non-reentrant manner, for example:  class X { ReentrantLock lock = method_1; // ... public void method_2 { assert !method_3; method_7; try { // ... method body  finally { method_8; } } }}",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isLocked()",
    "name": "isLocked",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isLocked()",
      "comment": "Queries if this lock is held by any thread. This method is designed for use in monitoring of the system state, not for synchronization control.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isFair()",
    "name": "isFair",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isFair()",
      "comment": "Returns true if this lock has fairness set true.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOwner()",
    "name": "getOwner",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Thread",
      "name": "java.lang.Thread",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getOwner()",
      "comment": "Returns the thread that currently owns this lock, or null if not owned. When this method is called by a thread that is not the owner, the return value reflects a best-effort approximation of current lock status. For example, the owner may be momentarily null even if there are threads trying to acquire the lock but have not yet done so. This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasQueuedThreads()",
    "name": "hasQueuedThreads",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hasQueuedThreads()",
      "comment": "Queries whether any threads are waiting to acquire this lock. Note that because cancellations may occur at any time, a true return does not guarantee that any other thread will ever acquire this lock. This method is designed primarily for use in monitoring of the system state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasQueuedThread(java.lang.Thread thread)",
    "name": "hasQueuedThread",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Thread",
          "name": "Thread",
          "isArray": false
        },
        "name": "thread"
      }
    ],
    "protocol": {
      "member": "hasQueuedThread(java.lang.Thread thread)",
      "comment": "Queries whether the given thread is waiting to acquire this lock. Note that because cancellations may occur at any time, a true return does not guarantee that this thread will ever acquire this lock. This method is designed primarily for use in monitoring of the system state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQueueLength()",
    "name": "getQueueLength",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getQueueLength()",
      "comment": "Returns an estimate of the number of threads waiting to acquire this lock. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring of the system state, not for synchronization control.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQueuedThreads()",
    "name": "getQueuedThreads",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.lang.Thread>",
      "name": "java.util.Collection<java.lang.Thread>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getQueuedThreads()",
      "comment": "Returns a collection containing threads that may be waiting to acquire this lock. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasWaiters(java.util.concurrent.locks.Condition condition)",
    "name": "hasWaiters",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.Condition",
          "name": "Condition",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "protocol": {
      "member": "hasWaiters(java.util.concurrent.locks.Condition condition)",
      "comment": "Queries whether any threads are waiting on the given condition associated with this lock. Note that because timeouts and interrupts may occur at any time, a true return does not guarantee that a future signal will awaken any threads. This method is designed primarily for use in monitoring of the system state.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWaitQueueLength(java.util.concurrent.locks.Condition condition)",
    "name": "getWaitQueueLength",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.Condition",
          "name": "Condition",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "protocol": {
      "member": "getWaitQueueLength(java.util.concurrent.locks.Condition condition)",
      "comment": "Returns an estimate of the number of threads waiting on the given condition associated with this lock. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring of the system state, not for synchronization control.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWaitingThreads(java.util.concurrent.locks.Condition condition)",
    "name": "getWaitingThreads",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.lang.Thread>",
      "name": "java.util.Collection<java.lang.Thread>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.locks.Condition",
          "name": "Condition",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "protocol": {
      "member": "getWaitingThreads(java.util.concurrent.locks.Condition condition)",
      "comment": "Returns a collection containing those threads that may be waiting on the given condition associated with this lock. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive condition monitoring facilities.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.ReentrantLock",
      "name": "ReentrantLock",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.ReentrantLock",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a string identifying this lock, as well as its lock state. The state, in brackets, includes either the String \"Unlocked\" or the String \"Locked by\" followed by the method_0 name of the owning thread.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]