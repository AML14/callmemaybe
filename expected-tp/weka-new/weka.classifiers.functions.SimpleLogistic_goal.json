[
  {
    "signature": "weka.classifiers.functions.SimpleLogistic()",
    "name": "weka.classifiers.functions.SimpleLogistic",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.functions.SimpleLogistic()",
      "comment": "Constructor for creating SimpleLogistic object with standard options.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "weka.classifiers.functions.SimpleLogistic(int numBoostingIterations, boolean useCrossValidation, boolean errorOnProbabilities)",
    "name": "weka.classifiers.functions.SimpleLogistic",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "numBoostingIterations"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "useCrossValidation"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "errorOnProbabilities"
      }
    ],
    "protocol": {
      "member": "weka.classifiers.functions.SimpleLogistic(int numBoostingIterations, boolean useCrossValidation, boolean errorOnProbabilities)",
      "comment": "Constructor for creating SimpleLogistic object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] argv)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "argv"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] argv)",
      "comment": "Main method for testing this class",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCapabilities()",
    "name": "getCapabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Capabilities",
      "name": "weka.core.Capabilities",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCapabilities()",
      "comment": "Returns default capabilities of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances data)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances data)",
      "comment": "Builds the logistic regression using LogitBoost.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distributionForInstance(weka.core.Instance inst)",
    "name": "distributionForInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "inst"
      }
    ],
    "protocol": {
      "member": "distributionForInstance(weka.core.Instance inst)",
      "comment": "Returns class probabilities for an instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the Classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.   -I <iterations> Set fixed number of iterations for LogitBoost   -S Use stopping criterion on training set (instead of cross-validation)   -P Use error on probabilities (rmse) instead of misclassification error for stopping criterion   -M <iterations> Set maximum number of boosting iterations   -H <iterations> Set parameter for heuristic for early stopping of LogitBoost. If enabled, the minimum is selected greedily, stopping if the current minimum has not changed for iter iterations. By default, heuristic is enabled with value 50. Set to zero to disable heuristic.   -W <beta> Set beta for weight trimming for LogitBoost. Set to 0 for no weight trimming.   -A The AIC is used to choose the best iteration (instead of CV or training error).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNumBoostingIterations()",
    "name": "getNumBoostingIterations",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNumBoostingIterations()",
      "comment": "Get the value of numBoostingIterations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setNumBoostingIterations(int n)",
    "name": "setNumBoostingIterations",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "protocol": {
      "member": "setNumBoostingIterations(int n)",
      "comment": "Set the value of numBoostingIterations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUseCrossValidation()",
    "name": "getUseCrossValidation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getUseCrossValidation()",
      "comment": "Get the value of useCrossValidation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUseCrossValidation(boolean l)",
    "name": "setUseCrossValidation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "l"
      }
    ],
    "protocol": {
      "member": "setUseCrossValidation(boolean l)",
      "comment": "Set the value of useCrossValidation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getErrorOnProbabilities()",
    "name": "getErrorOnProbabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getErrorOnProbabilities()",
      "comment": "Get the value of errorOnProbabilities.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setErrorOnProbabilities(boolean l)",
    "name": "setErrorOnProbabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "l"
      }
    ],
    "protocol": {
      "member": "setErrorOnProbabilities(boolean l)",
      "comment": "Set the value of errorOnProbabilities.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMaxBoostingIterations()",
    "name": "getMaxBoostingIterations",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMaxBoostingIterations()",
      "comment": "Get the value of maxBoostingIterations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMaxBoostingIterations(int n)",
    "name": "setMaxBoostingIterations",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "protocol": {
      "member": "setMaxBoostingIterations(int n)",
      "comment": "Set the value of maxBoostingIterations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getHeuristicStop()",
    "name": "getHeuristicStop",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getHeuristicStop()",
      "comment": "Get the value of heuristicStop.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setHeuristicStop(int n)",
    "name": "setHeuristicStop",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "protocol": {
      "member": "setHeuristicStop(int n)",
      "comment": "Set the value of heuristicStop.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWeightTrimBeta()",
    "name": "getWeightTrimBeta",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWeightTrimBeta()",
      "comment": "Get the value of weightTrimBeta.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setWeightTrimBeta(double n)",
    "name": "setWeightTrimBeta",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "protocol": {
      "member": "setWeightTrimBeta(double n)",
      "comment": "Set the value of weightTrimBeta.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUseAIC()",
    "name": "getUseAIC",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getUseAIC()",
      "comment": "Get the value of useAIC.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUseAIC(boolean c)",
    "name": "setUseAIC",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "setUseAIC(boolean c)",
      "comment": "Set the value of useAIC.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNumRegressions()",
    "name": "getNumRegressions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNumRegressions()",
      "comment": "Get the number of LogitBoost iterations performed (= the number of regression functions fit by LogitBoost).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a description of the logistic model (attributes/coefficients).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "measureAttributesUsed()",
    "name": "measureAttributesUsed",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "measureAttributesUsed()",
      "comment": "Returns the fraction of all attributes in the data that are used in the logistic model (in percent). An attribute is used in the model if it is used in any of the models for the different classes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "enumerateMeasures()",
    "name": "enumerateMeasures",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<java.lang.String>",
      "name": "java.util.Enumeration<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "enumerateMeasures()",
      "comment": "Returns an enumeration of the additional measure names",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMeasure(java.lang.String additionalMeasureName)",
    "name": "getMeasure",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "additionalMeasureName"
      }
    ],
    "protocol": {
      "member": "getMeasure(java.lang.String additionalMeasureName)",
      "comment": "Returns the value of the named measure",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTechnicalInformation()",
    "name": "getTechnicalInformation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.TechnicalInformation",
      "name": "weka.core.TechnicalInformation",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTechnicalInformation()",
      "comment": "Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, emethod_0., paper reference or book this class is based on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "numBoostingIterationsTipText()",
    "name": "numBoostingIterationsTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "numBoostingIterationsTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useCrossValidationTipText()",
    "name": "useCrossValidationTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "useCrossValidationTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "errorOnProbabilitiesTipText()",
    "name": "errorOnProbabilitiesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "errorOnProbabilitiesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "maxBoostingIterationsTipText()",
    "name": "maxBoostingIterationsTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "maxBoostingIterationsTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "heuristicStopTipText()",
    "name": "heuristicStopTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "heuristicStopTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "weightTrimBetaTipText()",
    "name": "weightTrimBetaTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "weightTrimBetaTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useAICTipText()",
    "name": "useAICTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "useAICTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "numDecimalPlacesTipText()",
    "name": "numDecimalPlacesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "numDecimalPlacesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.functions.SimpleLogistic",
      "name": "SimpleLogistic",
      "isArray": false
    },
    "targetClass": "weka.classifiers.functions.SimpleLogistic",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]