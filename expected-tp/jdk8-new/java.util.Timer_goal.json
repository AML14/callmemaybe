[
  {
    "signature": "java.util.Timer()",
    "name": "java.util.Timer",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.Timer()",
      "comment": "Creates a new timer. The associated thread does not method_0 run as a daemon.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Timer(boolean isDaemon)",
    "name": "java.util.Timer",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isDaemon"
      }
    ],
    "protocol": {
      "member": "java.util.Timer(boolean isDaemon)",
      "comment": "Creates a new timer whose associated thread may be specified to method_0 run as a daemon. A daemon thread is called for if the timer will be used to schedule repeating \"maintenance activities\", which must be performed as long as the application is running, but should not prolong the lifetime of the application.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Timer(java.lang.String name)",
    "name": "java.util.Timer",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "protocol": {
      "member": "java.util.Timer(java.lang.String name)",
      "comment": "Creates a new timer whose associated thread has the specified name. The associated thread does not method_0 run as a daemon.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.Timer(java.lang.String name, boolean isDaemon)",
    "name": "java.util.Timer",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isDaemon"
      }
    ],
    "protocol": {
      "member": "java.util.Timer(java.lang.String name, boolean isDaemon)",
      "comment": "Creates a new timer whose associated thread has the specified name, and may be specified to method_0 run as a daemon.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "schedule(java.util.TimerTask task, long delay)",
    "name": "schedule",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimerTask",
          "name": "TimerTask",
          "isArray": false
        },
        "name": "task"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "delay"
      }
    ],
    "protocol": {
      "member": "schedule(java.util.TimerTask task, long delay)",
      "comment": "Schedules the specified task for execution after the specified delay.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "schedule(java.util.TimerTask task, java.util.Date time)",
    "name": "schedule",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimerTask",
          "name": "TimerTask",
          "isArray": false
        },
        "name": "task"
      },
      {
        "type": {
          "qualifiedName": "java.util.Date",
          "name": "Date",
          "isArray": false
        },
        "name": "time"
      }
    ],
    "protocol": {
      "member": "schedule(java.util.TimerTask task, java.util.Date time)",
      "comment": "Schedules the specified task for execution at the specified time. If the time is in the past, the task is scheduled for immediate execution.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "schedule(java.util.TimerTask task, long delay, long period)",
    "name": "schedule",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimerTask",
          "name": "TimerTask",
          "isArray": false
        },
        "name": "task"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "delay"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "period"
      }
    ],
    "protocol": {
      "member": "schedule(java.util.TimerTask task, long delay, long period)",
      "comment": "Schedules the specified task for repeated fixed-delay execution, beginning after the specified delay. Subsequent executions take place at approximately regular intervals separated by the specified period. In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. In the long run, the frequency of execution will generally be slightly lower than the reciprocal of the specified period (assuming the system clock underlying method_0 is accurate). Fixed-delay execution is appropriate for recurring activities that require \"smoothness.\" In other words, it is appropriate for activities where it is more important to keep the frequency accurate in the short run than in the long run. This includes most animation tasks, such as blinking a cursor at regular intervals. It also includes tasks wherein regular activity is performed in response to human input, such as automatically repeating a character as long as a key is held down.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "schedule(java.util.TimerTask task, java.util.Date firstTime, long period)",
    "name": "schedule",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimerTask",
          "name": "TimerTask",
          "isArray": false
        },
        "name": "task"
      },
      {
        "type": {
          "qualifiedName": "java.util.Date",
          "name": "Date",
          "isArray": false
        },
        "name": "firstTime"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "period"
      }
    ],
    "protocol": {
      "member": "schedule(java.util.TimerTask task, java.util.Date firstTime, long period)",
      "comment": "Schedules the specified task for repeated fixed-delay execution, beginning at the specified time. Subsequent executions take place at approximately regular intervals, separated by the specified period. In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. In the long run, the frequency of execution will generally be slightly lower than the reciprocal of the specified period (assuming the system clock underlying method_0 is accurate). As a consequence of the above, if the scheduled first time is in the past, it is scheduled for immediate execution. Fixed-delay execution is appropriate for recurring activities that require \"smoothness.\" In other words, it is appropriate for activities where it is more important to keep the frequency accurate in the short run than in the long run. This includes most animation tasks, such as blinking a cursor at regular intervals. It also includes tasks wherein regular activity is performed in response to human input, such as automatically repeating a character as long as a key is held down.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "scheduleAtFixedRate(java.util.TimerTask task, long delay, long period)",
    "name": "scheduleAtFixedRate",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimerTask",
          "name": "TimerTask",
          "isArray": false
        },
        "name": "task"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "delay"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "period"
      }
    ],
    "protocol": {
      "member": "scheduleAtFixedRate(java.util.TimerTask task, long delay, long period)",
      "comment": "Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay. Subsequent executions take place at approximately regular intervals, separated by the specified period. In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to \"catch up.\" In the long run, the frequency of execution will be exactly the reciprocal of the specified period (assuming the system clock underlying method_0 is accurate). Fixed-rate execution is appropriate for recurring activities that are sensitive to absolute time, such as ringing a chime every hour on the hour, or running scheduled maintenance every day at a particular time. It is also appropriate for recurring activities where the total time to perform a fixed number of executions is important, such as a countdown timer that ticks once every second for ten seconds. Finally, fixed-rate execution is appropriate for scheduling multiple repeating timer tasks that must remain synchronized with respect to one another.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "scheduleAtFixedRate(java.util.TimerTask task, java.util.Date firstTime, long period)",
    "name": "scheduleAtFixedRate",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimerTask",
          "name": "TimerTask",
          "isArray": false
        },
        "name": "task"
      },
      {
        "type": {
          "qualifiedName": "java.util.Date",
          "name": "Date",
          "isArray": false
        },
        "name": "firstTime"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "period"
      }
    ],
    "protocol": {
      "member": "scheduleAtFixedRate(java.util.TimerTask task, java.util.Date firstTime, long period)",
      "comment": "Schedules the specified task for repeated fixed-rate execution, beginning at the specified time. Subsequent executions take place at approximately regular intervals, separated by the specified period. In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to \"catch up.\" In the long run, the frequency of execution will be exactly the reciprocal of the specified period (assuming the system clock underlying method_0 is accurate). As a consequence of the above, if the scheduled first time is in the past, then any \"missed\" executions will be scheduled for immediate \"catch up\" execution. Fixed-rate execution is appropriate for recurring activities that are sensitive to absolute time, such as ringing a chime every hour on the hour, or running scheduled maintenance every day at a particular time. It is also appropriate for recurring activities where the total time to perform a fixed number of executions is important, such as a countdown timer that ticks once every second for ten seconds. Finally, fixed-rate execution is appropriate for scheduling multiple repeating timer tasks that must remain synchronized with respect to one another.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cancel()",
    "name": "cancel",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "cancel()",
      "comment": "Terminates this timer, discarding any currently scheduled tasks. Does not interfere with a currently executing task (if it exists). Once a timer has been terminated, its execution thread terminates gracefully, and no more tasks may be scheduled on it. Note that calling this method from within the run method of a timer task that was invoked by this timer absolutely guarantees that the ongoing task execution is the last task execution that will ever be performed by this timer. This method may be called repeatedly; the second and subsequent calls have no effect.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "purge()",
    "name": "purge",
    "containingClass": {
      "qualifiedName": "java.util.Timer",
      "name": "Timer",
      "isArray": false
    },
    "targetClass": "java.util.Timer",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "purge()",
      "comment": "Removes all cancelled tasks from this timer's task queue. Calling this method has no effect on the behavior of the timer, but eliminates the references to the cancelled tasks from the queue. If there are no external references to these tasks, they become eligible for garbage collection. Most programs will have no need to call this method. It is designed for use by the rare application that cancels a large number of tasks. Calling this method trades time for space: the runtime of the method may be proportional to n + c log n, where n is the number of tasks in the queue and c is the number of cancelled tasks. Note that it is permissible to call this method from within a a task scheduled on this timer.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]