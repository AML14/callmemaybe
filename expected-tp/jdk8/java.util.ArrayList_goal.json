[
  {
    "signature": "java.util.ArrayList(int initialCapacity)",
    "name": "java.util.ArrayList",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      }
    ],
    "protocol": {
      "member": "java.util.ArrayList(int initialCapacity)",
      "comment": "Constructs an empty list with the specified initial capacity.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.ArrayList()",
    "name": "java.util.ArrayList",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.ArrayList()",
      "comment": "Constructs an empty list with an initial capacity of ten.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.ArrayList(java.util.Collection<? extends E> c)",
    "name": "java.util.ArrayList",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "java.util.ArrayList(java.util.Collection<? extends E> c)",
      "comment": "Constructs a list containing the elements of the specified collection, in the order they are returned by the collection's iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trimToSize()",
    "name": "trimToSize",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "trimToSize()",
      "comment": "Trims the capacity of this ArrayList instance to be the list's current size. An application can use this operation to minimize the storage of an ArrayList instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ensureCapacity(int minCapacity)",
    "name": "ensureCapacity",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minCapacity"
      }
    ],
    "protocol": {
      "member": "ensureCapacity(int minCapacity)",
      "comment": "Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of elements in this list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isEmpty()",
      "comment": "Returns true if this list contains no elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object o)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "contains(java.lang.Object o)",
      "comment": "Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(java.lang.Object o)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "indexOf(java.lang.Object o)",
      "comment": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index i such that (o==null&nbsp;?&nbsp;method_0==null&nbsp;:&nbsp;omethod_2(method_0)), or -1 if there is no such index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastIndexOf(java.lang.Object o)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "lastIndexOf(java.lang.Object o)",
      "comment": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index i such that (o==null&nbsp;?&nbsp;method_0==null&nbsp;:&nbsp;omethod_2(method_0)), or -1 if there is no such index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "Returns a shallow copy of this ArrayList instance. (The elements themselves are not copied.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "toArray()",
      "comment": "Returns an array containing all of the elements in this list in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this list. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(T[] a)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "a"
      }
    ],
    "protocol": {
      "member": "toArray(T[] a)",
      "comment": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the list fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list. If the list fits in the specified array with room to spare (imethod_0., the array has more elements than the list), the element in the array immediately following the end of the collection is set to null. (This is useful in determining the length of the list only if the caller knows that the list does not contain any null elements.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "elementData(int index)",
    "name": "elementData",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "elementData(int index)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(int index)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "get(int index)",
      "comment": "Returns the element at the specified position in this list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(int index, E element)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "set(int index, E element)",
      "comment": "Replaces the element at the specified position in this list with the specified element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Appends the specified element to the end of this list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(int index, E element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "add(int index, E element)",
      "comment": "Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(int index)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "remove(int index)",
      "comment": "Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts one from their indices).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object o)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "remove(java.lang.Object o)",
      "comment": "Removes the first occurrence of the specified element from this list, if it is present. If the list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that (o==null&nbsp;?&nbsp;method_0==null&nbsp;:&nbsp;omethod_2(method_0)) (if such an element exists). Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Removes all of the elements from this list. The list will be empty after this call returns.",
      "kind": "FreeText",
      "condition": "receiverObjectID.isEmpty()<-receiverObjectID.clear()"
    }
  },
  {
    "signature": "addAll(java.util.Collection<? extends E> c)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "addAll(java.util.Collection<? extends E> c)",
      "comment": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this list, and this list is nonempty.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAll(int index, java.util.Collection<? extends E> c)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "addAll(int index, java.util.Collection<? extends E> c)",
      "comment": "Inserts all of the elements in the specified collection into this list, starting at the specified position. Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in the list in the order that they are returned by the specified collection's iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeRange(int fromIndex, int toIndex)",
    "name": "removeRange",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "fromIndex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "toIndex"
      }
    ],
    "protocol": {
      "member": "removeRange(int fromIndex, int toIndex)",
      "comment": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAll(java.util.Collection<?> c)",
    "name": "removeAll",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "removeAll(java.util.Collection<?> c)",
      "comment": "Removes from this list all of its elements that are contained in the specified collection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "retainAll(java.util.Collection<?> c)",
    "name": "retainAll",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "retainAll(java.util.Collection<?> c)",
      "comment": "Retains only the elements in this list that are contained in the specified collection. In other words, removes from this list all of its elements that are not contained in the specified collection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listIterator(int index)",
    "name": "listIterator",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ListIterator<E>",
      "name": "java.util.ListIterator<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "listIterator(int index)",
      "comment": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to method_0 next. An initial call to method_1 previous would return the element with the specified index minus one. The returned list iterator is <i>fail-fast</i>.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listIterator()",
    "name": "listIterator",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ListIterator<E>",
      "name": "java.util.ListIterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listIterator()",
      "comment": "Returns a list iterator over the elements in this list (in proper sequence). The returned list iterator is <i>fail-fast</i>.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this list in proper sequence. The returned iterator is <i>fail-fast</i>.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subList(int fromIndex, int toIndex)",
    "name": "subList",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<E>",
      "name": "java.util.List<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "fromIndex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "toIndex"
      }
    ],
    "protocol": {
      "member": "subList(int fromIndex, int toIndex)",
      "comment": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations. This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list:  method_0method_1;  Similar idioms may be constructed for method_2 and method_3, and all of the algorithms in the Collections class can be applied to a subList. The semantics of the list returned by this method become undefined if the backing list (imethod_8., this list) is structurally modified in any way other than via the returned list. (Structural modifications are those that change the size of this list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subListRangeCheck(int fromIndex, int toIndex, int size)",
    "name": "subListRangeCheck",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "fromIndex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "toIndex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      }
    ],
    "protocol": {
      "member": "subListRangeCheck(int fromIndex, int toIndex, int size)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEach(java.util.function.Consumer<? super E> action)",
    "name": "forEach",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Consumer",
          "name": "Consumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "forEach(java.util.function.Consumer<? super E> action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<E>",
      "name": "java.util.Spliterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "spliterator()",
      "comment": "Creates a <a href=\"method_0method_1\">late-binding</a> and fail-fast Spliterator over the elements in this list. The Spliterator reports method_2, method_3, and method_4. Overriding implementations should document the reporting of additional characteristic values.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeIf(java.util.function.Predicate<? super E> filter)",
    "name": "removeIf",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "filter"
      }
    ],
    "protocol": {
      "member": "removeIf(java.util.function.Predicate<? super E> filter)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceAll(java.util.function.UnaryOperator<E> operator)",
    "name": "replaceAll",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.UnaryOperator",
          "name": "UnaryOperator",
          "isArray": false
        },
        "name": "operator"
      }
    ],
    "protocol": {
      "member": "replaceAll(java.util.function.UnaryOperator<E> operator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sort(java.util.Comparator<? super E> c)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.ArrayList",
      "name": "ArrayList",
      "isArray": false
    },
    "targetClass": "java.util.ArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "sort(java.util.Comparator<? super E> c)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]