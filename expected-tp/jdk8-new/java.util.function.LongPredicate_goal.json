[
  {
    "signature": "test(long value)",
    "name": "test",
    "containingClass": {
      "qualifiedName": "java.util.function.LongPredicate",
      "name": "LongPredicate",
      "isArray": false
    },
    "targetClass": "java.util.function.LongPredicate",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "test(long value)",
      "comment": "Evaluates this predicate on the given argument.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "and(java.util.function.LongPredicate other)",
    "name": "and",
    "containingClass": {
      "qualifiedName": "java.util.function.LongPredicate",
      "name": "LongPredicate",
      "isArray": false
    },
    "targetClass": "java.util.function.LongPredicate",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.function.LongPredicate",
      "name": "java.util.function.LongPredicate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.LongPredicate",
          "name": "LongPredicate",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "protocol": {
      "member": "and(java.util.function.LongPredicate other)",
      "comment": "Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another. When evaluating the composed predicate, if this predicate is false, then the other predicate is not evaluated. Any exceptions thrown during evaluation of either predicate are relayed to the caller; if evaluation of this predicate throws an exception, the other predicate will not be evaluated.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "negate()",
    "name": "negate",
    "containingClass": {
      "qualifiedName": "java.util.function.LongPredicate",
      "name": "LongPredicate",
      "isArray": false
    },
    "targetClass": "java.util.function.LongPredicate",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.function.LongPredicate",
      "name": "java.util.function.LongPredicate",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "negate()",
      "comment": "Returns a predicate that represents the logical negation of this predicate.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "or(java.util.function.LongPredicate other)",
    "name": "or",
    "containingClass": {
      "qualifiedName": "java.util.function.LongPredicate",
      "name": "LongPredicate",
      "isArray": false
    },
    "targetClass": "java.util.function.LongPredicate",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.function.LongPredicate",
      "name": "java.util.function.LongPredicate",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.LongPredicate",
          "name": "LongPredicate",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "protocol": {
      "member": "or(java.util.function.LongPredicate other)",
      "comment": "Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another. When evaluating the composed predicate, if this predicate is true, then the other predicate is not evaluated. Any exceptions thrown during evaluation of either predicate are relayed to the caller; if evaluation of this predicate throws an exception, the other predicate will not be evaluated.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]