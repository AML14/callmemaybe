[
  {
    "signature": "org.graphstream.stream.file.FileSourceBase()",
    "name": "org.graphstream.stream.file.FileSourceBase",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "org.graphstream.stream.file.FileSourceBase()",
      "comment": "No-op constructor.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.graphstream.stream.file.FileSourceBase(boolean eol_is_significant)",
    "name": "org.graphstream.stream.file.FileSourceBase",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "eol_is_significant"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.file.FileSourceBase(boolean eol_is_significant)",
      "comment": "Setup the reader End-Of-Line policy.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "org.graphstream.stream.file.FileSourceBase(boolean eol_is_significant, int commentChar, int quoteChar)",
    "name": "org.graphstream.stream.file.FileSourceBase",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "eol_is_significant"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "commentChar"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "quoteChar"
      }
    ],
    "protocol": {
      "member": "org.graphstream.stream.file.FileSourceBase(boolean eol_is_significant, int commentChar, int quoteChar)",
      "comment": "Setup the reader End-Of-Line policy and specific comment and quote characters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readAll(java.lang.String filename)",
    "name": "readAll",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "filename"
      }
    ],
    "protocol": {
      "member": "readAll(java.lang.String filename)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readAll(java.net.URL url)",
    "name": "readAll",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.net.URL",
          "name": "URL",
          "isArray": false
        },
        "name": "url"
      }
    ],
    "protocol": {
      "member": "readAll(java.net.URL url)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readAll(java.io.InputStream stream)",
    "name": "readAll",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "readAll(java.io.InputStream stream)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "readAll(java.io.Reader reader)",
    "name": "readAll",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "reader"
      }
    ],
    "protocol": {
      "member": "readAll(java.io.Reader reader)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "begin(java.lang.String filename)",
    "name": "begin",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "filename"
      }
    ],
    "protocol": {
      "member": "begin(java.lang.String filename)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "begin(java.io.InputStream stream)",
    "name": "begin",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "begin(java.io.InputStream stream)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "begin(java.net.URL url)",
    "name": "begin",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.net.URL",
          "name": "URL",
          "isArray": false
        },
        "name": "url"
      }
    ],
    "protocol": {
      "member": "begin(java.net.URL url)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "begin(java.io.Reader reader)",
    "name": "begin",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "reader"
      }
    ],
    "protocol": {
      "member": "begin(java.io.Reader reader)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextEvents()",
    "name": "nextEvents",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextEvents()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "end()",
    "name": "end",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "end()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAttributeClass(java.lang.String attribute, java.lang.String attribute_class)",
    "name": "addAttributeClass",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "attribute"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "attribute_class"
      }
    ],
    "protocol": {
      "member": "addAttributeClass(java.lang.String attribute, java.lang.String attribute_class)",
      "comment": "Declare that when attribute is found, the corresponding attribute_class must be instantiated and inserted in the current element being parsed. This is equivalent to the \"map\" keyword of the GML file. An attribute appears in a GML file as a name followed by a \"[...]\" block. The contents of this block defines sub-attributes that must map to public fields of the attribute. Only attributes that are not handled specifically by this parser can be added.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "include(java.lang.String file)",
    "name": "include",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "file"
      }
    ],
    "protocol": {
      "member": "include(java.lang.String file)",
      "comment": "Include the content of a file. This pushes a new tokenizer on the input stack, calls the method_0 method (that must be implemented to read the include contents) and when finished pops the tokenizer of the input stack.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "continueParsingInInclude()",
    "name": "continueParsingInInclude",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "continueParsingInInclude()",
      "comment": "Must be implemented to read the content of an include. The current tokenizer will be set to the included file. When this method returns, the include file will be closed an parsing will continue where it was before inclusion.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pushTokenizer(java.lang.String file)",
    "name": "pushTokenizer",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "file"
      }
    ],
    "protocol": {
      "member": "pushTokenizer(java.lang.String file)",
      "comment": "Push a tokenizer created from a file name on the file stack and make it current.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createReaderFrom(java.lang.String file)",
    "name": "createReaderFrom",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.io.Reader",
      "name": "java.io.Reader",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "file"
      }
    ],
    "protocol": {
      "member": "createReaderFrom(java.lang.String file)",
      "comment": "Create a reader for by the tokenizer.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createReaderFrom(java.io.InputStream stream)",
    "name": "createReaderFrom",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.io.Reader",
      "name": "java.io.Reader",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "createReaderFrom(java.io.InputStream stream)",
      "comment": "Create a stream that can be read by the tokenizer.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pushTokenizer(java.net.URL url)",
    "name": "pushTokenizer",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.net.URL",
          "name": "URL",
          "isArray": false
        },
        "name": "url"
      }
    ],
    "protocol": {
      "member": "pushTokenizer(java.net.URL url)",
      "comment": "Push a tokenizer created from a stream on the file stack and make it current.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pushTokenizer(java.io.InputStream stream)",
    "name": "pushTokenizer",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      }
    ],
    "protocol": {
      "member": "pushTokenizer(java.io.InputStream stream)",
      "comment": "Push a tokenizer created from a stream on the file stack and make it current.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pushTokenizer(java.io.InputStream stream, java.lang.String name)",
    "name": "pushTokenizer",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "stream"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "name"
      }
    ],
    "protocol": {
      "member": "pushTokenizer(java.io.InputStream stream, java.lang.String name)",
      "comment": "Push a tokenizer created from a stream on the file stack and make it current.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pushTokenizer(java.io.Reader reader)",
    "name": "pushTokenizer",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.Reader",
          "name": "Reader",
          "isArray": false
        },
        "name": "reader"
      }
    ],
    "protocol": {
      "member": "pushTokenizer(java.io.Reader reader)",
      "comment": "Push a tokenizer created from a reader on the file stack and make it current.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "configureTokenizer(java.io.StreamTokenizer tok)",
    "name": "configureTokenizer",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.StreamTokenizer",
          "name": "StreamTokenizer",
          "isArray": false
        },
        "name": "tok"
      }
    ],
    "protocol": {
      "member": "configureTokenizer(java.io.StreamTokenizer tok)",
      "comment": "Method to override to configure the tokenizer behaviour. It is called each time a tokenizer is created (for the parsed file and all included files).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "popTokenizer()",
    "name": "popTokenizer",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "popTokenizer()",
      "comment": "Remove the current tokenizer from the stack and restore the previous one (if any).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pushBack()",
    "name": "pushBack",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pushBack()",
      "comment": "Push back the last read thing, so that it can be read anew. This allows to explore one token ahead, and if not corresponding to what is expected, go back.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatEof()",
    "name": "eatEof",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "eatEof()",
      "comment": "Read EOF or report garbage at end of file.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatEol()",
    "name": "eatEol",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "eatEol()",
      "comment": "Read EOL.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatEolOrEof()",
    "name": "eatEolOrEof",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "eatEolOrEof()",
      "comment": "Read EOL or EOF.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatWord(java.lang.String word)",
    "name": "eatWord",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "word"
      }
    ],
    "protocol": {
      "member": "eatWord(java.lang.String word)",
      "comment": "Read an expected word token or generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatWords(java.lang.String... words)",
    "name": "eatWords",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "words"
      }
    ],
    "protocol": {
      "member": "eatWords(java.lang.String... words)",
      "comment": "Read an expected word among the given word list or generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatOneOfTwoWords(java.lang.String word1, java.lang.String word2)",
    "name": "eatOneOfTwoWords",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "word1"
      },
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "word2"
      }
    ],
    "protocol": {
      "member": "eatOneOfTwoWords(java.lang.String word1, java.lang.String word2)",
      "comment": "Eat either a word or another, and return the eated one.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatSymbol(char symbol)",
    "name": "eatSymbol",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "symbol"
      }
    ],
    "protocol": {
      "member": "eatSymbol(char symbol)",
      "comment": "Eat the expected symbol or generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatSymbols(java.lang.String symbols)",
    "name": "eatSymbols",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "symbols"
      }
    ],
    "protocol": {
      "member": "eatSymbols(java.lang.String symbols)",
      "comment": "Eat one of the list of expected symbols or generate a parse error none of symbols can be found.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatWordOrPushbak(java.lang.String word)",
    "name": "eatWordOrPushbak",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "word"
      }
    ],
    "protocol": {
      "member": "eatWordOrPushbak(java.lang.String word)",
      "comment": "Eat the expected word or push back what was read so that it can be read anew.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatSymbolOrPushback(char symbol)",
    "name": "eatSymbolOrPushback",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "char",
          "name": "char",
          "isArray": false
        },
        "name": "symbol"
      }
    ],
    "protocol": {
      "member": "eatSymbolOrPushback(char symbol)",
      "comment": "Eat the expected symbol or push back what was read so that it can be read anew.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatAllUntilEol()",
    "name": "eatAllUntilEol",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "eatAllUntilEol()",
      "comment": "Eat all until an EOL is found. The EOL is also eaten. This works only if EOL is significant (else it does nothing).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "eatAllEols()",
    "name": "eatAllEols",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "eatAllEols()",
      "comment": "Eat all availables EOLs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWord()",
    "name": "getWord",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWord()",
      "comment": "Read a word or generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSymbol()",
    "name": "getSymbol",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char",
      "name": "char",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSymbol()",
      "comment": "Get a symbol.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getSymbolOrPushback()",
    "name": "getSymbolOrPushback",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "char",
      "name": "char",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getSymbolOrPushback()",
      "comment": "Get a symbol or push back what was read so that it can be read anew. If no symbol is found, 0 is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getString()",
    "name": "getString",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getString()",
      "comment": "Read a string constant (between quotes) or generate a parse error. Return the content of the string without the quotes.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWordOrNumber()",
    "name": "getWordOrNumber",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWordOrNumber()",
      "comment": "Read a word or number or generate a parse error. If it is a number it is converted to a string before being returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStringOrNumber()",
    "name": "getStringOrNumber",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getStringOrNumber()",
      "comment": "Read a string or number or generate a parse error. If it is a number it is converted to a string before being returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStringOrWordOrNumberOrPushback()",
    "name": "getStringOrWordOrNumberOrPushback",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getStringOrWordOrNumberOrPushback()",
      "comment": "Read a string or number or pushback and return null. If it is a number it is converted to a string before being returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStringOrWordOrNumber()",
    "name": "getStringOrWordOrNumber",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getStringOrWordOrNumber()",
      "comment": "Read a string or number or generate a parse error. If it is a number it is converted to a string before being returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStringOrWordOrNumberO()",
    "name": "getStringOrWordOrNumberO",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getStringOrWordOrNumberO()",
      "comment": "Read a string or number or generate a parse error. The returned value is converted to a Number of a String depending on its type.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getStringOrWordOrSymbolOrNumberO()",
    "name": "getStringOrWordOrSymbolOrNumberO",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getStringOrWordOrSymbolOrNumberO()",
      "comment": "Read a string or number or generate a parse error. The returned value is converted to a Number of a String depending on its type.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWordOrString()",
    "name": "getWordOrString",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWordOrString()",
      "comment": "Read a word or string or generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWordOrSymbol()",
    "name": "getWordOrSymbol",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWordOrSymbol()",
      "comment": "Read a word or symbol or generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWordOrSymbolOrPushback()",
    "name": "getWordOrSymbolOrPushback",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWordOrSymbolOrPushback()",
      "comment": "Read a word or symbol or push back the read thing so that it is readable anew. In the second case, null is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWordOrSymbolOrString()",
    "name": "getWordOrSymbolOrString",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWordOrSymbolOrString()",
      "comment": "Read a word or symbol or string or generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAllExceptedEof()",
    "name": "getAllExceptedEof",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getAllExceptedEof()",
      "comment": "Read a word or symbol or string or number or generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWordOrSymbolOrEof()",
    "name": "getWordOrSymbolOrEof",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWordOrSymbolOrEof()",
      "comment": "Read a word, a symbol or EOF, or generate a parse error. If this is EOF, the string \"EOF\" is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWordOrSymbolOrStringOrEolOrEof()",
    "name": "getWordOrSymbolOrStringOrEolOrEof",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWordOrSymbolOrStringOrEolOrEof()",
      "comment": "Read a word or symbol or string or EOL/EOF or generate a parse error. If EOL is read the \"EOL\" string is returned. If EOF is read the \"EOF\" string is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWordOrNumberOrStringOrEolOrEof()",
    "name": "getWordOrNumberOrStringOrEolOrEof",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWordOrNumberOrStringOrEolOrEof()",
      "comment": "Read a word or number or string or EOL/EOF or generate a parse error. If EOL is read the \"EOL\" string is returned. If EOF is read the \"EOF\" string is returned. If a number is returned, it is converted to a string as follows: if it is an integer, only the integer part is converted to a string without dot or comma and no leading zeros. If it is a float the fractional part is also converted and the dot is used as separator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWordOrStringOrEolOrEof()",
    "name": "getWordOrStringOrEolOrEof",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWordOrStringOrEolOrEof()",
      "comment": "Read a word or string or EOL/EOF or generate a parse error. If EOL is read the \"EOL\" string is returned. If EOF is read the \"EOF\" string is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWordOrSymbolOrNumberOrStringOrEolOrEof()",
    "name": "getWordOrSymbolOrNumberOrStringOrEolOrEof",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWordOrSymbolOrNumberOrStringOrEolOrEof()",
      "comment": "Read a word or number or string or EOL/EOF or generate a parse error. If EOL is read the \"EOL\" string is returned. If EOF is read the \"EOF\" string is returned. If a number is returned, it is converted to a string as follows: if it is an integer, only the integer part is converted to a string without dot or comma and no leading zeros. If it is a float the fractional part is also converted and the dot is used as separator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNumber()",
    "name": "getNumber",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNumber()",
      "comment": "Read a number or generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNumberExp()",
    "name": "getNumberExp",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNumberExp()",
      "comment": "Read a number (possibly with an exponent) or generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "gotWhat(int token)",
    "name": "gotWhat",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "token"
      }
    ],
    "protocol": {
      "member": "gotWhat(int token)",
      "comment": "Return a string containing \"got \" then the content of the current token.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "parseError(java.lang.String message)",
    "name": "parseError",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "message"
      }
    ],
    "protocol": {
      "member": "parseError(java.lang.String message)",
      "comment": "Generate a parse error.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isTrue(java.lang.String string)",
    "name": "isTrue",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "protocol": {
      "member": "isTrue(java.lang.String string)",
      "comment": "True if the string represents a truth statement (\"1\", \"true\", \"yes\", \"on\").",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isFalse(java.lang.String string)",
    "name": "isFalse",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "protocol": {
      "member": "isFalse(java.lang.String string)",
      "comment": "True if the string represents a false statement (\"0\", \"false\", \"no\", \"off\").",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getBoolean(java.lang.String value)",
    "name": "getBoolean",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "getBoolean(java.lang.String value)",
      "comment": "Uses method_0 and method_1 to determine if value is a truth value and return the corresponding boolean.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getReal(java.lang.String value)",
    "name": "getReal",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "getReal(java.lang.String value)",
      "comment": "Try to transform value into a double.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getInteger(java.lang.String value)",
    "name": "getInteger",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "getInteger(java.lang.String value)",
      "comment": "Try to transform value into a long.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getPoint3(java.lang.String value)",
    "name": "getPoint3",
    "containingClass": {
      "qualifiedName": "org.graphstream.stream.file.FileSourceBase",
      "name": "FileSourceBase",
      "isArray": false
    },
    "targetClass": "org.graphstream.stream.file.FileSourceBase",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "org.graphstream.ui.geom.Point3",
      "name": "org.graphstream.ui.geom.Point3",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "getPoint3(java.lang.String value)",
      "comment": "Get a number triplet with numbers separated by comas and return a new point for it. For example \"0,1,2\".",
      "kind": "FreeText",
      "condition": ""
    }
  }
]