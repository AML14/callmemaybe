[
  {
    "signature": "java.util.SplittableRandom(long seed)",
    "name": "java.util.SplittableRandom",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "seed"
      }
    ],
    "protocol": {
      "member": "java.util.SplittableRandom(long seed)",
      "comment": "Creates a new SplittableRandom instance using the specified initial seed. SplittableRandom instances created with the same seed in the same program generate identical sequences of values.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.SplittableRandom()",
    "name": "java.util.SplittableRandom",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.SplittableRandom()",
      "comment": "Creates a new SplittableRandom instance that is likely to generate sequences of values that are statistically independent of those of any other instances in the current program; and may, and typically does, vary across program invocations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "internalNextLong(long origin, long bound)",
    "name": "internalNextLong",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "origin"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "bound"
      }
    ],
    "protocol": {
      "member": "internalNextLong(long origin, long bound)",
      "comment": "The form of nextLong used by LongStream Spliterators. If origin is greater than bound, acts as unbounded form of nextLong, else as bounded form.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "internalNextInt(int origin, int bound)",
    "name": "internalNextInt",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "origin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "bound"
      }
    ],
    "protocol": {
      "member": "internalNextInt(int origin, int bound)",
      "comment": "The form of nextInt used by IntStream Spliterators. Exactly the same as long version, except for types.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "internalNextDouble(double origin, double bound)",
    "name": "internalNextDouble",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "origin"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "bound"
      }
    ],
    "protocol": {
      "member": "internalNextDouble(double origin, double bound)",
      "comment": "The form of nextDouble used by DoubleStream Spliterators.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "split()",
    "name": "split",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "java.util.SplittableRandom",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "split()",
      "comment": "Constructs and returns a new SplittableRandom instance that shares no mutable state with this instance. However, with very high probability, the set of values collectively generated by the two objects has the same statistical properties as if the same quantity of values were generated by a single thread using a single SplittableRandom object. Either or both of the two objects may be further split using the method_0 method, and the same expected statistical properties apply to the entire set of generators constructed by such recursive splitting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextInt()",
    "name": "nextInt",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextInt()",
      "comment": "Returns a pseudorandom int value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextInt(int bound)",
    "name": "nextInt",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "bound"
      }
    ],
    "protocol": {
      "member": "nextInt(int bound)",
      "comment": "Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextInt(int origin, int bound)",
    "name": "nextInt",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "origin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "bound"
      }
    ],
    "protocol": {
      "member": "nextInt(int origin, int bound)",
      "comment": "Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextLong()",
    "name": "nextLong",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextLong()",
      "comment": "Returns a pseudorandom long value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextLong(long bound)",
    "name": "nextLong",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "bound"
      }
    ],
    "protocol": {
      "member": "nextLong(long bound)",
      "comment": "Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextLong(long origin, long bound)",
    "name": "nextLong",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "origin"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "bound"
      }
    ],
    "protocol": {
      "member": "nextLong(long origin, long bound)",
      "comment": "Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextDouble()",
    "name": "nextDouble",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextDouble()",
      "comment": "Returns a pseudorandom double value between zero (inclusive) and one (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextDouble(double bound)",
    "name": "nextDouble",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "bound"
      }
    ],
    "protocol": {
      "member": "nextDouble(double bound)",
      "comment": "Returns a pseudorandom double value between 0method_0 (inclusive) and the specified bound (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextDouble(double origin, double bound)",
    "name": "nextDouble",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "origin"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "bound"
      }
    ],
    "protocol": {
      "member": "nextDouble(double origin, double bound)",
      "comment": "Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nextBoolean()",
    "name": "nextBoolean",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nextBoolean()",
      "comment": "Returns a pseudorandom boolean value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ints(long streamSize)",
    "name": "ints",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "streamSize"
      }
    ],
    "protocol": {
      "member": "ints(long streamSize)",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ints()",
    "name": "ints",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "ints()",
      "comment": "Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it. @implNote This method is implemented to be equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",
    "name": "ints",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "streamSize"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "randomNumberOrigin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "randomNumberBound"
      }
    ],
    "protocol": {
      "member": "ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ints(int randomNumberOrigin, int randomNumberBound)",
    "name": "ints",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "randomNumberOrigin"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "randomNumberBound"
      }
    ],
    "protocol": {
      "member": "ints(int randomNumberOrigin, int randomNumberBound)",
      "comment": "Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive). @implNote This method is implemented to be equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "longs(long streamSize)",
    "name": "longs",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.LongStream",
      "name": "java.util.stream.LongStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "streamSize"
      }
    ],
    "protocol": {
      "member": "longs(long streamSize)",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "longs()",
    "name": "longs",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.LongStream",
      "name": "java.util.stream.LongStream",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "longs()",
      "comment": "Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it. @implNote This method is implemented to be equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "longs(long streamSize, long randomNumberOrigin, long randomNumberBound)",
    "name": "longs",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.LongStream",
      "name": "java.util.stream.LongStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "streamSize"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "randomNumberOrigin"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "randomNumberBound"
      }
    ],
    "protocol": {
      "member": "longs(long streamSize, long randomNumberOrigin, long randomNumberBound)",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "longs(long randomNumberOrigin, long randomNumberBound)",
    "name": "longs",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.LongStream",
      "name": "java.util.stream.LongStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "randomNumberOrigin"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "randomNumberBound"
      }
    ],
    "protocol": {
      "member": "longs(long randomNumberOrigin, long randomNumberBound)",
      "comment": "Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive). @implNote This method is implemented to be equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doubles(long streamSize)",
    "name": "doubles",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.DoubleStream",
      "name": "java.util.stream.DoubleStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "streamSize"
      }
    ],
    "protocol": {
      "member": "doubles(long streamSize)",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doubles()",
    "name": "doubles",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.DoubleStream",
      "name": "java.util.stream.DoubleStream",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "doubles()",
      "comment": "Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive). @implNote This method is implemented to be equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",
    "name": "doubles",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.DoubleStream",
      "name": "java.util.stream.DoubleStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "streamSize"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "randomNumberOrigin"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "randomNumberBound"
      }
    ],
    "protocol": {
      "member": "doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "doubles(double randomNumberOrigin, double randomNumberBound)",
    "name": "doubles",
    "containingClass": {
      "qualifiedName": "java.util.SplittableRandom",
      "name": "SplittableRandom",
      "isArray": false
    },
    "targetClass": "java.util.SplittableRandom",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.DoubleStream",
      "name": "java.util.stream.DoubleStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "randomNumberOrigin"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "randomNumberBound"
      }
    ],
    "protocol": {
      "member": "doubles(double randomNumberOrigin, double randomNumberBound)",
      "comment": "Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive). @implNote This method is implemented to be equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]