[
  {
    "signature": "sort(int[] a, int left, int right, int[] work, int workBase, int workLen)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.DualPivotQuicksort",
      "name": "DualPivotQuicksort",
      "isArray": false
    },
    "targetClass": "java.util.DualPivotQuicksort",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "left"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "right"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "work"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workBase"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workLen"
      }
    ],
    "protocol": {
      "member": "sort(int[] a, int left, int right, int[] work, int workBase, int workLen)",
      "comment": "Sorts the specified range of the array using the given workspace array slice if possible for merging",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sort(long[] a, int left, int right, long[] work, int workBase, int workLen)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.DualPivotQuicksort",
      "name": "DualPivotQuicksort",
      "isArray": false
    },
    "targetClass": "java.util.DualPivotQuicksort",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "left"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "right"
      },
      {
        "type": {
          "qualifiedName": "[J",
          "name": "long[]",
          "isArray": true
        },
        "name": "work"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workBase"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workLen"
      }
    ],
    "protocol": {
      "member": "sort(long[] a, int left, int right, long[] work, int workBase, int workLen)",
      "comment": "Sorts the specified range of the array using the given workspace array slice if possible for merging",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sort(short[] a, int left, int right, short[] work, int workBase, int workLen)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.DualPivotQuicksort",
      "name": "DualPivotQuicksort",
      "isArray": false
    },
    "targetClass": "java.util.DualPivotQuicksort",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "left"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "right"
      },
      {
        "type": {
          "qualifiedName": "[S",
          "name": "short[]",
          "isArray": true
        },
        "name": "work"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workBase"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workLen"
      }
    ],
    "protocol": {
      "member": "sort(short[] a, int left, int right, short[] work, int workBase, int workLen)",
      "comment": "Sorts the specified range of the array using the given workspace array slice if possible for merging",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sort(char[] a, int left, int right, char[] work, int workBase, int workLen)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.DualPivotQuicksort",
      "name": "DualPivotQuicksort",
      "isArray": false
    },
    "targetClass": "java.util.DualPivotQuicksort",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "left"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "right"
      },
      {
        "type": {
          "qualifiedName": "[C",
          "name": "char[]",
          "isArray": true
        },
        "name": "work"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workBase"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workLen"
      }
    ],
    "protocol": {
      "member": "sort(char[] a, int left, int right, char[] work, int workBase, int workLen)",
      "comment": "Sorts the specified range of the array using the given workspace array slice if possible for merging",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sort(byte[] a, int left, int right)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.DualPivotQuicksort",
      "name": "DualPivotQuicksort",
      "isArray": false
    },
    "targetClass": "java.util.DualPivotQuicksort",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "left"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "right"
      }
    ],
    "protocol": {
      "member": "sort(byte[] a, int left, int right)",
      "comment": "Sorts the specified range of the array.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sort(float[] a, int left, int right, float[] work, int workBase, int workLen)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.DualPivotQuicksort",
      "name": "DualPivotQuicksort",
      "isArray": false
    },
    "targetClass": "java.util.DualPivotQuicksort",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "left"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "right"
      },
      {
        "type": {
          "qualifiedName": "[F",
          "name": "float[]",
          "isArray": true
        },
        "name": "work"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workBase"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workLen"
      }
    ],
    "protocol": {
      "member": "sort(float[] a, int left, int right, float[] work, int workBase, int workLen)",
      "comment": "Sorts the specified range of the array using the given workspace array slice if possible for merging",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sort(double[] a, int left, int right, double[] work, int workBase, int workLen)",
    "name": "sort",
    "containingClass": {
      "qualifiedName": "java.util.DualPivotQuicksort",
      "name": "DualPivotQuicksort",
      "isArray": false
    },
    "targetClass": "java.util.DualPivotQuicksort",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "left"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "right"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "work"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workBase"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "workLen"
      }
    ],
    "protocol": {
      "member": "sort(double[] a, int left, int right, double[] work, int workBase, int workLen)",
      "comment": "Sorts the specified range of the array using the given workspace array slice if possible for merging",
      "kind": "FreeText",
      "condition": ""
    }
  }
]