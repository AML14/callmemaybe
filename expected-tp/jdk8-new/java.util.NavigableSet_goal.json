[
  {
    "signature": "lower(E e)",
    "name": "lower",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "lower(E e)",
      "comment": "Returns the greatest element in this set strictly less than the given element, or null if there is no such element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "floor(E e)",
    "name": "floor",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "floor(E e)",
      "comment": "Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ceiling(E e)",
    "name": "ceiling",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "ceiling(E e)",
      "comment": "Returns the least element in this set greater than or equal to the given element, or null if there is no such element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "higher(E e)",
    "name": "higher",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "higher(E e)",
      "comment": "Returns the least element in this set strictly greater than the given element, or null if there is no such element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollFirst()",
    "name": "pollFirst",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pollFirst()",
      "comment": "Retrieves and removes the first (lowest) element, or returns null if this set is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollLast()",
    "name": "pollLast",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "pollLast()",
      "comment": "Retrieves and removes the last (highest) element, or returns null if this set is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this set, in ascending order.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingSet()",
    "name": "descendingSet",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "descendingSet()",
      "comment": "Returns a reverse order view of the elements contained in this set. The descending set is backed by this set, so changes to the set are reflected in the descending set, and vice-versa. If either set is modified while an iteration over either set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The returned set has an ordering equivalent to method_0 method_5(method_1. The expression method_2method_3 returns a view of s essentially equivalent to s.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingIterator()",
    "name": "descendingIterator",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "descendingIterator()",
      "comment": "Returns an iterator over the elements in this set, in descending order. Equivalent in effect to method_0method_1.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",
    "name": "subSet",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "fromInclusive"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "toInclusive"
      }
    ],
    "protocol": {
      "member": "subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",
      "comment": "Returns a view of the portion of this set whose elements range from fromElement to toElement. If fromElement and toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headSet(E toElement, boolean inclusive)",
    "name": "headSet",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "inclusive"
      }
    ],
    "protocol": {
      "member": "headSet(E toElement, boolean inclusive)",
      "comment": "Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailSet(E fromElement, boolean inclusive)",
    "name": "tailSet",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.NavigableSet<E>",
      "name": "java.util.NavigableSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "inclusive"
      }
    ],
    "protocol": {
      "member": "tailSet(E fromElement, boolean inclusive)",
      "comment": "Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subSet(E fromElement, E toElement)",
    "name": "subSet",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      }
    ],
    "protocol": {
      "member": "subSet(E fromElement, E toElement)",
      "comment": "{@inheritDoc} Equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headSet(E toElement)",
    "name": "headSet",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toElement"
      }
    ],
    "protocol": {
      "member": "headSet(E toElement)",
      "comment": "{@inheritDoc} Equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailSet(E fromElement)",
    "name": "tailSet",
    "containingClass": {
      "qualifiedName": "java.util.NavigableSet",
      "name": "NavigableSet",
      "isArray": false
    },
    "targetClass": "java.util.NavigableSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedSet<E>",
      "name": "java.util.SortedSet<E>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromElement"
      }
    ],
    "protocol": {
      "member": "tailSet(E fromElement)",
      "comment": "{@inheritDoc} Equivalent to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]