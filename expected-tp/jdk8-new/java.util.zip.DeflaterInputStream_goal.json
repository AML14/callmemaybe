[
  {
    "signature": "java.util.zip.DeflaterInputStream(java.io.InputStream in)",
    "name": "java.util.zip.DeflaterInputStream",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      }
    ],
    "protocol": {
      "member": "java.util.zip.DeflaterInputStream(java.io.InputStream in)",
      "comment": "Creates a new input stream with a default compressor and buffer size.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.zip.DeflaterInputStream(java.io.InputStream in, java.util.zip.Deflater defl)",
    "name": "java.util.zip.DeflaterInputStream",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "java.util.zip.Deflater",
          "name": "Deflater",
          "isArray": false
        },
        "name": "defl"
      }
    ],
    "protocol": {
      "member": "java.util.zip.DeflaterInputStream(java.io.InputStream in, java.util.zip.Deflater defl)",
      "comment": "Creates a new input stream with the specified compressor and a default buffer size.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.zip.DeflaterInputStream(java.io.InputStream in, java.util.zip.Deflater defl, int bufLen)",
    "name": "java.util.zip.DeflaterInputStream",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.io.InputStream",
          "name": "InputStream",
          "isArray": false
        },
        "name": "in"
      },
      {
        "type": {
          "qualifiedName": "java.util.zip.Deflater",
          "name": "Deflater",
          "isArray": false
        },
        "name": "defl"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "bufLen"
      }
    ],
    "protocol": {
      "member": "java.util.zip.DeflaterInputStream(java.io.InputStream in, java.util.zip.Deflater defl, int bufLen)",
      "comment": "Creates a new input stream with the specified compressor and buffer size.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "close()",
    "name": "close",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "close()",
      "comment": "Closes this input stream and its underlying input stream, discarding any pending uncompressed data.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "read()",
    "name": "read",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "read()",
      "comment": "Reads a single byte of compressed data from the input stream. This method will block until some input can be read and compressed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "read(byte[] b, int off, int len)",
    "name": "read",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[B",
          "name": "byte[]",
          "isArray": true
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "off"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "len"
      }
    ],
    "protocol": {
      "member": "read(byte[] b, int off, int len)",
      "comment": "Reads compressed data into a byte array. This method will block until some input can be read and compressed.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "skip(long n)",
    "name": "skip",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "protocol": {
      "member": "skip(long n)",
      "comment": "Skips over and discards data from the input stream. This method may block until the specified number of bytes are read and skipped. Note: While n is given as a long, the maximum number of bytes which can be skipped is method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "available()",
    "name": "available",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "available()",
      "comment": "Returns 0 after EOF has been reached, otherwise always return 1.  Programs should not count on this method to return the actual number of bytes that could be read without blocking",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "markSupported()",
    "name": "markSupported",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "markSupported()",
      "comment": "Always returns false because this input stream does not support the method_2 method_0 and method_3 method_1 methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mark(int limit)",
    "name": "mark",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "limit"
      }
    ],
    "protocol": {
      "member": "mark(int limit)",
      "comment": "This operation is not supported.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reset()",
    "name": "reset",
    "containingClass": {
      "qualifiedName": "java.util.zip.DeflaterInputStream",
      "name": "DeflaterInputStream",
      "isArray": false
    },
    "targetClass": "java.util.zip.DeflaterInputStream",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "reset()",
      "comment": "This operation is not supported.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]