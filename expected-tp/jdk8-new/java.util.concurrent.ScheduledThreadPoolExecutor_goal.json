[
  {
    "signature": "java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize)",
    "name": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "corePoolSize"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize)",
      "comment": "Creates a new ScheduledThreadPoolExecutor with the given core pool size.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize, java.util.concurrent.ThreadFactory threadFactory)",
    "name": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "corePoolSize"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.ThreadFactory",
          "name": "ThreadFactory",
          "isArray": false
        },
        "name": "threadFactory"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize, java.util.concurrent.ThreadFactory threadFactory)",
      "comment": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize, java.util.concurrent.RejectedExecutionHandler handler)",
    "name": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "corePoolSize"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.RejectedExecutionHandler",
          "name": "RejectedExecutionHandler",
          "isArray": false
        },
        "name": "handler"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize, java.util.concurrent.RejectedExecutionHandler handler)",
      "comment": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize, java.util.concurrent.ThreadFactory threadFactory, java.util.concurrent.RejectedExecutionHandler handler)",
    "name": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "corePoolSize"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.ThreadFactory",
          "name": "ThreadFactory",
          "isArray": false
        },
        "name": "threadFactory"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.RejectedExecutionHandler",
          "name": "RejectedExecutionHandler",
          "isArray": false
        },
        "name": "handler"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.ScheduledThreadPoolExecutor(int corePoolSize, java.util.concurrent.ThreadFactory threadFactory, java.util.concurrent.RejectedExecutionHandler handler)",
      "comment": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "now()",
    "name": "now",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "now()",
      "comment": "Returns current nanosecond time.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "canRunInCurrentRunState(boolean periodic)",
    "name": "canRunInCurrentRunState",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "periodic"
      }
    ],
    "protocol": {
      "member": "canRunInCurrentRunState(boolean periodic)",
      "comment": "Returns true if can run a task given current run state and run-after-shutdown parameters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reExecutePeriodic(java.util.concurrent.RunnableScheduledFuture<?> task)",
    "name": "reExecutePeriodic",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.RunnableScheduledFuture",
          "name": "RunnableScheduledFuture",
          "isArray": false
        },
        "name": "task"
      }
    ],
    "protocol": {
      "member": "reExecutePeriodic(java.util.concurrent.RunnableScheduledFuture<?> task)",
      "comment": "Requeues a periodic task unless current run state precludes it. Same idea as delayedExecute except drops task rather than rejecting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "onShutdown()",
    "name": "onShutdown",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "onShutdown()",
      "comment": "Cancels and clears the queue of all tasks that should not be run due to shutdown policy. Invoked within supermethod_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "decorateTask(java.lang.Runnable runnable, java.util.concurrent.RunnableScheduledFuture<V> task)",
    "name": "decorateTask",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.RunnableScheduledFuture<V>",
      "name": "java.util.concurrent.RunnableScheduledFuture<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "runnable"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.RunnableScheduledFuture",
          "name": "RunnableScheduledFuture",
          "isArray": false
        },
        "name": "task"
      }
    ],
    "protocol": {
      "member": "decorateTask(java.lang.Runnable runnable, java.util.concurrent.RunnableScheduledFuture<V> task)",
      "comment": "Modifies or replaces the task used to execute a runnable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "decorateTask(java.util.concurrent.Callable<V> callable, java.util.concurrent.RunnableScheduledFuture<V> task)",
    "name": "decorateTask",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.RunnableScheduledFuture<V>",
      "name": "java.util.concurrent.RunnableScheduledFuture<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Callable",
          "name": "Callable",
          "isArray": false
        },
        "name": "callable"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.RunnableScheduledFuture",
          "name": "RunnableScheduledFuture",
          "isArray": false
        },
        "name": "task"
      }
    ],
    "protocol": {
      "member": "decorateTask(java.util.concurrent.Callable<V> callable, java.util.concurrent.RunnableScheduledFuture<V> task)",
      "comment": "Modifies or replaces the task used to execute a callable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "triggerTime(long delay)",
    "name": "triggerTime",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "delay"
      }
    ],
    "protocol": {
      "member": "triggerTime(long delay)",
      "comment": "Returns the trigger time of a delayed action.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "schedule(java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)",
    "name": "schedule",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.ScheduledFuture<?>",
      "name": "java.util.concurrent.ScheduledFuture<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "command"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "delay"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "schedule(java.lang.Runnable command, long delay, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "schedule(java.util.concurrent.Callable<V> callable, long delay, java.util.concurrent.TimeUnit unit)",
    "name": "schedule",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.ScheduledFuture<V>",
      "name": "java.util.concurrent.ScheduledFuture<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Callable",
          "name": "Callable",
          "isArray": false
        },
        "name": "callable"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "delay"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "schedule(java.util.concurrent.Callable<V> callable, long delay, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "scheduleAtFixedRate(java.lang.Runnable command, long initialDelay, long period, java.util.concurrent.TimeUnit unit)",
    "name": "scheduleAtFixedRate",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.ScheduledFuture<?>",
      "name": "java.util.concurrent.ScheduledFuture<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "command"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "initialDelay"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "period"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "scheduleAtFixedRate(java.lang.Runnable command, long initialDelay, long period, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "scheduleWithFixedDelay(java.lang.Runnable command, long initialDelay, long delay, java.util.concurrent.TimeUnit unit)",
    "name": "scheduleWithFixedDelay",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.ScheduledFuture<?>",
      "name": "java.util.concurrent.ScheduledFuture<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "command"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "initialDelay"
      },
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "delay"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "scheduleWithFixedDelay(java.lang.Runnable command, long initialDelay, long delay, java.util.concurrent.TimeUnit unit)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "execute(java.lang.Runnable command)",
    "name": "execute",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "command"
      }
    ],
    "protocol": {
      "member": "execute(java.lang.Runnable command)",
      "comment": "Executes command with zero required delay. This has effect equivalent to method_1. Note that inspections of the queue and of the list returned by shutdownNow will access the zero-delayed ScheduledFuture, not the command itself. A consequence of the use of ScheduledFuture objects is that method_3 afterExecute is always called with a null second Throwable argument, even if the command terminated abruptly. Instead, the Throwable thrown by such a task can be obtained via method_4.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "submit(java.lang.Runnable task)",
    "name": "submit",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.Future<?>",
      "name": "java.util.concurrent.Future<?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "task"
      }
    ],
    "protocol": {
      "member": "submit(java.lang.Runnable task)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "submit(java.lang.Runnable task, T result)",
    "name": "submit",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.Future<T>",
      "name": "java.util.concurrent.Future<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Runnable",
          "name": "Runnable",
          "isArray": false
        },
        "name": "task"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "result"
      }
    ],
    "protocol": {
      "member": "submit(java.lang.Runnable task, T result)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "submit(java.util.concurrent.Callable<T> task)",
    "name": "submit",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.Future<T>",
      "name": "java.util.concurrent.Future<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.concurrent.Callable",
          "name": "Callable",
          "isArray": false
        },
        "name": "task"
      }
    ],
    "protocol": {
      "member": "submit(java.util.concurrent.Callable<T> task)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)",
    "name": "setContinueExistingPeriodicTasksAfterShutdownPolicy",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)",
      "comment": "Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow or after setting the policy to false when already shutdown. This value is by default false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getContinueExistingPeriodicTasksAfterShutdownPolicy()",
    "name": "getContinueExistingPeriodicTasksAfterShutdownPolicy",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getContinueExistingPeriodicTasksAfterShutdownPolicy()",
      "comment": "Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow or after setting the policy to false when already shutdown. This value is by default false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value)",
    "name": "setExecuteExistingDelayedTasksAfterShutdownPolicy",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value)",
      "comment": "Sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow, or after setting the policy to false when already shutdown. This value is by default true.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getExecuteExistingDelayedTasksAfterShutdownPolicy()",
    "name": "getExecuteExistingDelayedTasksAfterShutdownPolicy",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getExecuteExistingDelayedTasksAfterShutdownPolicy()",
      "comment": "Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow, or after setting the policy to false when already shutdown. This value is by default true.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setRemoveOnCancelPolicy(boolean value)",
    "name": "setRemoveOnCancelPolicy",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "setRemoveOnCancelPolicy(boolean value)",
      "comment": "Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation. This value is by default false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRemoveOnCancelPolicy()",
    "name": "getRemoveOnCancelPolicy",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRemoveOnCancelPolicy()",
      "comment": "Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation. This value is by default false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "shutdown()",
    "name": "shutdown",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "shutdown()",
      "comment": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. This method does not wait for previously submitted tasks to complete execution. Use method_0 awaitTermination to do that. If the ExecuteExistingDelayedTasksAfterShutdownPolicy has been set false, existing delayed tasks whose delays have not yet elapsed are cancelled. And unless the ContinueExistingPeriodicTasksAfterShutdownPolicy has been set true, future executions of existing periodic tasks will be cancelled.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "shutdownNow()",
    "name": "shutdownNow",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.Runnable>",
      "name": "java.util.List<java.lang.Runnable>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "shutdownNow()",
      "comment": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. This method does not wait for actively executing tasks to terminate. Use method_0 awaitTermination to do that. There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. This implementation cancels tasks via method_1, so any task that fails to respond to interrupts may never terminate.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQueue()",
    "name": "getQueue",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.ScheduledThreadPoolExecutor",
      "name": "ScheduledThreadPoolExecutor",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.ScheduledThreadPoolExecutor",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.concurrent.BlockingQueue<java.lang.Runnable>",
      "name": "java.util.concurrent.BlockingQueue<java.lang.Runnable>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getQueue()",
      "comment": "Returns the task queue used by this executor. Each element of this queue is a ScheduledFuture, including those tasks submitted using execute which are for scheduling purposes used as the basis of a zero-delay ScheduledFuture. Iteration over this queue is not guaranteed to traverse tasks in the order in which they will execute.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]