[
  {
    "signature": "java.util.logging.SocketHandler()",
    "name": "java.util.logging.SocketHandler",
    "containingClass": {
      "qualifiedName": "java.util.logging.SocketHandler",
      "name": "SocketHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.SocketHandler",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.logging.SocketHandler()",
      "comment": "Create a SocketHandler, using only LogManager properties (or their defaults).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.logging.SocketHandler(java.lang.String host, int port)",
    "name": "java.util.logging.SocketHandler",
    "containingClass": {
      "qualifiedName": "java.util.logging.SocketHandler",
      "name": "SocketHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.SocketHandler",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "host"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "port"
      }
    ],
    "protocol": {
      "member": "java.util.logging.SocketHandler(java.lang.String host, int port)",
      "comment": "Construct a SocketHandler using a specified host and port. The SocketHandler is configured based on LogManager properties (or their default values) except that the given target host and port arguments are used. If the host argument is empty, but not null String then the localhost is used.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "close()",
    "name": "close",
    "containingClass": {
      "qualifiedName": "java.util.logging.SocketHandler",
      "name": "SocketHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.SocketHandler",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "close()",
      "comment": "Close this output stream. @exception SecurityException if a security manager exists and if the caller does not have method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "publish(java.util.logging.LogRecord record)",
    "name": "publish",
    "containingClass": {
      "qualifiedName": "java.util.logging.SocketHandler",
      "name": "SocketHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.SocketHandler",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.logging.LogRecord",
          "name": "LogRecord",
          "isArray": false
        },
        "name": "record"
      }
    ],
    "protocol": {
      "member": "publish(java.util.logging.LogRecord record)",
      "comment": "Format and publish a LogRecord.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]