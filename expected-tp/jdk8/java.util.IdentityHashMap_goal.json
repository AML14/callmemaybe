[
  {
    "signature": "java.util.IdentityHashMap()",
    "name": "java.util.IdentityHashMap",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.IdentityHashMap()",
      "comment": "Constructs a new, empty identity hash map with a default expected maximum size (21).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.IdentityHashMap(int expectedMaxSize)",
    "name": "java.util.IdentityHashMap",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "expectedMaxSize"
      }
    ],
    "protocol": {
      "member": "java.util.IdentityHashMap(int expectedMaxSize)",
      "comment": "Constructs a new, empty map with the specified expected maximum size. Putting more than the expected number of key-value mappings into the map may cause the internal data structure to grow, which may be somewhat time-consuming.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.IdentityHashMap(java.util.Map<? extends K, ? extends V> m)",
    "name": "java.util.IdentityHashMap",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "java.util.IdentityHashMap(java.util.Map<? extends K, ? extends V> m)",
      "comment": "Constructs a new identity hash map containing the keys-value mappings in the specified map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmaskNull(java.lang.Object key)",
    "name": "unmaskNull",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "unmaskNull(java.lang.Object key)",
      "comment": "Returns internal representation of null key back to caller as null.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of key-value mappings in this identity hash map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isEmpty()",
      "comment": "Returns true if this identity hash map contains no key-value mappings.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(java.lang.Object key)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "get(java.lang.Object key)",
      "comment": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that (key == k), then this method returns v; otherwise it returns null. (There can be at most one such mapping.) A return value of null does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to null. The method_0 containsKey operation may be used to distinguish these two cases.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsKey(java.lang.Object key)",
    "name": "containsKey",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "containsKey(java.lang.Object key)",
      "comment": "Tests whether the specified object reference is a key in this identity hash map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsValue(java.lang.Object value)",
    "name": "containsValue",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "containsValue(java.lang.Object value)",
      "comment": "Tests whether the specified object reference is a value in this identity hash map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "put(K key, V value)",
    "name": "put",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "protocol": {
      "member": "put(K key, V value)",
      "comment": "Associates the specified value with the specified key in this identity hash map. If the map previously contained a mapping for the key, the old value is replaced.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "putAll(java.util.Map<? extends K, ? extends V> m)",
    "name": "putAll",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "m"
      }
    ],
    "protocol": {
      "member": "putAll(java.util.Map<? extends K, ? extends V> m)",
      "comment": "Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object key)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "V",
      "name": "V",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "remove(java.lang.Object key)",
      "comment": "Removes the mapping for this key from this map if present.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Removes all of the mappings from this map. The map will be empty after this call returns.",
      "kind": "FreeText",
      "condition": "receiverObjectID.isEmpty()<-receiverObjectID.clear()"
    }
  },
  {
    "signature": "equals(java.lang.Object o)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object o)",
      "comment": "Compares the specified object with this map for equality. Returns true if the given object is also a map and the two maps represent identical object-reference mappings. More formally, this map is equal to another map m if and only if method_0method_1. Owing to the reference-equality-based semantics of this map it is possible that the symmetry and transitivity requirements of the <tt>Objectmethod_3</tt> contract may be violated if this map is compared to a normal map. However, the <tt>Objectmethod_3</tt> contract is guaranteed to hold among <tt>IdentityHashMap</tt> instances.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hashCode()",
      "comment": "Returns the hash code value for this map. The hash code of a map is defined to be the sum of the hash codes of each entry in the map's method_0 view. This ensures that method_1 implies that method_2==method_3 for any two IdentityHashMap instances m1 and m2, as required by the general contract of method_7. <b>Owing to the reference-equality-based semantics of the <tt>method_8</tt> instances in the set returned by this map's <tt>entrySet</tt> method, it is possible that the contractual requirement of <tt>Objectmethod_5</tt> mentioned in the previous paragraph will be violated if one of the two objects being compared is an IdentityHashMap instance and the other is a normal map.</b>",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "Returns a shallow copy of this identity hash map: the keys and values themselves are not cloned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "keySet()",
    "name": "keySet",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<K>",
      "name": "java.util.Set<K>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "keySet()",
      "comment": "Returns an identity-based set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress, the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the method_0, method_1, removeAll, retainAll, and clear methods. It does not support the add or addAll methods. While the object returned by this method implements the <tt>Set</tt> interface, it does <i>not</i> obey <tt>Set's</tt> general contract. Like its backing map, the set returned by this method defines element equality as reference-equality rather than object-equality. This affects the behavior of its <tt>contains</tt>, <tt>remove</tt>, <tt>containsAll</tt>, equals, and hashCode methods. The equals method of the returned set returns <tt>true</tt> only if the specified object is a set containing exactly the same object references as the returned set. The symmetry and transitivity requirements of the <tt>method_2</tt> contract may be violated if the set returned by this method is compared to a normal set. However, the <tt>method_2</tt> contract is guaranteed to hold among sets returned by this method. The hashCode method of the returned set returns the sum of the identity hashcodes of the elements in the set, rather than the sum of their hashcodes. This is mandated by the change in the semantics of the equals method, in order to enforce the general contract of the method_4 method among sets returned by this method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "values()",
    "name": "values",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "values()",
      "comment": "Returns a Collection view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress, the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the method_0, method_1, removeAll, retainAll and clear methods. It does not support the add or addAll methods. While the object returned by this method implements the <tt>Collection</tt> interface, it does <i>not</i> obey <tt>Collection's</tt> general contract. Like its backing map, the collection returned by this method defines element equality as reference-equality rather than object-equality. This affects the behavior of its <tt>contains</tt>, <tt>remove</tt> and <tt>containsAll</tt> methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "entrySet()",
    "name": "entrySet",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<java.util.Map$Entry<K, V>>",
      "name": "java.util.Set<java.util.Map$Entry<K, V>>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "entrySet()",
      "comment": "Returns a Set view of the mappings contained in this map. Each element in the returned set is a reference-equality-based method_7. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress, the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the method_8, method_9, removeAll, retainAll and clear methods. It does not support the add or addAll methods. Like the backing map, the method_7 objects in the set returned by this method define key and value equality as reference-equality rather than object-equality. This affects the behavior of the equals and hashCode methods of these method_7 objects. A reference-equality based method_7 e is equal to an object o if and only if o is a method_7 and method_0==method_1 && method_2==method_3. To accommodate these equals semantics, the hashCode method returns method_18(method_0) ^ method_18(method_2). <b>Owing to the reference-equality-based semantics of the method_7 instances in the set returned by this method, it is possible that the symmetry and transitivity requirements of the method_6 contract may be violated if any of the entries in the set is compared to a normal map entry, or if the set returned by this method is compared to a set of normal map entries (such as would be returned by a call to this method on a normal map). However, the <tt>method_24</tt> contract is guaranteed to hold among identity-based map entries, and among sets of such entries. </b>",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEach(java.util.function.BiConsumer<? super K, ? super V> action)",
    "name": "forEach",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.BiConsumer",
          "name": "BiConsumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "forEach(java.util.function.BiConsumer<? super K, ? super V> action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V> function)",
    "name": "replaceAll",
    "containingClass": {
      "qualifiedName": "java.util.IdentityHashMap",
      "name": "IdentityHashMap",
      "isArray": false
    },
    "targetClass": "java.util.IdentityHashMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.BiFunction",
          "name": "BiFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "protocol": {
      "member": "replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V> function)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]