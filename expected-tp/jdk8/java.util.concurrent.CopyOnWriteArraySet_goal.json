[
  {
    "signature": "java.util.concurrent.CopyOnWriteArraySet()",
    "name": "java.util.concurrent.CopyOnWriteArraySet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.concurrent.CopyOnWriteArraySet()",
      "comment": "Creates an empty set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.concurrent.CopyOnWriteArraySet(java.util.Collection<? extends E> c)",
    "name": "java.util.concurrent.CopyOnWriteArraySet",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "java.util.concurrent.CopyOnWriteArraySet(java.util.Collection<? extends E> c)",
      "comment": "Creates a set containing all of the elements of the specified collection.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of elements in this set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "isEmpty()",
      "comment": "Returns true if this set contains no elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object o)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "contains(java.lang.Object o)",
      "comment": "Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "toArray()",
      "comment": "Returns an array containing all of the elements in this set. If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. The returned array will be \"safe\" in that no references to it are maintained by this set. (In other words, this method must allocate a new array even if this set is backed by an array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(T[] a)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "a"
      }
    ],
    "protocol": {
      "member": "toArray(T[] a)",
      "comment": "Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array. If the set fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this set. If this set fits in the specified array with room to spare (imethod_4., the array has more elements than this set), the element in the array immediately following the end of the set is set to null. (This is useful in determining the length of this set only if the caller knows that this set does not contain any null elements.) If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. Like the method_0 method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a set known to contain only strings. The following code can be used to dump the set into a newly allocated array of String}:  {@code String[] y = method_1; Note that method_2 is identical in function to method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clear()",
      "comment": "Removes all of the elements from this set. The set will be empty after this call returns.",
      "kind": "FreeText",
      "condition": "receiverObjectID.isEmpty()<-receiverObjectID.clear()"
    }
  },
  {
    "signature": "remove(java.lang.Object o)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "remove(java.lang.Object o)",
      "comment": "Removes the specified element from this set if it is present. More formally, removes an element e such that (o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;method_0, if this set contains such an element. Returns true if this set contained the element (or equivalently, if this set changed as a result of the call). (This set will not contain the element once the call returns.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "protocol": {
      "member": "add(E e)",
      "comment": "Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if the set contains no element e2 such that (e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;method_0. If this set already contains the element, the call leaves the set unchanged and returns false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsAll(java.util.Collection<?> c)",
    "name": "containsAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "containsAll(java.util.Collection<?> c)",
      "comment": "Returns true if this set contains all of the elements of the specified collection. If the specified collection is also a set, this method returns true if it is a subset of this set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAll(java.util.Collection<? extends E> c)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "addAll(java.util.Collection<? extends E> c)",
      "comment": "Adds all of the elements in the specified collection to this set if they're not already present. If the specified collection is also a set, the addAll operation effectively modifies this set so that its value is the union of the two sets. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAll(java.util.Collection<?> c)",
    "name": "removeAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "removeAll(java.util.Collection<?> c)",
      "comment": "Removes from this set all of its elements that are contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the asymmetric set difference of the two sets.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "retainAll(java.util.Collection<?> c)",
    "name": "retainAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "retainAll(java.util.Collection<?> c)",
      "comment": "Retains only the elements in this set that are contained in the specified collection. In other words, removes from this set all of its elements that are not contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the intersection of the two sets.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements contained in this set in the order in which these elements were added. The returned iterator provides a snapshot of the state of the set when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object o)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object o)",
      "comment": "Compares the specified object with this set for equality. Returns true if the specified object is the same object as this object, or if it is also a Set and the elements returned by an method_0 iterator over the specified set are the same as the elements returned by an iterator over this set. More formally, the two iterators are considered to return the same elements if they return the same number of elements and for every element e1 returned by the iterator over the specified set, there is an element e2 returned by the iterator over this set such that (e1==null ? e2==null : method_1.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeIf(java.util.function.Predicate<? super E> filter)",
    "name": "removeIf",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "filter"
      }
    ],
    "protocol": {
      "member": "removeIf(java.util.function.Predicate<? super E> filter)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEach(java.util.function.Consumer<? super E> action)",
    "name": "forEach",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Consumer",
          "name": "Consumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "forEach(java.util.function.Consumer<? super E> action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.CopyOnWriteArraySet",
      "name": "CopyOnWriteArraySet",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.CopyOnWriteArraySet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<E>",
      "name": "java.util.Spliterator<E>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "spliterator()",
      "comment": "Returns a Spliterator over the elements in this set in the order in which these elements were added. The Spliterator reports method_0, method_1, method_2, and method_3. The spliterator provides a snapshot of the state of the set when the spliterator was constructed. No synchronization is needed while operating on the spliterator.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]