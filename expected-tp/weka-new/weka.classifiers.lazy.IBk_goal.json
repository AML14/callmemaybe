[
  {
    "signature": "weka.classifiers.lazy.IBk(int k)",
    "name": "weka.classifiers.lazy.IBk",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "protocol": {
      "member": "weka.classifiers.lazy.IBk(int k)",
      "comment": "IBk classifier. Simple instance-based learner that uses the class of the nearest k training instances for the class of the test instances.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "weka.classifiers.lazy.IBk()",
    "name": "weka.classifiers.lazy.IBk",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.lazy.IBk()",
      "comment": "IB1 classifer. Instance-based learner. Predicts the class of the single nearest training instance for each test instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "Returns a string describing classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTechnicalInformation()",
    "name": "getTechnicalInformation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.TechnicalInformation",
      "name": "weka.core.TechnicalInformation",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTechnicalInformation()",
      "comment": "Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, emethod_0., paper reference or book this class is based on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "KNNTipText()",
    "name": "KNNTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "KNNTipText()",
      "comment": "Returns the tip text for this property.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setKNN(int k)",
    "name": "setKNN",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "protocol": {
      "member": "setKNN(int k)",
      "comment": "Set the number of neighbours the learner is to use.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getKNN()",
    "name": "getKNN",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getKNN()",
      "comment": "Gets the number of neighbours the learner will use.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "windowSizeTipText()",
    "name": "windowSizeTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "windowSizeTipText()",
      "comment": "Returns the tip text for this property.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getWindowSize()",
    "name": "getWindowSize",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getWindowSize()",
      "comment": "Gets the maximum number of instances allowed in the training pool. The addition of new instances above this value will result in old instances being removed. A value of 0 signifies no limit to the number of training instances.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setWindowSize(int newWindowSize)",
    "name": "setWindowSize",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "newWindowSize"
      }
    ],
    "protocol": {
      "member": "setWindowSize(int newWindowSize)",
      "comment": "Sets the maximum number of instances allowed in the training pool. The addition of new instances above this value will result in old instances being removed. A value of 0 signifies no limit to the number of training instances.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distanceWeightingTipText()",
    "name": "distanceWeightingTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "distanceWeightingTipText()",
      "comment": "Returns the tip text for this property.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDistanceWeighting()",
    "name": "getDistanceWeighting",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.SelectedTag",
      "name": "weka.core.SelectedTag",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getDistanceWeighting()",
      "comment": "Gets the distance weighting method used. Will be one of WEIGHT_NONE, WEIGHT_INVERSE, or WEIGHT_SIMILARITY",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setDistanceWeighting(weka.core.SelectedTag newMethod)",
    "name": "setDistanceWeighting",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.SelectedTag",
          "name": "SelectedTag",
          "isArray": false
        },
        "name": "newMethod"
      }
    ],
    "protocol": {
      "member": "setDistanceWeighting(weka.core.SelectedTag newMethod)",
      "comment": "Sets the distance weighting method used. Values other than WEIGHT_NONE, WEIGHT_INVERSE, or WEIGHT_SIMILARITY will be ignored.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "meanSquaredTipText()",
    "name": "meanSquaredTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "meanSquaredTipText()",
      "comment": "Returns the tip text for this property.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMeanSquared()",
    "name": "getMeanSquared",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMeanSquared()",
      "comment": "Gets whether the mean squared error is used rather than mean absolute error when doing cross-validation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMeanSquared(boolean newMeanSquared)",
    "name": "setMeanSquared",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newMeanSquared"
      }
    ],
    "protocol": {
      "member": "setMeanSquared(boolean newMeanSquared)",
      "comment": "Sets whether the mean squared error is used rather than mean absolute error when doing cross-validation.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "crossValidateTipText()",
    "name": "crossValidateTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "crossValidateTipText()",
      "comment": "Returns the tip text for this property.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCrossValidate()",
    "name": "getCrossValidate",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCrossValidate()",
      "comment": "Gets whether hold-one-out cross-validation will be used to select the best k value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setCrossValidate(boolean newCrossValidate)",
    "name": "setCrossValidate",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newCrossValidate"
      }
    ],
    "protocol": {
      "member": "setCrossValidate(boolean newCrossValidate)",
      "comment": "Sets whether hold-one-out cross-validation will be used to select the best k value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "nearestNeighbourSearchAlgorithmTipText()",
    "name": "nearestNeighbourSearchAlgorithmTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "nearestNeighbourSearchAlgorithmTipText()",
      "comment": "Returns the tip text for this property.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNearestNeighbourSearchAlgorithm()",
    "name": "getNearestNeighbourSearchAlgorithm",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.neighboursearch.NearestNeighbourSearch",
      "name": "weka.core.neighboursearch.NearestNeighbourSearch",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNearestNeighbourSearchAlgorithm()",
      "comment": "Returns the current nearestNeighbourSearch algorithm in use.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setNearestNeighbourSearchAlgorithm(weka.core.neighboursearch.NearestNeighbourSearch nearestNeighbourSearchAlgorithm)",
    "name": "setNearestNeighbourSearchAlgorithm",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.neighboursearch.NearestNeighbourSearch",
          "name": "NearestNeighbourSearch",
          "isArray": false
        },
        "name": "nearestNeighbourSearchAlgorithm"
      }
    ],
    "protocol": {
      "member": "setNearestNeighbourSearchAlgorithm(weka.core.neighboursearch.NearestNeighbourSearch nearestNeighbourSearchAlgorithm)",
      "comment": "Sets the nearestNeighbourSearch algorithm to be used for finding nearest method_0",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNumTraining()",
    "name": "getNumTraining",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getNumTraining()",
      "comment": "Get the number of training instances the classifier is currently using.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCapabilities()",
    "name": "getCapabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Capabilities",
      "name": "weka.core.Capabilities",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCapabilities()",
      "comment": "Returns default capabilities of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances instances)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "instances"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances instances)",
      "comment": "Generates the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "updateClassifier(weka.core.Instance instance)",
    "name": "updateClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "updateClassifier(weka.core.Instance instance)",
      "comment": "Adds the supplied instance to the training set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distributionForInstance(weka.core.Instance instance)",
    "name": "distributionForInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "distributionForInstance(weka.core.Instance instance)",
      "comment": "Calculates the class membership probabilities for the given test instance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.   -I Weight neighbours by the inverse of their distance (use when k > 1)  -F Weight neighbours by 1 - their distance (use when k > 1)  -K <number of neighbors> Number of nearest neighbours (k) used in classification. (Default = 1)  -E Minimise mean squared error rather than mean absolute error when using -X option with numeric prediction.  -W <window size> Maximum number of training instances maintained. Training instances are dropped FIFO. (Default = no window)  -X Select the number of nearest neighbours between 1 and the k value specified using hold-one-out evaluation on the training data (use when k > 1)  -A The nearest neighbour search algorithm to use (default: wekamethod_0method_1method_2).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of IBk.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "enumerateMeasures()",
    "name": "enumerateMeasures",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<java.lang.String>",
      "name": "java.util.Enumeration<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "enumerateMeasures()",
      "comment": "Returns an enumeration of the additional measure names produced by the neighbour search algorithm, plus the chosen K in case cross-validation is enabled.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMeasure(java.lang.String additionalMeasureName)",
    "name": "getMeasure",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "additionalMeasureName"
      }
    ],
    "protocol": {
      "member": "getMeasure(java.lang.String additionalMeasureName)",
      "comment": "Returns the value of the named measure from the neighbour search algorithm, plus the chosen K in case cross-validation is enabled.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a description of this classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "init()",
    "name": "init",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "init()",
      "comment": "Initialise scheme variables.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "makeDistribution(weka.core.Instances neighbours, double[] distances)",
    "name": "makeDistribution",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "neighbours"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "distances"
      }
    ],
    "protocol": {
      "member": "makeDistribution(weka.core.Instances neighbours, double[] distances)",
      "comment": "Turn the list of nearest neighbors into a probability distribution.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "crossValidate()",
    "name": "crossValidate",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "crossValidate()",
      "comment": "Select the best value for k by hold-one-out cross-validation. If the class attribute is nominal, classification error is minimised. If the class attribute is numeric, mean absolute error is minimised",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pruneToK(weka.core.Instances neighbours, double[] distances, int k)",
    "name": "pruneToK",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Instances",
      "name": "weka.core.Instances",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "neighbours"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "distances"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "k"
      }
    ],
    "protocol": {
      "member": "pruneToK(weka.core.Instances neighbours, double[] distances, int k)",
      "comment": "Prunes the list to contain the k nearest neighbors. If there are multiple neighbors at the k'th distance, all will be kept.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "main(java.lang.String[] argv)",
    "name": "main",
    "containingClass": {
      "qualifiedName": "weka.classifiers.lazy.IBk",
      "name": "IBk",
      "isArray": false
    },
    "targetClass": "weka.classifiers.lazy.IBk",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "argv"
      }
    ],
    "protocol": {
      "member": "main(java.lang.String[] argv)",
      "comment": "Main method for testing this class.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]