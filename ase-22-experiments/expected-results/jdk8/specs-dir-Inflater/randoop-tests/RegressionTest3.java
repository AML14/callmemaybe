import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getAdler();
        boolean boolean9 = inflater0.finished();
        long long10 = inflater0.getBytesRead();
        int int11 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        inflater12.reset();
        boolean boolean19 = inflater12.needsDictionary();
        int int20 = inflater12.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        boolean boolean25 = inflater21.finished();
        inflater21.end();
        inflater21.end();
        boolean boolean28 = inflater21.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        boolean boolean48 = inflater29.finished();
        int int49 = inflater29.getAdler();
        boolean boolean50 = inflater29.finished();
        int int51 = inflater29.getAdler();
        boolean boolean52 = inflater29.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        int int57 = inflater53.getTotalIn();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int67 = inflater58.inflate(byteArray66);
        int int68 = inflater53.inflate(byteArray66);
        int int69 = inflater29.inflate(byteArray66);
        inflater21.setInput(byteArray66, (int) (byte) 0, (int) (short) 1);
        int int73 = inflater12.inflate(byteArray66);
        boolean boolean74 = inflater12.needsInput();
        long long75 = inflater12.getBytesWritten();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater(true);
        int int78 = inflater77.getRemaining();
        long long79 = inflater77.getBytesRead();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        byte[] byteArray82 = new byte[] { (byte) 1 };
        int int83 = inflater80.inflate(byteArray82);
        int int84 = inflater77.inflate(byteArray82);
        int int85 = inflater12.inflate(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = inflater0.inflate(byteArray82, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        boolean boolean5 = inflater1.needsDictionary();
        inflater1.end();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getAdler();
        boolean boolean29 = inflater8.finished();
        int int30 = inflater8.getAdler();
        boolean boolean31 = inflater8.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int46 = inflater37.inflate(byteArray45);
        int int47 = inflater32.inflate(byteArray45);
        int int48 = inflater8.inflate(byteArray45);
        inflater0.setInput(byteArray45);
        int int50 = inflater0.getAdler();
        long long51 = inflater0.getBytesWritten();
        long long52 = inflater0.getBytesWritten();
        long long53 = inflater0.getBytesWritten();
        boolean boolean54 = inflater0.needsDictionary();
        byte[] byteArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        long long8 = inflater0.getBytesRead();
        boolean boolean9 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        long long14 = inflater10.getBytesRead();
        long long15 = inflater10.getBytesWritten();
        boolean boolean16 = inflater10.finished();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        inflater17.reset();
        boolean boolean24 = inflater17.needsDictionary();
        int int25 = inflater17.getTotalOut();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        boolean boolean30 = inflater26.finished();
        inflater26.end();
        inflater26.end();
        boolean boolean33 = inflater26.needsInput();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        boolean boolean53 = inflater34.finished();
        int int54 = inflater34.getAdler();
        boolean boolean55 = inflater34.finished();
        int int56 = inflater34.getAdler();
        boolean boolean57 = inflater34.needsInput();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        int int62 = inflater58.getTotalIn();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        byte[] byteArray65 = new byte[] { (byte) 1 };
        int int66 = inflater63.inflate(byteArray65);
        byte[] byteArray71 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int72 = inflater63.inflate(byteArray71);
        int int73 = inflater58.inflate(byteArray71);
        int int74 = inflater34.inflate(byteArray71);
        inflater26.setInput(byteArray71, (int) (byte) 0, (int) (short) 1);
        int int78 = inflater17.inflate(byteArray71);
        inflater10.setInput(byteArray71, (int) (byte) 0, 1);
        int int82 = inflater0.inflate(byteArray71);
        int int83 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        long long18 = inflater0.getBytesRead();
        long long19 = inflater0.getBytesWritten();
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        long long5 = inflater1.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.finished();
        inflater6.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        inflater13.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater13.setInput(byteArray30);
        int int33 = inflater6.inflate(byteArray30);
        inflater1.setInput(byteArray30);
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        int int39 = inflater35.getAdler();
        boolean boolean40 = inflater35.finished();
        long long41 = inflater35.getBytesWritten();
        long long42 = inflater35.getBytesRead();
        boolean boolean43 = inflater35.needsInput();
        long long44 = inflater35.getBytesRead();
        boolean boolean45 = inflater35.finished();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater(true);
        int int48 = inflater47.getRemaining();
        long long49 = inflater47.getBytesRead();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        int int54 = inflater47.inflate(byteArray52);
        int int55 = inflater35.inflate(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray52, 0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater15.setInput(byteArray22);
        inflater10.setInput(byteArray22);
        inflater8.setInput(byteArray22);
        int int27 = inflater0.inflate(byteArray22);
        int int28 = inflater0.getTotalOut();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.reset();
        boolean boolean2 = inflater0.needsInput();
        inflater0.end();
        boolean boolean4 = inflater0.needsDictionary();
        int int5 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsInput();
        long long26 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass27 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        boolean boolean13 = inflater9.finished();
        inflater9.end();
        inflater9.end();
        boolean boolean16 = inflater9.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        boolean boolean36 = inflater17.finished();
        int int37 = inflater17.getAdler();
        boolean boolean38 = inflater17.finished();
        int int39 = inflater17.getAdler();
        boolean boolean40 = inflater17.needsInput();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        int int45 = inflater41.getTotalIn();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int55 = inflater46.inflate(byteArray54);
        int int56 = inflater41.inflate(byteArray54);
        int int57 = inflater17.inflate(byteArray54);
        inflater9.setInput(byteArray54, (int) (byte) 0, (int) (short) 1);
        int int61 = inflater0.inflate(byteArray54);
        boolean boolean62 = inflater0.needsInput();
        int int63 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass64 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.finished();
        long long15 = inflater9.getBytesRead();
        boolean boolean16 = inflater9.needsDictionary();
        boolean boolean17 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.needsDictionary();
        int int20 = inflater18.getTotalOut();
        int int21 = inflater18.getTotalOut();
        boolean boolean22 = inflater18.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        inflater23.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int42 = inflater33.inflate(byteArray41);
        int int43 = inflater28.inflate(byteArray41);
        inflater23.setInput(byteArray41);
        inflater18.setInput(byteArray41);
        int int46 = inflater9.inflate(byteArray41);
        inflater0.setInput(byteArray41, (int) (short) 0, (int) (byte) 1);
        int int50 = inflater0.getTotalOut();
        inflater0.reset();
        byte[] byteArray52 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray52, (int) (short) -1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        boolean boolean25 = inflater6.finished();
        int int26 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        int int61 = inflater6.inflate(byteArray56);
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater62.setInput(byteArray76);
        int int79 = inflater6.inflate(byteArray76);
        inflater0.setInput(byteArray76, 0, (int) (short) 0);
        inflater0.reset();
        int int84 = inflater0.getTotalOut();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        boolean boolean6 = inflater0.needsDictionary();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        inflater0.reset();
        boolean boolean8 = inflater0.finished();
        long long9 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        long long14 = inflater10.getBytesWritten();
        inflater10.reset();
        long long16 = inflater10.getBytesWritten();
        int int17 = inflater10.getTotalIn();
        boolean boolean18 = inflater10.needsDictionary();
        int int19 = inflater10.getTotalIn();
        int int20 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        boolean boolean25 = inflater21.needsInput();
        int int26 = inflater21.getRemaining();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater27.setInput(byteArray37);
        int int39 = inflater21.inflate(byteArray37);
        boolean boolean40 = inflater21.finished();
        int int41 = inflater21.getTotalOut();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        long long46 = inflater42.getBytesRead();
        boolean boolean47 = inflater42.needsDictionary();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        long long52 = inflater48.getBytesWritten();
        inflater48.reset();
        long long54 = inflater48.getBytesWritten();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.needsDictionary();
        boolean boolean59 = inflater55.needsInput();
        int int60 = inflater55.getRemaining();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.finished();
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater61.setInput(byteArray71);
        int int73 = inflater55.inflate(byteArray71);
        inflater48.setInput(byteArray71);
        inflater42.setInput(byteArray71);
        int int76 = inflater21.inflate(byteArray71);
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        boolean boolean78 = inflater77.finished();
        int int79 = inflater77.getRemaining();
        boolean boolean80 = inflater77.needsInput();
        java.util.zip.Inflater inflater81 = new java.util.zip.Inflater();
        boolean boolean82 = inflater81.finished();
        int int83 = inflater81.getRemaining();
        boolean boolean84 = inflater81.finished();
        byte[] byteArray91 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater81.setInput(byteArray91);
        inflater77.setInput(byteArray91);
        int int94 = inflater21.inflate(byteArray91);
        int int95 = inflater10.inflate(byteArray91);
        inflater0.setInput(byteArray91);
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getTotalIn();
        long long26 = inflater0.getBytesRead();
        long long27 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        inflater0.reset();
        long long5 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        boolean boolean26 = inflater7.finished();
        int int27 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        long long32 = inflater28.getBytesRead();
        boolean boolean33 = inflater28.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        long long38 = inflater34.getBytesWritten();
        inflater34.reset();
        long long40 = inflater34.getBytesWritten();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        int int59 = inflater41.inflate(byteArray57);
        inflater34.setInput(byteArray57);
        inflater28.setInput(byteArray57);
        int int62 = inflater7.inflate(byteArray57);
        long long63 = inflater7.getBytesRead();
        int int64 = inflater7.getTotalOut();
        int int65 = inflater7.getTotalIn();
        inflater7.reset();
        boolean boolean67 = inflater7.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        byte[] byteArray70 = new byte[] { (byte) 1 };
        int int71 = inflater68.inflate(byteArray70);
        boolean boolean72 = inflater68.finished();
        int int73 = inflater68.getRemaining();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        byte[] byteArray78 = new byte[] { (byte) 1 };
        int int79 = inflater76.inflate(byteArray78);
        int int80 = inflater76.getTotalIn();
        java.util.zip.Inflater inflater81 = new java.util.zip.Inflater();
        boolean boolean82 = inflater81.finished();
        int int83 = inflater81.getRemaining();
        inflater81.end();
        boolean boolean85 = inflater81.needsInput();
        java.util.zip.Inflater inflater86 = new java.util.zip.Inflater();
        byte[] byteArray88 = new byte[] { (byte) 1 };
        int int89 = inflater86.inflate(byteArray88);
        inflater81.setInput(byteArray88);
        inflater76.setInput(byteArray88);
        inflater74.setInput(byteArray88);
        int int93 = inflater68.inflate(byteArray88);
        inflater7.setInput(byteArray88);
        int int95 = inflater0.inflate(byteArray88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        long long12 = inflater0.getBytesRead();
        boolean boolean13 = inflater0.finished();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        int int18 = inflater14.getRemaining();
        long long19 = inflater14.getBytesWritten();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.needsDictionary();
        int int22 = inflater20.getTotalOut();
        long long23 = inflater20.getBytesWritten();
        boolean boolean24 = inflater20.needsInput();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        long long30 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater(true);
        int int33 = inflater32.getRemaining();
        long long34 = inflater32.getBytesRead();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        inflater35.end();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        inflater35.setInput(byteArray49);
        inflater32.setInput(byteArray49, (int) (byte) 1, (int) (short) 1);
        int int55 = inflater25.inflate(byteArray49);
        int int56 = inflater20.inflate(byteArray49);
        int int57 = inflater14.inflate(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray49, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getTotalOut();
        long long17 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        long long22 = inflater18.getBytesWritten();
        inflater18.reset();
        long long24 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        inflater18.setInput(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray41, 4, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.reset();
        boolean boolean6 = inflater0.needsDictionary();
        int int7 = inflater0.getTotalIn();
        long long8 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        boolean boolean23 = inflater0.finished();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        long long28 = inflater24.getBytesWritten();
        inflater24.reset();
        long long30 = inflater24.getBytesWritten();
        int int31 = inflater24.getTotalIn();
        boolean boolean32 = inflater24.needsDictionary();
        int int33 = inflater24.getTotalOut();
        int int34 = inflater24.getTotalOut();
        boolean boolean35 = inflater24.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        int int40 = inflater36.getTotalIn();
        long long41 = inflater36.getBytesWritten();
        long long42 = inflater36.getBytesRead();
        int int43 = inflater36.getAdler();
        int int44 = inflater36.getTotalOut();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        inflater45.end();
        boolean boolean49 = inflater45.needsInput();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.needsDictionary();
        long long54 = inflater50.getBytesRead();
        boolean boolean55 = inflater50.needsInput();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        byte[] byteArray58 = new byte[] { (byte) 1 };
        int int59 = inflater56.inflate(byteArray58);
        long long60 = inflater56.getBytesWritten();
        inflater56.reset();
        long long62 = inflater56.getBytesWritten();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.needsDictionary();
        boolean boolean67 = inflater63.needsInput();
        int int68 = inflater63.getRemaining();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater69.setInput(byteArray79);
        int int81 = inflater63.inflate(byteArray79);
        inflater56.setInput(byteArray79);
        int int83 = inflater50.inflate(byteArray79);
        inflater45.setInput(byteArray79);
        inflater36.setInput(byteArray79);
        inflater24.setInput(byteArray79);
        inflater0.setInput(byteArray79);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater5.setInput(byteArray12);
        inflater0.setInput(byteArray12);
        int int16 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        boolean boolean7 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getTotalIn();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int21 = inflater12.inflate(byteArray20);
        int int22 = inflater7.inflate(byteArray20);
        int int23 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getAdler();
        boolean boolean29 = inflater24.finished();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater30.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater30.setInput(byteArray58);
        inflater24.setInput(byteArray58, (int) (byte) 0, 1);
        int int66 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        int int71 = inflater67.getTotalOut();
        boolean boolean72 = inflater67.needsInput();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        inflater73.end();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        boolean boolean78 = inflater77.finished();
        int int79 = inflater77.getRemaining();
        boolean boolean80 = inflater77.finished();
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater77.setInput(byteArray87);
        inflater73.setInput(byteArray87);
        inflater67.setInput(byteArray87);
        inflater24.setInput(byteArray87);
        int int94 = inflater7.inflate(byteArray87, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray87, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        long long26 = inflater1.getBytesRead();
        boolean boolean27 = inflater1.finished();
        boolean boolean28 = inflater1.needsInput();
        int int29 = inflater1.getRemaining();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        boolean boolean13 = inflater8.finished();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        inflater14.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        long long23 = inflater19.getBytesWritten();
        inflater19.reset();
        long long25 = inflater19.getBytesWritten();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        int int44 = inflater26.inflate(byteArray42);
        inflater19.setInput(byteArray42);
        inflater14.setInput(byteArray42);
        inflater8.setInput(byteArray42, (int) (byte) 0, 1);
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater(true);
        int int52 = inflater51.getRemaining();
        long long53 = inflater51.getBytesRead();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        inflater54.end();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater54.setInput(byteArray68);
        inflater51.setInput(byteArray68, (int) (byte) 1, (int) (short) 1);
        int int74 = inflater8.inflate(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.finished();
        int int10 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        int int23 = inflater0.getTotalOut();
        int int24 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.finished();
        long long19 = inflater13.getBytesRead();
        boolean boolean20 = inflater13.needsDictionary();
        boolean boolean21 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.needsDictionary();
        int int24 = inflater22.getTotalOut();
        int int25 = inflater22.getTotalOut();
        boolean boolean26 = inflater22.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater27.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int46 = inflater37.inflate(byteArray45);
        int int47 = inflater32.inflate(byteArray45);
        inflater27.setInput(byteArray45);
        inflater22.setInput(byteArray45);
        int int50 = inflater13.inflate(byteArray45);
        inflater8.setInput(byteArray45);
        int int52 = inflater0.inflate(byteArray45);
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.needsDictionary();
        boolean boolean57 = inflater53.needsInput();
        int int58 = inflater53.getRemaining();
        inflater53.reset();
        boolean boolean60 = inflater53.needsInput();
        int int61 = inflater53.getRemaining();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater62.setInput(byteArray76);
        inflater53.setInput(byteArray76);
        int int80 = inflater0.inflate(byteArray76);
        int int81 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        long long12 = inflater8.getBytesRead();
        long long13 = inflater8.getBytesWritten();
        boolean boolean14 = inflater8.finished();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        inflater15.reset();
        boolean boolean22 = inflater15.needsDictionary();
        int int23 = inflater15.getTotalOut();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        boolean boolean28 = inflater24.finished();
        inflater24.end();
        inflater24.end();
        boolean boolean31 = inflater24.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        int int50 = inflater32.inflate(byteArray48);
        boolean boolean51 = inflater32.finished();
        int int52 = inflater32.getAdler();
        boolean boolean53 = inflater32.finished();
        int int54 = inflater32.getAdler();
        boolean boolean55 = inflater32.needsInput();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        byte[] byteArray58 = new byte[] { (byte) 1 };
        int int59 = inflater56.inflate(byteArray58);
        int int60 = inflater56.getTotalIn();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        byte[] byteArray69 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int70 = inflater61.inflate(byteArray69);
        int int71 = inflater56.inflate(byteArray69);
        int int72 = inflater32.inflate(byteArray69);
        inflater24.setInput(byteArray69, (int) (byte) 0, (int) (short) 1);
        int int76 = inflater15.inflate(byteArray69);
        inflater8.setInput(byteArray69, (int) (byte) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray69, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        inflater0.reset();
        long long24 = inflater0.getBytesWritten();
        int int25 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        boolean boolean5 = inflater1.needsDictionary();
        boolean boolean6 = inflater1.finished();
        int int7 = inflater1.getAdler();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        boolean boolean4 = inflater0.needsDictionary();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        int int3 = inflater1.getRemaining();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        long long8 = inflater4.getBytesWritten();
        inflater4.reset();
        int int10 = inflater4.getRemaining();
        boolean boolean11 = inflater4.needsDictionary();
        boolean boolean12 = inflater4.needsDictionary();
        inflater4.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater(true);
        int int16 = inflater15.getRemaining();
        long long17 = inflater15.getBytesRead();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        int int22 = inflater15.inflate(byteArray20);
        int int23 = inflater15.getAdler();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        int int29 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        long long34 = inflater30.getBytesRead();
        boolean boolean35 = inflater30.finished();
        long long36 = inflater30.getBytesRead();
        boolean boolean37 = inflater30.needsDictionary();
        boolean boolean38 = inflater30.needsDictionary();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.needsDictionary();
        int int41 = inflater39.getTotalOut();
        int int42 = inflater39.getTotalOut();
        boolean boolean43 = inflater39.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        inflater44.reset();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        int int53 = inflater49.getTotalIn();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int63 = inflater54.inflate(byteArray62);
        int int64 = inflater49.inflate(byteArray62);
        inflater44.setInput(byteArray62);
        inflater39.setInput(byteArray62);
        int int67 = inflater30.inflate(byteArray62);
        inflater24.setInput(byteArray62);
        inflater15.setDictionary(byteArray62);
        int int70 = inflater4.inflate(byteArray62);
        inflater1.setInput(byteArray62, (int) (short) 0, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        long long5 = inflater1.getBytesWritten();
        long long6 = inflater1.getBytesWritten();
        inflater1.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getTotalIn();
        long long13 = inflater8.getBytesWritten();
        int int14 = inflater8.getAdler();
        boolean boolean15 = inflater8.needsInput();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        inflater16.end();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater16.setInput(byteArray30);
        boolean boolean33 = inflater16.needsDictionary();
        boolean boolean34 = inflater16.finished();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.needsDictionary();
        int int37 = inflater35.getTotalOut();
        int int38 = inflater35.getTotalOut();
        int int39 = inflater35.getAdler();
        boolean boolean40 = inflater35.needsDictionary();
        int int41 = inflater35.getTotalOut();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        boolean boolean46 = inflater42.finished();
        inflater42.end();
        inflater42.end();
        boolean boolean49 = inflater42.needsInput();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.needsDictionary();
        boolean boolean54 = inflater50.needsInput();
        int int55 = inflater50.getRemaining();
        inflater50.reset();
        boolean boolean57 = inflater50.needsDictionary();
        int int58 = inflater50.getTotalIn();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.needsDictionary();
        boolean boolean63 = inflater59.needsInput();
        int int64 = inflater59.getRemaining();
        inflater59.reset();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.needsDictionary();
        boolean boolean70 = inflater66.needsInput();
        int int71 = inflater66.getRemaining();
        inflater66.reset();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.finished();
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater73.setInput(byteArray83);
        inflater66.setInput(byteArray83);
        int int88 = inflater59.inflate(byteArray83, 0, (int) (byte) 0);
        int int89 = inflater50.inflate(byteArray83);
        inflater42.setInput(byteArray83);
        int int93 = inflater35.inflate(byteArray83, 0, (int) (byte) 0);
        inflater16.setInput(byteArray83);
        int int95 = inflater8.inflate(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray83, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        inflater25.setInput(byteArray47);
        inflater0.setInput(byteArray47);
        int int52 = inflater0.getRemaining();
        boolean boolean53 = inflater0.needsInput();
        int int54 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getAdler();
        boolean boolean29 = inflater8.finished();
        int int30 = inflater8.getAdler();
        boolean boolean31 = inflater8.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int46 = inflater37.inflate(byteArray45);
        int int47 = inflater32.inflate(byteArray45);
        int int48 = inflater8.inflate(byteArray45);
        inflater0.setInput(byteArray45);
        int int50 = inflater0.getAdler();
        long long51 = inflater0.getBytesWritten();
        long long52 = inflater0.getBytesWritten();
        long long53 = inflater0.getBytesWritten();
        int int54 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        inflater0.reset();
        boolean boolean25 = inflater0.finished();
        inflater0.reset();
        java.lang.Class<?> wildcardClass27 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        int int9 = inflater1.getAdler();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        int int15 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        long long20 = inflater16.getBytesRead();
        boolean boolean21 = inflater16.finished();
        long long22 = inflater16.getBytesRead();
        boolean boolean23 = inflater16.needsDictionary();
        boolean boolean24 = inflater16.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.needsDictionary();
        int int27 = inflater25.getTotalOut();
        int int28 = inflater25.getTotalOut();
        boolean boolean29 = inflater25.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater30.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int49 = inflater40.inflate(byteArray48);
        int int50 = inflater35.inflate(byteArray48);
        inflater30.setInput(byteArray48);
        inflater25.setInput(byteArray48);
        int int53 = inflater16.inflate(byteArray48);
        inflater10.setInput(byteArray48);
        inflater1.setDictionary(byteArray48);
        int int56 = inflater1.getAdler();
        long long57 = inflater1.getBytesWritten();
        inflater1.end();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.finished();
        long long19 = inflater13.getBytesRead();
        boolean boolean20 = inflater13.needsDictionary();
        boolean boolean21 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.needsDictionary();
        int int24 = inflater22.getTotalOut();
        int int25 = inflater22.getTotalOut();
        boolean boolean26 = inflater22.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater27.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int46 = inflater37.inflate(byteArray45);
        int int47 = inflater32.inflate(byteArray45);
        inflater27.setInput(byteArray45);
        inflater22.setInput(byteArray45);
        int int50 = inflater13.inflate(byteArray45);
        inflater8.setInput(byteArray45);
        int int52 = inflater0.inflate(byteArray45);
        int int53 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass54 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        boolean boolean9 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getAdler();
        boolean boolean25 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.needsDictionary();
        int int28 = inflater26.getTotalOut();
        int int29 = inflater26.getTotalOut();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getTotalIn();
        int int32 = inflater26.getTotalOut();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        int int37 = inflater33.getAdler();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        inflater33.end();
        boolean boolean41 = inflater33.needsInput();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.needsDictionary();
        int int44 = inflater42.getTotalOut();
        int int45 = inflater42.getTotalOut();
        long long46 = inflater42.getBytesWritten();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        int int65 = inflater47.inflate(byteArray63);
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.finished();
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater70.setInput(byteArray80);
        inflater66.setInput(byteArray80);
        inflater47.setInput(byteArray80);
        int int84 = inflater42.inflate(byteArray80);
        inflater33.setInput(byteArray80, (int) (byte) 0, (int) (byte) 0);
        int int88 = inflater26.inflate(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        long long7 = inflater0.getBytesWritten();
        int int8 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        inflater0.reset();
        int int8 = inflater0.getTotalOut();
        int int9 = inflater0.getRemaining();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        boolean boolean14 = inflater10.needsInput();
        boolean boolean15 = inflater10.needsInput();
        boolean boolean16 = inflater10.finished();
        int int17 = inflater10.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        int int21 = inflater18.getTotalOut();
        inflater18.reset();
        boolean boolean23 = inflater18.needsInput();
        long long24 = inflater18.getBytesRead();
        int int25 = inflater18.getTotalOut();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        int int44 = inflater26.inflate(byteArray42);
        boolean boolean45 = inflater26.finished();
        int int46 = inflater26.getTotalIn();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        inflater47.reset();
        boolean boolean54 = inflater47.needsDictionary();
        int int55 = inflater47.getTotalIn();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        boolean boolean60 = inflater56.needsInput();
        int int61 = inflater56.getRemaining();
        inflater56.reset();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.needsDictionary();
        boolean boolean67 = inflater63.needsInput();
        int int68 = inflater63.getRemaining();
        inflater63.reset();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.finished();
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater70.setInput(byteArray80);
        inflater63.setInput(byteArray80);
        int int85 = inflater56.inflate(byteArray80, 0, (int) (byte) 0);
        int int86 = inflater47.inflate(byteArray80);
        int int87 = inflater26.inflate(byteArray80);
        int int88 = inflater18.inflate(byteArray80);
        inflater10.setInput(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        int int10 = inflater0.getTotalIn();
        int int11 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.needsDictionary();
        int int7 = inflater5.getTotalOut();
        int int8 = inflater5.getTotalOut();
        long long9 = inflater5.getBytesWritten();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        long long14 = inflater10.getBytesRead();
        boolean boolean15 = inflater10.needsDictionary();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        long long20 = inflater16.getBytesWritten();
        inflater16.reset();
        long long22 = inflater16.getBytesWritten();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater23.inflate(byteArray39);
        inflater16.setInput(byteArray39);
        inflater10.setInput(byteArray39);
        int int44 = inflater5.inflate(byteArray39);
        int int45 = inflater5.getRemaining();
        int int46 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        inflater47.reset();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        long long56 = inflater52.getBytesWritten();
        inflater52.reset();
        long long58 = inflater52.getBytesWritten();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.needsDictionary();
        boolean boolean63 = inflater59.needsInput();
        int int64 = inflater59.getRemaining();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.finished();
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater65.setInput(byteArray75);
        int int77 = inflater59.inflate(byteArray75);
        inflater52.setInput(byteArray75);
        inflater47.setInput(byteArray75);
        int int80 = inflater5.inflate(byteArray75);
        inflater0.setInput(byteArray75, (int) (byte) 1, 0);
        int int84 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        int int6 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        int int28 = inflater0.getTotalOut();
        boolean boolean29 = inflater0.finished();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater30.reset();
        long long35 = inflater30.getBytesWritten();
        boolean boolean36 = inflater30.needsInput();
        boolean boolean37 = inflater30.finished();
        int int38 = inflater30.getTotalOut();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater(true);
        int int41 = inflater40.getRemaining();
        long long42 = inflater40.getBytesRead();
        int int43 = inflater40.getTotalIn();
        int int44 = inflater40.getRemaining();
        inflater40.reset();
        boolean boolean46 = inflater40.finished();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.needsDictionary();
        int int49 = inflater47.getTotalOut();
        long long50 = inflater47.getBytesWritten();
        boolean boolean51 = inflater47.needsInput();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.needsDictionary();
        boolean boolean56 = inflater52.needsInput();
        long long57 = inflater52.getBytesWritten();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater(true);
        int int60 = inflater59.getRemaining();
        long long61 = inflater59.getBytesRead();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        inflater62.end();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater62.setInput(byteArray76);
        inflater59.setInput(byteArray76, (int) (byte) 1, (int) (short) 1);
        int int82 = inflater52.inflate(byteArray76);
        int int83 = inflater47.inflate(byteArray76);
        inflater40.setDictionary(byteArray76);
        inflater30.setInput(byteArray76);
        inflater0.setInput(byteArray76);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        long long7 = inflater0.getBytesRead();
        long long8 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        inflater9.setInput(byteArray23);
        int int26 = inflater9.getRemaining();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        boolean boolean31 = inflater27.needsInput();
        int int32 = inflater27.getRemaining();
        inflater27.reset();
        boolean boolean34 = inflater27.needsDictionary();
        int int35 = inflater27.getTotalOut();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        boolean boolean40 = inflater36.finished();
        inflater36.end();
        inflater36.end();
        boolean boolean43 = inflater36.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.finished();
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater50.setInput(byteArray60);
        int int62 = inflater44.inflate(byteArray60);
        boolean boolean63 = inflater44.finished();
        int int64 = inflater44.getAdler();
        boolean boolean65 = inflater44.finished();
        int int66 = inflater44.getAdler();
        boolean boolean67 = inflater44.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        byte[] byteArray70 = new byte[] { (byte) 1 };
        int int71 = inflater68.inflate(byteArray70);
        int int72 = inflater68.getTotalIn();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        byte[] byteArray75 = new byte[] { (byte) 1 };
        int int76 = inflater73.inflate(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int82 = inflater73.inflate(byteArray81);
        int int83 = inflater68.inflate(byteArray81);
        int int84 = inflater44.inflate(byteArray81);
        inflater36.setInput(byteArray81, (int) (byte) 0, (int) (short) 1);
        int int88 = inflater27.inflate(byteArray81);
        inflater9.setInput(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean9 = inflater0.needsDictionary();
        int int10 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        int int14 = inflater11.getTotalOut();
        inflater11.reset();
        boolean boolean16 = inflater11.needsInput();
        int int17 = inflater11.getRemaining();
        boolean boolean18 = inflater11.finished();
        int int19 = inflater11.getTotalOut();
        int int20 = inflater11.getAdler();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        int int25 = inflater21.getAdler();
        boolean boolean26 = inflater21.finished();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater27.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        long long36 = inflater32.getBytesWritten();
        inflater32.reset();
        long long38 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        boolean boolean43 = inflater39.needsInput();
        int int44 = inflater39.getRemaining();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        int int57 = inflater39.inflate(byteArray55);
        inflater32.setInput(byteArray55);
        inflater27.setInput(byteArray55);
        inflater21.setInput(byteArray55, (int) (byte) 0, 1);
        int int63 = inflater21.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.needsDictionary();
        int int66 = inflater64.getTotalOut();
        int int67 = inflater64.getTotalOut();
        boolean boolean68 = inflater64.needsInput();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        inflater69.reset();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        byte[] byteArray76 = new byte[] { (byte) 1 };
        int int77 = inflater74.inflate(byteArray76);
        int int78 = inflater74.getTotalIn();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        byte[] byteArray81 = new byte[] { (byte) 1 };
        int int82 = inflater79.inflate(byteArray81);
        byte[] byteArray87 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int88 = inflater79.inflate(byteArray87);
        int int89 = inflater74.inflate(byteArray87);
        inflater69.setInput(byteArray87);
        inflater64.setInput(byteArray87);
        inflater21.setInput(byteArray87);
        int int93 = inflater11.inflate(byteArray87);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray87, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        boolean boolean4 = inflater1.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater(true);
        int int7 = inflater6.getRemaining();
        long long8 = inflater6.getBytesRead();
        int int9 = inflater6.getTotalIn();
        long long10 = inflater6.getBytesWritten();
        int int11 = inflater6.getTotalIn();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater12.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        int int21 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int31 = inflater22.inflate(byteArray30);
        int int32 = inflater17.inflate(byteArray30);
        inflater12.setInput(byteArray30);
        int int34 = inflater6.inflate(byteArray30);
        inflater1.setDictionary(byteArray30);
        java.lang.Class<?> wildcardClass36 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        int int6 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        int int10 = inflater7.getTotalOut();
        inflater7.reset();
        boolean boolean12 = inflater7.needsInput();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        long long23 = inflater19.getBytesWritten();
        inflater19.reset();
        long long25 = inflater19.getBytesWritten();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        int int44 = inflater26.inflate(byteArray42);
        inflater19.setInput(byteArray42);
        inflater13.setInput(byteArray42);
        int int47 = inflater7.inflate(byteArray42);
        int int50 = inflater0.inflate(byteArray42, (int) (byte) 1, 1);
        inflater0.reset();
        int int52 = inflater0.getRemaining();
        int int53 = inflater0.getRemaining();
        int int54 = inflater0.getRemaining();
        int int55 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        boolean boolean25 = inflater1.finished();
        boolean boolean26 = inflater1.finished();
        inflater1.end();
        boolean boolean28 = inflater1.finished();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.finished();
        inflater0.reset();
        long long11 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getTotalIn();
        int int17 = inflater12.getTotalOut();
        boolean boolean18 = inflater12.needsInput();
        int int19 = inflater12.getTotalOut();
        long long20 = inflater12.getBytesRead();
        boolean boolean21 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        long long26 = inflater22.getBytesRead();
        long long27 = inflater22.getBytesWritten();
        boolean boolean28 = inflater22.finished();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        inflater29.reset();
        boolean boolean36 = inflater29.needsDictionary();
        int int37 = inflater29.getTotalOut();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        boolean boolean42 = inflater38.finished();
        inflater38.end();
        inflater38.end();
        boolean boolean45 = inflater38.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.needsDictionary();
        boolean boolean50 = inflater46.needsInput();
        int int51 = inflater46.getRemaining();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        int int64 = inflater46.inflate(byteArray62);
        boolean boolean65 = inflater46.finished();
        int int66 = inflater46.getAdler();
        boolean boolean67 = inflater46.finished();
        int int68 = inflater46.getAdler();
        boolean boolean69 = inflater46.needsInput();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        byte[] byteArray72 = new byte[] { (byte) 1 };
        int int73 = inflater70.inflate(byteArray72);
        int int74 = inflater70.getTotalIn();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        byte[] byteArray77 = new byte[] { (byte) 1 };
        int int78 = inflater75.inflate(byteArray77);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int84 = inflater75.inflate(byteArray83);
        int int85 = inflater70.inflate(byteArray83);
        int int86 = inflater46.inflate(byteArray83);
        inflater38.setInput(byteArray83, (int) (byte) 0, (int) (short) 1);
        int int90 = inflater29.inflate(byteArray83);
        inflater22.setInput(byteArray83, (int) (byte) 0, 1);
        int int94 = inflater12.inflate(byteArray83);
        inflater0.setInput(byteArray83);
        byte[] byteArray96 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray96, 10, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        inflater0.reset();
        int int3 = inflater0.getAdler();
        boolean boolean4 = inflater0.needsDictionary();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getAdler();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        inflater0.reset();
        inflater0.reset();
        inflater0.reset();
        long long30 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsInput();
        int int8 = inflater0.getRemaining();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        int int11 = inflater9.getTotalOut();
        int int12 = inflater9.getTotalOut();
        int int13 = inflater9.getAdler();
        inflater9.reset();
        long long15 = inflater9.getBytesWritten();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.needsDictionary();
        boolean boolean20 = inflater16.needsInput();
        int int21 = inflater16.getRemaining();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        int int34 = inflater16.inflate(byteArray32);
        boolean boolean35 = inflater16.finished();
        int int36 = inflater16.getAdler();
        boolean boolean37 = inflater16.finished();
        int int38 = inflater16.getAdler();
        boolean boolean39 = inflater16.needsInput();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        boolean boolean59 = inflater40.finished();
        int int60 = inflater40.getAdler();
        boolean boolean61 = inflater40.finished();
        int int62 = inflater40.getAdler();
        boolean boolean63 = inflater40.needsInput();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        int int68 = inflater64.getTotalIn();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int78 = inflater69.inflate(byteArray77);
        int int79 = inflater64.inflate(byteArray77);
        int int80 = inflater40.inflate(byteArray77);
        int int81 = inflater16.inflate(byteArray77);
        inflater9.setInput(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        int int4 = inflater0.getRemaining();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        boolean boolean10 = inflater5.needsDictionary();
        boolean boolean11 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.needsDictionary();
        int int14 = inflater12.getTotalOut();
        int int15 = inflater12.getTotalOut();
        long long16 = inflater12.getBytesWritten();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        boolean boolean36 = inflater17.finished();
        int int37 = inflater17.getAdler();
        boolean boolean38 = inflater17.finished();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        long long43 = inflater39.getBytesRead();
        boolean boolean44 = inflater39.needsDictionary();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        long long49 = inflater45.getBytesWritten();
        inflater45.reset();
        long long51 = inflater45.getBytesWritten();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.needsDictionary();
        boolean boolean56 = inflater52.needsInput();
        int int57 = inflater52.getRemaining();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        int int70 = inflater52.inflate(byteArray68);
        inflater45.setInput(byteArray68);
        inflater39.setInput(byteArray68);
        inflater17.setInput(byteArray68);
        inflater12.setInput(byteArray68);
        inflater5.setInput(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = inflater0.inflate(byteArray68, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        boolean boolean7 = inflater0.needsInput();
        inflater0.end();
        boolean boolean9 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.finished();
        int int12 = inflater0.getRemaining();
        int int13 = inflater0.getTotalOut();
        int int14 = inflater0.getAdler();
        int int15 = inflater0.getAdler();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalOut();
        int int10 = inflater0.getTotalOut();
        boolean boolean11 = inflater0.needsInput();
        boolean boolean12 = inflater0.needsInput();
        boolean boolean13 = inflater0.finished();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        boolean boolean18 = inflater14.finished();
        inflater14.end();
        inflater14.end();
        boolean boolean21 = inflater14.needsInput();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        inflater22.reset();
        boolean boolean29 = inflater22.needsDictionary();
        int int30 = inflater22.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        inflater31.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        inflater38.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        inflater38.setInput(byteArray55);
        int int60 = inflater31.inflate(byteArray55, 0, (int) (byte) 0);
        int int61 = inflater22.inflate(byteArray55);
        inflater14.setInput(byteArray55);
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater(true);
        int int65 = inflater64.getRemaining();
        long long66 = inflater64.getBytesRead();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        int int71 = inflater64.inflate(byteArray69);
        inflater14.setInput(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray69, 0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsInput();
        int int9 = inflater0.getTotalIn();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsDictionary();
        int int23 = inflater0.getAdler();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        inflater43.setInput(byteArray57);
        inflater24.setInput(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray57, (int) 'a', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        boolean boolean41 = inflater0.needsInput();
        inflater0.reset();
        inflater0.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        inflater44.end();
        boolean boolean48 = inflater44.needsInput();
        boolean boolean49 = inflater44.needsDictionary();
        boolean boolean50 = inflater44.needsDictionary();
        boolean boolean51 = inflater44.needsDictionary();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.needsDictionary();
        int int54 = inflater52.getTotalOut();
        int int55 = inflater52.getTotalOut();
        boolean boolean56 = inflater52.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        inflater57.reset();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        int int66 = inflater62.getTotalIn();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int76 = inflater67.inflate(byteArray75);
        int int77 = inflater62.inflate(byteArray75);
        inflater57.setInput(byteArray75);
        inflater52.setInput(byteArray75);
        inflater44.setInput(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray75, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getAdler();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater10.setInput(byteArray24);
        inflater5.setInput(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = inflater0.inflate(byteArray24, (-1), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        int int11 = inflater9.getTotalOut();
        int int12 = inflater9.getTotalOut();
        boolean boolean13 = inflater9.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        inflater14.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int33 = inflater24.inflate(byteArray32);
        int int34 = inflater19.inflate(byteArray32);
        inflater14.setInput(byteArray32);
        inflater9.setInput(byteArray32);
        int int37 = inflater0.inflate(byteArray32);
        boolean boolean38 = inflater0.needsDictionary();
        int int39 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        long long44 = inflater40.getBytesRead();
        boolean boolean45 = inflater40.needsInput();
        boolean boolean46 = inflater40.finished();
        boolean boolean47 = inflater40.needsInput();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.finished();
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater54.setInput(byteArray64);
        int int66 = inflater48.inflate(byteArray64);
        boolean boolean67 = inflater48.finished();
        int int68 = inflater48.getAdler();
        boolean boolean69 = inflater48.finished();
        int int70 = inflater48.getAdler();
        boolean boolean71 = inflater48.needsInput();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        byte[] byteArray74 = new byte[] { (byte) 1 };
        int int75 = inflater72.inflate(byteArray74);
        int int76 = inflater72.getTotalIn();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        byte[] byteArray79 = new byte[] { (byte) 1 };
        int int80 = inflater77.inflate(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int86 = inflater77.inflate(byteArray85);
        int int87 = inflater72.inflate(byteArray85);
        int int88 = inflater48.inflate(byteArray85);
        inflater40.setInput(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray85, (int) (short) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.needsInput();
        boolean boolean10 = inflater0.needsInput();
        long long11 = inflater0.getBytesRead();
        boolean boolean12 = inflater0.needsInput();
        byte[] byteArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = inflater0.inflate(byteArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.finished();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater9.setInput(byteArray26);
        int int29 = inflater9.getTotalOut();
        boolean boolean30 = inflater9.needsDictionary();
        long long31 = inflater9.getBytesWritten();
        int int32 = inflater9.getRemaining();
        int int33 = inflater9.getRemaining();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        boolean boolean38 = inflater34.finished();
        inflater34.end();
        inflater34.end();
        boolean boolean41 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        inflater42.setInput(byteArray56);
        inflater34.setInput(byteArray56);
        inflater9.setInput(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = inflater0.inflate(byteArray56, (int) (short) 10, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater5.setInput(byteArray12);
        int int15 = inflater0.inflate(byteArray12);
        int int16 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        boolean boolean21 = inflater17.finished();
        inflater17.end();
        inflater17.end();
        boolean boolean24 = inflater17.needsInput();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        boolean boolean44 = inflater25.finished();
        int int45 = inflater25.getAdler();
        boolean boolean46 = inflater25.finished();
        int int47 = inflater25.getAdler();
        boolean boolean48 = inflater25.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        int int53 = inflater49.getTotalIn();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        byte[] byteArray62 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int63 = inflater54.inflate(byteArray62);
        int int64 = inflater49.inflate(byteArray62);
        int int65 = inflater25.inflate(byteArray62);
        inflater17.setInput(byteArray62, (int) (byte) 0, (int) (short) 1);
        inflater0.setInput(byteArray62);
        boolean boolean70 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.reset();
        boolean boolean2 = inflater0.needsInput();
        int int3 = inflater0.getTotalIn();
        int int4 = inflater0.getRemaining();
        int int5 = inflater0.getTotalIn();
        inflater0.reset();
        int int7 = inflater0.getAdler();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        boolean boolean8 = inflater6.needsInput();
        boolean boolean9 = inflater6.needsInput();
        inflater6.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater(false);
        int int13 = inflater12.getTotalIn();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        inflater14.reset();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater21.setInput(byteArray31);
        inflater14.setInput(byteArray31);
        int int34 = inflater14.getTotalOut();
        boolean boolean35 = inflater14.needsInput();
        boolean boolean36 = inflater14.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        inflater41.end();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        inflater41.setInput(byteArray55);
        int int58 = inflater37.inflate(byteArray55);
        inflater14.setInput(byteArray55, (int) (byte) 0, (int) (byte) 1);
        int int62 = inflater12.inflate(byteArray55);
        inflater6.setInput(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        boolean boolean4 = inflater1.needsInput();
        inflater1.reset();
        boolean boolean6 = inflater1.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater9.setInput(byteArray26);
        inflater7.setInput(byteArray26);
        inflater1.setDictionary(byteArray26);
        int int31 = inflater1.getRemaining();
        long long32 = inflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        long long26 = inflater1.getBytesRead();
        boolean boolean27 = inflater1.finished();
        long long28 = inflater1.getBytesWritten();
        int int29 = inflater1.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getTotalIn();
        boolean boolean36 = inflater30.finished();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        int int41 = inflater37.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int51 = inflater42.inflate(byteArray50);
        int int52 = inflater37.inflate(byteArray50);
        int int53 = inflater30.inflate(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray50, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        boolean boolean22 = inflater0.needsInput();
        boolean boolean23 = inflater0.needsInput();
        long long24 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        long long29 = inflater25.getBytesRead();
        boolean boolean30 = inflater25.needsInput();
        int int31 = inflater25.getTotalOut();
        long long32 = inflater25.getBytesRead();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        inflater33.reset();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        inflater33.setInput(byteArray50);
        int int55 = inflater25.inflate(byteArray50, 1, (int) (short) 1);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.finished();
        int int60 = inflater56.getAdler();
        int int61 = inflater56.getAdler();
        int int62 = inflater56.getAdler();
        int int63 = inflater56.getTotalOut();
        inflater56.reset();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.needsDictionary();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        int int69 = inflater67.getRemaining();
        boolean boolean70 = inflater67.needsDictionary();
        boolean boolean71 = inflater67.needsInput();
        int int72 = inflater67.getRemaining();
        inflater67.reset();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.finished();
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater74.setInput(byteArray84);
        inflater67.setInput(byteArray84);
        inflater65.setInput(byteArray84);
        inflater56.setInput(byteArray84, (int) (byte) 0, 0);
        int int91 = inflater25.inflate(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.finished();
        inflater0.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.needsDictionary();
        int int12 = inflater10.getTotalOut();
        boolean boolean13 = inflater10.finished();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        boolean boolean19 = inflater14.needsDictionary();
        boolean boolean20 = inflater14.finished();
        int int21 = inflater14.getTotalIn();
        int int22 = inflater14.getRemaining();
        long long23 = inflater14.getBytesWritten();
        int int24 = inflater14.getTotalOut();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        inflater25.end();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        inflater25.setInput(byteArray39);
        int int42 = inflater14.inflate(byteArray39);
        int int43 = inflater10.inflate(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        int int15 = inflater11.getTotalIn();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int25 = inflater16.inflate(byteArray24);
        int int26 = inflater11.inflate(byteArray24);
        inflater6.setInput(byteArray24);
        inflater0.setInput(byteArray24);
        int int29 = inflater0.getTotalIn();
        long long30 = inflater0.getBytesWritten();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        long long23 = inflater0.getBytesWritten();
        long long24 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater(true);
        int int27 = inflater26.getRemaining();
        long long28 = inflater26.getBytesRead();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        inflater29.end();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater33.setInput(byteArray43);
        inflater29.setInput(byteArray43);
        inflater26.setInput(byteArray43, (int) (byte) 1, (int) (short) 1);
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        inflater49.reset();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        boolean boolean60 = inflater56.needsInput();
        int int61 = inflater56.getRemaining();
        inflater56.reset();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.finished();
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater63.setInput(byteArray73);
        inflater56.setInput(byteArray73);
        int int78 = inflater49.inflate(byteArray73, 0, (int) (byte) 0);
        inflater26.setInput(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = inflater0.inflate(byteArray73);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        int int25 = inflater0.getAdler();
        boolean boolean26 = inflater0.needsInput();
        inflater0.end();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater(true);
        int int30 = inflater29.getRemaining();
        long long31 = inflater29.getBytesRead();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater29.inflate(byteArray34);
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int46 = inflater37.inflate(byteArray45);
        boolean boolean47 = inflater37.needsInput();
        boolean boolean48 = inflater37.needsDictionary();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        long long53 = inflater49.getBytesRead();
        boolean boolean54 = inflater49.needsInput();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        long long59 = inflater55.getBytesWritten();
        inflater55.reset();
        long long61 = inflater55.getBytesWritten();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsDictionary();
        boolean boolean66 = inflater62.needsInput();
        int int67 = inflater62.getRemaining();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        int int80 = inflater62.inflate(byteArray78);
        inflater55.setInput(byteArray78);
        int int82 = inflater49.inflate(byteArray78);
        inflater37.setInput(byteArray78, 0, (int) (byte) 0);
        inflater29.setDictionary(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray78, (int) 'a', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        long long18 = inflater0.getBytesRead();
        long long19 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        int int24 = inflater20.getAdler();
        int int25 = inflater20.getAdler();
        long long26 = inflater20.getBytesWritten();
        long long27 = inflater20.getBytesRead();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getAdler();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        long long37 = inflater33.getBytesRead();
        boolean boolean38 = inflater33.finished();
        long long39 = inflater33.getBytesRead();
        boolean boolean40 = inflater33.needsDictionary();
        boolean boolean41 = inflater33.needsDictionary();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.needsDictionary();
        int int44 = inflater42.getTotalOut();
        int int45 = inflater42.getTotalOut();
        boolean boolean46 = inflater42.needsInput();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        inflater47.reset();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        int int56 = inflater52.getTotalIn();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int66 = inflater57.inflate(byteArray65);
        int int67 = inflater52.inflate(byteArray65);
        inflater47.setInput(byteArray65);
        inflater42.setInput(byteArray65);
        int int70 = inflater33.inflate(byteArray65);
        inflater28.setInput(byteArray65);
        int int72 = inflater20.inflate(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        int int12 = inflater8.getAdler();
        int int13 = inflater8.getAdler();
        int int14 = inflater8.getAdler();
        int int15 = inflater8.getTotalOut();
        inflater8.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.needsDictionary();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        int int24 = inflater19.getRemaining();
        inflater19.reset();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        inflater19.setInput(byteArray36);
        inflater17.setInput(byteArray36);
        inflater8.setInput(byteArray36, (int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = inflater0.inflate(byteArray36, 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getTotalOut();
        int int8 = inflater0.getTotalIn();
        int int9 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        int int5 = inflater1.getRemaining();
        inflater1.reset();
        long long7 = inflater1.getBytesRead();
        boolean boolean8 = inflater1.finished();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater(true);
        int int11 = inflater10.getRemaining();
        long long12 = inflater10.getBytesRead();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        inflater13.end();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        inflater13.setInput(byteArray27);
        inflater10.setInput(byteArray27, (int) (byte) 1, (int) (short) 1);
        int int33 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        inflater34.reset();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        int int47 = inflater44.getTotalOut();
        inflater44.reset();
        boolean boolean49 = inflater44.needsInput();
        int int50 = inflater44.getRemaining();
        boolean boolean51 = inflater44.finished();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        boolean boolean56 = inflater52.finished();
        inflater52.end();
        inflater52.end();
        boolean boolean59 = inflater52.needsDictionary();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.needsInput();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater64.setInput(byteArray74);
        inflater60.setInput(byteArray74);
        inflater52.setInput(byteArray74);
        int int80 = inflater44.inflate(byteArray74, 6, (int) (short) 0);
        int int81 = inflater41.inflate(byteArray74);
        inflater34.setInput(byteArray74, (int) (byte) 0, (int) (byte) 1);
        int int87 = inflater10.inflate(byteArray74, 1, 0);
        inflater1.setDictionary(byteArray74);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        long long23 = inflater0.getBytesWritten();
        long long24 = inflater0.getBytesWritten();
        int int25 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        long long30 = inflater26.getBytesWritten();
        inflater26.reset();
        int int32 = inflater26.getRemaining();
        boolean boolean33 = inflater26.needsDictionary();
        boolean boolean34 = inflater26.needsDictionary();
        inflater26.reset();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater(true);
        int int38 = inflater37.getRemaining();
        long long39 = inflater37.getBytesRead();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        int int44 = inflater37.inflate(byteArray42);
        int int45 = inflater37.getAdler();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        int int50 = inflater46.getTotalIn();
        int int51 = inflater46.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        long long56 = inflater52.getBytesRead();
        boolean boolean57 = inflater52.finished();
        long long58 = inflater52.getBytesRead();
        boolean boolean59 = inflater52.needsDictionary();
        boolean boolean60 = inflater52.needsDictionary();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.needsDictionary();
        int int63 = inflater61.getTotalOut();
        int int64 = inflater61.getTotalOut();
        boolean boolean65 = inflater61.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        int int69 = inflater66.inflate(byteArray68);
        inflater66.reset();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        byte[] byteArray73 = new byte[] { (byte) 1 };
        int int74 = inflater71.inflate(byteArray73);
        int int75 = inflater71.getTotalIn();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        byte[] byteArray78 = new byte[] { (byte) 1 };
        int int79 = inflater76.inflate(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int85 = inflater76.inflate(byteArray84);
        int int86 = inflater71.inflate(byteArray84);
        inflater66.setInput(byteArray84);
        inflater61.setInput(byteArray84);
        int int89 = inflater52.inflate(byteArray84);
        inflater46.setInput(byteArray84);
        inflater37.setDictionary(byteArray84);
        int int92 = inflater26.inflate(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = inflater0.inflate(byteArray84, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        int int13 = inflater0.getRemaining();
        long long14 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        inflater15.setInput(byteArray29);
        inflater0.setInput(byteArray29);
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        int int40 = inflater33.getTotalIn();
        boolean boolean41 = inflater33.needsDictionary();
        int int42 = inflater33.getTotalIn();
        int int43 = inflater33.getTotalIn();
        boolean boolean44 = inflater33.needsInput();
        inflater33.reset();
        long long46 = inflater33.getBytesRead();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        int int65 = inflater47.inflate(byteArray63);
        boolean boolean66 = inflater47.finished();
        int int67 = inflater47.getTotalOut();
        boolean boolean68 = inflater47.needsInput();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        int int73 = inflater69.getAdler();
        int int74 = inflater69.getAdler();
        long long75 = inflater69.getBytesWritten();
        long long76 = inflater69.getBytesRead();
        boolean boolean77 = inflater69.finished();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        boolean boolean79 = inflater78.finished();
        int int80 = inflater78.getRemaining();
        boolean boolean81 = inflater78.finished();
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater78.setInput(byteArray88);
        int int90 = inflater69.inflate(byteArray88);
        inflater47.setInput(byteArray88);
        inflater33.setInput(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray88, (int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        int int10 = inflater6.getAdler();
        boolean boolean11 = inflater6.finished();
        long long12 = inflater6.getBytesWritten();
        long long13 = inflater6.getBytesRead();
        boolean boolean14 = inflater6.needsInput();
        long long15 = inflater6.getBytesRead();
        boolean boolean16 = inflater6.finished();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater(true);
        int int19 = inflater18.getRemaining();
        long long20 = inflater18.getBytesRead();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        int int25 = inflater18.inflate(byteArray23);
        int int26 = inflater6.inflate(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray23, (int) (short) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        boolean boolean9 = inflater1.needsInput();
        boolean boolean10 = inflater1.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater(false);
        int int13 = inflater12.getTotalIn();
        boolean boolean14 = inflater12.finished();
        boolean boolean15 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        long long20 = inflater16.getBytesRead();
        inflater16.reset();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        boolean boolean27 = inflater22.needsDictionary();
        boolean boolean28 = inflater22.needsDictionary();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater22.inflate(byteArray39);
        int int42 = inflater16.inflate(byteArray39);
        inflater12.setInput(byteArray39, (int) (byte) 0, 0);
        inflater1.setInput(byteArray39);
        int int47 = inflater1.getAdler();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.needsDictionary();
        int int50 = inflater48.getTotalOut();
        long long51 = inflater48.getBytesWritten();
        boolean boolean52 = inflater48.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.needsDictionary();
        boolean boolean57 = inflater53.needsInput();
        long long58 = inflater53.getBytesWritten();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater(true);
        int int61 = inflater60.getRemaining();
        long long62 = inflater60.getBytesRead();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        inflater63.end();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        int int69 = inflater67.getRemaining();
        boolean boolean70 = inflater67.finished();
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater67.setInput(byteArray77);
        inflater63.setInput(byteArray77);
        inflater60.setInput(byteArray77, (int) (byte) 1, (int) (short) 1);
        int int83 = inflater53.inflate(byteArray77);
        int int84 = inflater48.inflate(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray77, 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalOut();
        long long25 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.needsDictionary();
        int int28 = inflater26.getTotalOut();
        int int29 = inflater26.getTotalOut();
        int int30 = inflater26.getAdler();
        boolean boolean31 = inflater26.needsDictionary();
        int int32 = inflater26.getTotalOut();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        boolean boolean37 = inflater33.finished();
        inflater33.end();
        inflater33.end();
        boolean boolean40 = inflater33.needsInput();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        inflater41.reset();
        boolean boolean48 = inflater41.needsDictionary();
        int int49 = inflater41.getTotalIn();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.needsDictionary();
        boolean boolean54 = inflater50.needsInput();
        int int55 = inflater50.getRemaining();
        inflater50.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsDictionary();
        boolean boolean61 = inflater57.needsInput();
        int int62 = inflater57.getRemaining();
        inflater57.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater64.setInput(byteArray74);
        inflater57.setInput(byteArray74);
        int int79 = inflater50.inflate(byteArray74, 0, (int) (byte) 0);
        int int80 = inflater41.inflate(byteArray74);
        inflater33.setInput(byteArray74);
        int int84 = inflater26.inflate(byteArray74, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = inflater0.inflate(byteArray74, (int) (short) 10, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        int int33 = inflater0.inflate(byteArray29);
        long long34 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        inflater35.end();
        boolean boolean39 = inflater35.needsInput();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        inflater35.setInput(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray42, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        int int21 = inflater0.getTotalIn();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getTotalOut();
        boolean boolean24 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.needsInput();
        boolean boolean9 = inflater0.needsDictionary();
        boolean boolean10 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        inflater0.end();
        int int24 = inflater0.getRemaining();
        int int25 = inflater0.getRemaining();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        int int40 = inflater0.inflate(byteArray37);
        long long41 = inflater0.getBytesRead();
        int int42 = inflater0.getRemaining();
        int int43 = inflater0.getAdler();
        boolean boolean44 = inflater0.finished();
        int int45 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        int int10 = inflater7.getTotalOut();
        long long11 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        int int30 = inflater12.inflate(byteArray28);
        boolean boolean31 = inflater12.finished();
        int int32 = inflater12.getAdler();
        boolean boolean33 = inflater12.finished();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        long long38 = inflater34.getBytesRead();
        boolean boolean39 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        long long44 = inflater40.getBytesWritten();
        inflater40.reset();
        long long46 = inflater40.getBytesWritten();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        int int65 = inflater47.inflate(byteArray63);
        inflater40.setInput(byteArray63);
        inflater34.setInput(byteArray63);
        inflater12.setInput(byteArray63);
        inflater7.setInput(byteArray63);
        inflater0.setInput(byteArray63);
        int int71 = inflater0.getRemaining();
        boolean boolean72 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsDictionary();
        boolean boolean7 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        inflater0.reset();
        long long28 = inflater0.getBytesWritten();
        int int29 = inflater0.getRemaining();
        long long30 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        int int35 = inflater31.getAdler();
        inflater31.reset();
        boolean boolean37 = inflater31.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        inflater38.end();
        boolean boolean42 = inflater38.needsInput();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        long long47 = inflater43.getBytesRead();
        boolean boolean48 = inflater43.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        long long53 = inflater49.getBytesWritten();
        inflater49.reset();
        long long55 = inflater49.getBytesWritten();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        boolean boolean60 = inflater56.needsInput();
        int int61 = inflater56.getRemaining();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.finished();
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater62.setInput(byteArray72);
        int int74 = inflater56.inflate(byteArray72);
        inflater49.setInput(byteArray72);
        int int76 = inflater43.inflate(byteArray72);
        inflater38.setInput(byteArray72);
        inflater31.setInput(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray72, 4, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getRemaining();
        long long7 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        int int10 = inflater7.getTotalOut();
        long long11 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        long long22 = inflater18.getBytesWritten();
        inflater18.reset();
        long long24 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        inflater18.setInput(byteArray41);
        inflater12.setInput(byteArray41);
        int int46 = inflater7.inflate(byteArray41);
        int int47 = inflater0.inflate(byteArray41);
        java.lang.Class<?> wildcardClass48 = byteArray41.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        int int7 = inflater0.getTotalOut();
        long long8 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater9.setInput(byteArray26);
        int int29 = inflater9.getTotalOut();
        boolean boolean30 = inflater9.needsDictionary();
        long long31 = inflater9.getBytesWritten();
        boolean boolean32 = inflater9.needsInput();
        int int33 = inflater9.getRemaining();
        boolean boolean34 = inflater9.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int44 = inflater35.inflate(byteArray43);
        boolean boolean45 = inflater35.needsInput();
        boolean boolean46 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        long long51 = inflater47.getBytesRead();
        boolean boolean52 = inflater47.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        long long57 = inflater53.getBytesWritten();
        inflater53.reset();
        long long59 = inflater53.getBytesWritten();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.needsDictionary();
        boolean boolean64 = inflater60.needsInput();
        int int65 = inflater60.getRemaining();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        int int78 = inflater60.inflate(byteArray76);
        inflater53.setInput(byteArray76);
        int int80 = inflater47.inflate(byteArray76);
        inflater35.setInput(byteArray76, 0, (int) (byte) 0);
        inflater9.setInput(byteArray76, (int) (short) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        boolean boolean10 = inflater6.finished();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getAdler();
        boolean boolean17 = inflater12.finished();
        long long18 = inflater12.getBytesWritten();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        boolean boolean21 = inflater19.needsInput();
        boolean boolean22 = inflater19.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        long long27 = inflater23.getBytesRead();
        boolean boolean28 = inflater23.needsDictionary();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        long long33 = inflater29.getBytesWritten();
        inflater29.reset();
        long long35 = inflater29.getBytesWritten();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        int int41 = inflater36.getRemaining();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater42.setInput(byteArray52);
        int int54 = inflater36.inflate(byteArray52);
        inflater29.setInput(byteArray52);
        inflater23.setInput(byteArray52);
        int int57 = inflater19.inflate(byteArray52);
        int int58 = inflater12.inflate(byteArray52);
        inflater6.setInput(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray52, (int) (byte) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        int int40 = inflater0.inflate(byteArray37);
        long long41 = inflater0.getBytesRead();
        int int42 = inflater0.getTotalIn();
        long long43 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater(false);
        boolean boolean46 = inflater45.finished();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        int int51 = inflater47.getTotalIn();
        int int52 = inflater47.getTotalIn();
        int int53 = inflater47.getRemaining();
        boolean boolean54 = inflater47.needsInput();
        int int55 = inflater47.getAdler();
        int int56 = inflater47.getTotalOut();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        int int61 = inflater57.getAdler();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        inflater62.end();
        boolean boolean66 = inflater62.needsInput();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        inflater62.setInput(byteArray69);
        int int72 = inflater57.inflate(byteArray69);
        inflater47.setInput(byteArray69);
        inflater45.setInput(byteArray69);
        int int75 = inflater0.inflate(byteArray69);
        int int76 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        boolean boolean4 = inflater0.needsDictionary();
        int int5 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.finished();
        inflater0.reset();
        long long11 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getTotalIn();
        int int17 = inflater12.getTotalOut();
        boolean boolean18 = inflater12.needsInput();
        int int19 = inflater12.getTotalOut();
        long long20 = inflater12.getBytesRead();
        boolean boolean21 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        long long26 = inflater22.getBytesRead();
        long long27 = inflater22.getBytesWritten();
        boolean boolean28 = inflater22.finished();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        inflater29.reset();
        boolean boolean36 = inflater29.needsDictionary();
        int int37 = inflater29.getTotalOut();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        boolean boolean42 = inflater38.finished();
        inflater38.end();
        inflater38.end();
        boolean boolean45 = inflater38.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.needsDictionary();
        boolean boolean50 = inflater46.needsInput();
        int int51 = inflater46.getRemaining();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        int int64 = inflater46.inflate(byteArray62);
        boolean boolean65 = inflater46.finished();
        int int66 = inflater46.getAdler();
        boolean boolean67 = inflater46.finished();
        int int68 = inflater46.getAdler();
        boolean boolean69 = inflater46.needsInput();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        byte[] byteArray72 = new byte[] { (byte) 1 };
        int int73 = inflater70.inflate(byteArray72);
        int int74 = inflater70.getTotalIn();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        byte[] byteArray77 = new byte[] { (byte) 1 };
        int int78 = inflater75.inflate(byteArray77);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int84 = inflater75.inflate(byteArray83);
        int int85 = inflater70.inflate(byteArray83);
        int int86 = inflater46.inflate(byteArray83);
        inflater38.setInput(byteArray83, (int) (byte) 0, (int) (short) 1);
        int int90 = inflater29.inflate(byteArray83);
        inflater22.setInput(byteArray83, (int) (byte) 0, 1);
        int int94 = inflater12.inflate(byteArray83);
        inflater0.setInput(byteArray83);
        java.lang.Class<?> wildcardClass96 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        boolean boolean42 = inflater0.finished();
        inflater0.reset();
        long long44 = inflater0.getBytesWritten();
        int int45 = inflater0.getRemaining();
        boolean boolean46 = inflater0.needsInput();
        boolean boolean47 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        inflater4.reset();
        long long9 = inflater4.getBytesWritten();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        long long14 = inflater10.getBytesWritten();
        boolean boolean15 = inflater10.needsInput();
        int int16 = inflater10.getRemaining();
        int int17 = inflater10.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        inflater18.setInput(byteArray32);
        inflater10.setInput(byteArray32, (int) (byte) 1, (int) (byte) 0);
        inflater4.setInput(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray32, 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        int int25 = inflater0.getRemaining();
        int int26 = inflater0.getAdler();
        inflater0.reset();
        int int28 = inflater0.getRemaining();
        int int29 = inflater0.getAdler();
        java.lang.Class<?> wildcardClass30 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater9.setInput(byteArray26);
        int int29 = inflater9.getRemaining();
        boolean boolean30 = inflater9.finished();
        inflater9.reset();
        int int32 = inflater9.getAdler();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        int int37 = inflater33.getTotalIn();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int47 = inflater38.inflate(byteArray46);
        int int48 = inflater33.inflate(byteArray46);
        int int49 = inflater33.getTotalOut();
        int int50 = inflater33.getTotalOut();
        long long51 = inflater33.getBytesRead();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        long long56 = inflater52.getBytesRead();
        boolean boolean57 = inflater52.finished();
        long long58 = inflater52.getBytesRead();
        boolean boolean59 = inflater52.needsDictionary();
        boolean boolean60 = inflater52.needsDictionary();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.needsDictionary();
        int int63 = inflater61.getTotalOut();
        int int64 = inflater61.getTotalOut();
        boolean boolean65 = inflater61.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        int int69 = inflater66.inflate(byteArray68);
        inflater66.reset();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        byte[] byteArray73 = new byte[] { (byte) 1 };
        int int74 = inflater71.inflate(byteArray73);
        int int75 = inflater71.getTotalIn();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        byte[] byteArray78 = new byte[] { (byte) 1 };
        int int79 = inflater76.inflate(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int85 = inflater76.inflate(byteArray84);
        int int86 = inflater71.inflate(byteArray84);
        inflater66.setInput(byteArray84);
        inflater61.setInput(byteArray84);
        int int89 = inflater52.inflate(byteArray84);
        inflater33.setInput(byteArray84);
        int int91 = inflater9.inflate(byteArray84);
        int int92 = inflater0.inflate(byteArray84);
        int int93 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass94 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        int int33 = inflater0.inflate(byteArray29);
        boolean boolean34 = inflater0.finished();
        int int35 = inflater0.getRemaining();
        int int36 = inflater0.getTotalIn();
        boolean boolean37 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        int int25 = inflater0.getRemaining();
        int int26 = inflater0.getAdler();
        inflater0.reset();
        inflater0.reset();
        boolean boolean29 = inflater0.finished();
        boolean boolean30 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        boolean boolean8 = inflater6.needsInput();
        boolean boolean9 = inflater6.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        long long14 = inflater10.getBytesRead();
        boolean boolean15 = inflater10.needsDictionary();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        long long20 = inflater16.getBytesWritten();
        inflater16.reset();
        long long22 = inflater16.getBytesWritten();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater23.inflate(byteArray39);
        inflater16.setInput(byteArray39);
        inflater10.setInput(byteArray39);
        int int44 = inflater6.inflate(byteArray39);
        int int45 = inflater0.inflate(byteArray39);
        int int46 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsDictionary();
        inflater0.end();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray7, (int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        inflater0.end();
        boolean boolean10 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        boolean boolean24 = inflater0.needsDictionary();
        int int25 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        boolean boolean30 = inflater26.finished();
        int int31 = inflater26.getRemaining();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getAdler();
        boolean boolean37 = inflater32.finished();
        long long38 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        boolean boolean41 = inflater39.needsInput();
        boolean boolean42 = inflater39.needsInput();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        long long47 = inflater43.getBytesRead();
        boolean boolean48 = inflater43.needsDictionary();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        long long53 = inflater49.getBytesWritten();
        inflater49.reset();
        long long55 = inflater49.getBytesWritten();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        boolean boolean60 = inflater56.needsInput();
        int int61 = inflater56.getRemaining();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.finished();
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater62.setInput(byteArray72);
        int int74 = inflater56.inflate(byteArray72);
        inflater49.setInput(byteArray72);
        inflater43.setInput(byteArray72);
        int int77 = inflater39.inflate(byteArray72);
        int int78 = inflater32.inflate(byteArray72);
        inflater26.setInput(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray72, (int) '4', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.finished();
        long long12 = inflater6.getBytesRead();
        boolean boolean13 = inflater6.needsDictionary();
        boolean boolean14 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.needsDictionary();
        int int17 = inflater15.getTotalOut();
        int int18 = inflater15.getTotalOut();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater20.reset();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        int int29 = inflater25.getTotalIn();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int39 = inflater30.inflate(byteArray38);
        int int40 = inflater25.inflate(byteArray38);
        inflater20.setInput(byteArray38);
        inflater15.setInput(byteArray38);
        int int43 = inflater6.inflate(byteArray38);
        inflater0.setInput(byteArray38);
        inflater0.end();
        int int46 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getAdler();
        boolean boolean9 = inflater0.finished();
        long long10 = inflater0.getBytesRead();
        int int11 = inflater0.getTotalIn();
        boolean boolean12 = inflater0.finished();
        int int13 = inflater0.getTotalIn();
        int int14 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        int int23 = inflater5.inflate(byteArray21);
        boolean boolean24 = inflater5.finished();
        int int25 = inflater5.getAdler();
        boolean boolean26 = inflater5.finished();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        inflater5.setInput(byteArray56);
        inflater0.setInput(byteArray56);
        int int63 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsDictionary();
        boolean boolean68 = inflater64.needsInput();
        int int69 = inflater64.getRemaining();
        inflater64.reset();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        boolean boolean72 = inflater71.finished();
        int int73 = inflater71.getRemaining();
        boolean boolean74 = inflater71.needsDictionary();
        boolean boolean75 = inflater71.needsInput();
        int int76 = inflater71.getRemaining();
        inflater71.reset();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        boolean boolean79 = inflater78.finished();
        int int80 = inflater78.getRemaining();
        boolean boolean81 = inflater78.finished();
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater78.setInput(byteArray88);
        inflater71.setInput(byteArray88);
        int int93 = inflater64.inflate(byteArray88, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray88, (int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        boolean boolean15 = inflater8.needsInput();
        inflater8.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        long long21 = inflater17.getBytesRead();
        boolean boolean22 = inflater17.needsInput();
        int int23 = inflater17.getTotalOut();
        long long24 = inflater17.getBytesRead();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        inflater25.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        inflater25.setInput(byteArray42);
        int int47 = inflater17.inflate(byteArray42, 1, (int) (short) 1);
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        int int52 = inflater48.getAdler();
        int int53 = inflater48.getAdler();
        int int54 = inflater48.getAdler();
        int int55 = inflater48.getTotalOut();
        inflater48.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.needsDictionary();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.needsDictionary();
        boolean boolean63 = inflater59.needsInput();
        int int64 = inflater59.getRemaining();
        inflater59.reset();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater59.setInput(byteArray76);
        inflater57.setInput(byteArray76);
        inflater48.setInput(byteArray76, (int) (byte) 0, 0);
        int int83 = inflater17.inflate(byteArray76);
        int int84 = inflater8.inflate(byteArray76);
        int int85 = inflater0.inflate(byteArray76);
        boolean boolean86 = inflater0.needsInput();
        int int87 = inflater0.getTotalIn();
        boolean boolean88 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        inflater0.setInput(byteArray34, (int) (byte) 0, 1);
        int int42 = inflater0.getRemaining();
        int int43 = inflater0.getTotalIn();
        int int44 = inflater0.getRemaining();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        int int15 = inflater11.getTotalIn();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int25 = inflater16.inflate(byteArray24);
        int int26 = inflater11.inflate(byteArray24);
        inflater6.setInput(byteArray24);
        inflater0.setInput(byteArray24);
        long long29 = inflater0.getBytesWritten();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        inflater0.end();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        boolean boolean14 = inflater10.needsInput();
        int int15 = inflater10.getRemaining();
        inflater10.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        int int23 = inflater20.getTotalOut();
        inflater20.reset();
        boolean boolean25 = inflater20.needsInput();
        int int26 = inflater20.getRemaining();
        boolean boolean27 = inflater20.finished();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        boolean boolean32 = inflater28.finished();
        inflater28.end();
        inflater28.end();
        boolean boolean35 = inflater28.needsDictionary();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsInput();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        inflater36.setInput(byteArray50);
        inflater28.setInput(byteArray50);
        int int56 = inflater20.inflate(byteArray50, 6, (int) (short) 0);
        int int57 = inflater17.inflate(byteArray50);
        inflater10.setInput(byteArray50, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray50, (int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getTotalIn();
        inflater0.end();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        boolean boolean25 = inflater6.finished();
        int int26 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        int int61 = inflater6.inflate(byteArray56);
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater62.setInput(byteArray76);
        int int79 = inflater6.inflate(byteArray76);
        inflater0.setInput(byteArray76, 0, (int) (short) 0);
        int int83 = inflater0.getTotalOut();
        long long84 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        int int24 = inflater0.getAdler();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        inflater25.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        int int34 = inflater30.getTotalIn();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int44 = inflater35.inflate(byteArray43);
        int int45 = inflater30.inflate(byteArray43);
        inflater25.setInput(byteArray43);
        boolean boolean47 = inflater25.needsDictionary();
        long long48 = inflater25.getBytesWritten();
        int int49 = inflater25.getAdler();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.needsDictionary();
        int int52 = inflater50.getTotalOut();
        int int53 = inflater50.getTotalOut();
        boolean boolean54 = inflater50.needsInput();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        byte[] byteArray57 = new byte[] { (byte) 1 };
        int int58 = inflater55.inflate(byteArray57);
        inflater55.reset();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        byte[] byteArray62 = new byte[] { (byte) 1 };
        int int63 = inflater60.inflate(byteArray62);
        int int64 = inflater60.getTotalIn();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int74 = inflater65.inflate(byteArray73);
        int int75 = inflater60.inflate(byteArray73);
        inflater55.setInput(byteArray73);
        inflater50.setInput(byteArray73);
        inflater25.setInput(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = inflater0.inflate(byteArray73);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        inflater25.setInput(byteArray47);
        inflater0.setInput(byteArray47);
        int int52 = inflater0.getRemaining();
        boolean boolean53 = inflater0.needsInput();
        long long54 = inflater0.getBytesRead();
        boolean boolean55 = inflater0.needsDictionary();
        inflater0.reset();
        inflater0.end();
        java.lang.Class<?> wildcardClass58 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.finished();
        int int9 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        inflater0.reset();
        boolean boolean33 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getAdler();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        boolean boolean12 = inflater7.needsDictionary();
        int int13 = inflater7.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        long long18 = inflater14.getBytesWritten();
        inflater14.reset();
        long long20 = inflater14.getBytesWritten();
        int int21 = inflater14.getTotalIn();
        boolean boolean22 = inflater14.needsDictionary();
        int int23 = inflater14.getTotalOut();
        int int24 = inflater14.getTotalOut();
        boolean boolean25 = inflater14.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater(true);
        int int28 = inflater27.getRemaining();
        long long29 = inflater27.getBytesRead();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        int int34 = inflater27.inflate(byteArray32);
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int44 = inflater35.inflate(byteArray43);
        boolean boolean45 = inflater35.needsInput();
        boolean boolean46 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        long long51 = inflater47.getBytesRead();
        boolean boolean52 = inflater47.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        long long57 = inflater53.getBytesWritten();
        inflater53.reset();
        long long59 = inflater53.getBytesWritten();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.needsDictionary();
        boolean boolean64 = inflater60.needsInput();
        int int65 = inflater60.getRemaining();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        int int78 = inflater60.inflate(byteArray76);
        inflater53.setInput(byteArray76);
        int int80 = inflater47.inflate(byteArray76);
        inflater35.setInput(byteArray76, 0, (int) (byte) 0);
        inflater27.setDictionary(byteArray76);
        inflater14.setInput(byteArray76);
        inflater7.setInput(byteArray76);
        int int87 = inflater0.inflate(byteArray76);
        boolean boolean88 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalIn();
        long long25 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        boolean boolean30 = inflater26.finished();
        inflater26.reset();
        inflater26.reset();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        inflater33.end();
        boolean boolean37 = inflater33.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        inflater38.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        inflater38.setInput(byteArray55);
        inflater33.setInput(byteArray55);
        int int61 = inflater26.inflate(byteArray55, 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        inflater0.reset();
        int int5 = inflater0.getTotalIn();
        boolean boolean6 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.needsDictionary();
        int int12 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        boolean boolean32 = inflater13.finished();
        int int33 = inflater13.getTotalOut();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        long long38 = inflater34.getBytesRead();
        boolean boolean39 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        long long44 = inflater40.getBytesWritten();
        inflater40.reset();
        long long46 = inflater40.getBytesWritten();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        int int65 = inflater47.inflate(byteArray63);
        inflater40.setInput(byteArray63);
        inflater34.setInput(byteArray63);
        int int68 = inflater13.inflate(byteArray63);
        int int69 = inflater0.inflate(byteArray63);
        boolean boolean70 = inflater0.needsDictionary();
        long long71 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getAdler();
        int int8 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater0.setInput(byteArray33);
        long long37 = inflater0.getBytesRead();
        inflater0.reset();
        boolean boolean39 = inflater0.finished();
        long long40 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        byte[] byteArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray7, (int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        long long42 = inflater0.getBytesWritten();
        java.lang.Class<?> wildcardClass43 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater(true);
        int int10 = inflater9.getRemaining();
        long long11 = inflater9.getBytesRead();
        int int12 = inflater9.getTotalIn();
        long long13 = inflater9.getBytesWritten();
        int int14 = inflater9.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        inflater15.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        int int24 = inflater20.getTotalIn();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int34 = inflater25.inflate(byteArray33);
        int int35 = inflater20.inflate(byteArray33);
        inflater15.setInput(byteArray33);
        int int37 = inflater9.inflate(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        int int31 = inflater0.getTotalIn();
        boolean boolean32 = inflater0.needsDictionary();
        int int33 = inflater0.getAdler();
        long long34 = inflater0.getBytesRead();
        inflater0.reset();
        int int36 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater(false);
        int int41 = inflater40.getAdler();
        boolean boolean42 = inflater40.finished();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        inflater43.reset();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        int int56 = inflater53.getTotalOut();
        inflater53.reset();
        boolean boolean58 = inflater53.needsInput();
        int int59 = inflater53.getRemaining();
        boolean boolean60 = inflater53.finished();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        boolean boolean65 = inflater61.finished();
        inflater61.end();
        inflater61.end();
        boolean boolean68 = inflater61.needsDictionary();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.needsInput();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.finished();
        byte[] byteArray83 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater73.setInput(byteArray83);
        inflater69.setInput(byteArray83);
        inflater61.setInput(byteArray83);
        int int89 = inflater53.inflate(byteArray83, 6, (int) (short) 0);
        int int90 = inflater50.inflate(byteArray83);
        inflater43.setInput(byteArray83, (int) (byte) 0, (int) (byte) 1);
        inflater40.setInput(byteArray83);
        inflater6.setInput(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray83, (int) '#', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getTotalIn();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getTotalIn();
        boolean boolean9 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        int int28 = inflater0.getTotalOut();
        boolean boolean29 = inflater0.needsDictionary();
        long long30 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.needsDictionary();
        boolean boolean9 = inflater0.needsDictionary();
        long long10 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        inflater0.reset();
        boolean boolean26 = inflater0.finished();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        long long40 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        boolean boolean17 = inflater0.needsDictionary();
        boolean boolean18 = inflater0.finished();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.needsDictionary();
        int int21 = inflater19.getTotalOut();
        int int22 = inflater19.getTotalOut();
        int int23 = inflater19.getAdler();
        boolean boolean24 = inflater19.needsDictionary();
        int int25 = inflater19.getTotalOut();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        boolean boolean30 = inflater26.finished();
        inflater26.end();
        inflater26.end();
        boolean boolean33 = inflater26.needsInput();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        inflater34.reset();
        boolean boolean41 = inflater34.needsDictionary();
        int int42 = inflater34.getTotalIn();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        inflater43.reset();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.needsDictionary();
        boolean boolean54 = inflater50.needsInput();
        int int55 = inflater50.getRemaining();
        inflater50.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater57.setInput(byteArray67);
        inflater50.setInput(byteArray67);
        int int72 = inflater43.inflate(byteArray67, 0, (int) (byte) 0);
        int int73 = inflater34.inflate(byteArray67);
        inflater26.setInput(byteArray67);
        int int77 = inflater19.inflate(byteArray67, 0, (int) (byte) 0);
        inflater0.setInput(byteArray67);
        boolean boolean79 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        boolean boolean3 = inflater1.finished();
        boolean boolean4 = inflater1.needsDictionary();
        boolean boolean5 = inflater1.finished();
        int int6 = inflater1.getTotalOut();
        int int7 = inflater1.getRemaining();
        java.lang.Class<?> wildcardClass8 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getTotalOut();
        int int8 = inflater0.getTotalIn();
        long long9 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        int int11 = inflater9.getTotalOut();
        int int12 = inflater9.getTotalOut();
        boolean boolean13 = inflater9.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        inflater14.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int33 = inflater24.inflate(byteArray32);
        int int34 = inflater19.inflate(byteArray32);
        inflater14.setInput(byteArray32);
        inflater9.setInput(byteArray32);
        int int37 = inflater0.inflate(byteArray32);
        inflater0.reset();
        int int39 = inflater0.getTotalOut();
        boolean boolean40 = inflater0.needsDictionary();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsDictionary();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        int int14 = inflater8.getTotalOut();
        boolean boolean15 = inflater8.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater(true);
        int int18 = inflater17.getRemaining();
        long long19 = inflater17.getBytesRead();
        int int20 = inflater17.getTotalIn();
        int int21 = inflater17.getRemaining();
        boolean boolean22 = inflater17.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.needsDictionary();
        int int25 = inflater23.getTotalOut();
        int int26 = inflater23.getTotalOut();
        int int27 = inflater23.getAdler();
        boolean boolean28 = inflater23.needsDictionary();
        int int29 = inflater23.getTotalOut();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        boolean boolean34 = inflater30.finished();
        inflater30.end();
        inflater30.end();
        boolean boolean37 = inflater30.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        inflater38.reset();
        boolean boolean45 = inflater38.needsDictionary();
        int int46 = inflater38.getTotalIn();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        inflater47.reset();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        inflater54.reset();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.finished();
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater61.setInput(byteArray71);
        inflater54.setInput(byteArray71);
        int int76 = inflater47.inflate(byteArray71, 0, (int) (byte) 0);
        int int77 = inflater38.inflate(byteArray71);
        inflater30.setInput(byteArray71);
        int int81 = inflater23.inflate(byteArray71, 0, (int) (byte) 0);
        inflater17.setDictionary(byteArray71);
        int int83 = inflater8.inflate(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray71, 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        int int10 = inflater7.getTotalOut();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getTotalIn();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        int int17 = inflater13.getAdler();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        long long22 = inflater18.getBytesRead();
        boolean boolean23 = inflater18.finished();
        long long24 = inflater18.getBytesRead();
        boolean boolean25 = inflater18.needsDictionary();
        boolean boolean26 = inflater18.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.needsDictionary();
        int int29 = inflater27.getTotalOut();
        int int30 = inflater27.getTotalOut();
        boolean boolean31 = inflater27.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        inflater32.reset();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        int int41 = inflater37.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int51 = inflater42.inflate(byteArray50);
        int int52 = inflater37.inflate(byteArray50);
        inflater32.setInput(byteArray50);
        inflater27.setInput(byteArray50);
        int int55 = inflater18.inflate(byteArray50);
        inflater13.setInput(byteArray50);
        inflater7.setInput(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = inflater0.inflate(byteArray50, (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.finished();
        long long15 = inflater9.getBytesRead();
        boolean boolean16 = inflater9.needsDictionary();
        boolean boolean17 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.needsDictionary();
        int int20 = inflater18.getTotalOut();
        int int21 = inflater18.getTotalOut();
        boolean boolean22 = inflater18.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        inflater23.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int42 = inflater33.inflate(byteArray41);
        int int43 = inflater28.inflate(byteArray41);
        inflater23.setInput(byteArray41);
        inflater18.setInput(byteArray41);
        int int46 = inflater9.inflate(byteArray41);
        inflater0.setInput(byteArray41, (int) (short) 0, (int) (byte) 1);
        int int50 = inflater0.getTotalOut();
        inflater0.reset();
        long long52 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getTotalOut();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        int int51 = inflater47.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int61 = inflater52.inflate(byteArray60);
        int int62 = inflater47.inflate(byteArray60);
        inflater42.setInput(byteArray60);
        int int64 = inflater0.inflate(byteArray60);
        int int65 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean67 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        boolean boolean3 = inflater1.finished();
        boolean boolean4 = inflater1.needsDictionary();
        boolean boolean5 = inflater1.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        boolean boolean11 = inflater6.needsDictionary();
        boolean boolean12 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater6.inflate(byteArray23);
        int int28 = inflater1.inflate(byteArray23, 2, (int) (short) 0);
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        boolean boolean48 = inflater29.finished();
        int int49 = inflater29.getAdler();
        boolean boolean50 = inflater29.finished();
        int int51 = inflater29.getAdler();
        boolean boolean52 = inflater29.needsInput();
        int int53 = inflater29.getRemaining();
        boolean boolean54 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        boolean boolean57 = inflater55.needsInput();
        boolean boolean58 = inflater55.needsInput();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.needsDictionary();
        long long63 = inflater59.getBytesRead();
        boolean boolean64 = inflater59.needsDictionary();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        long long69 = inflater65.getBytesWritten();
        inflater65.reset();
        long long71 = inflater65.getBytesWritten();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.needsDictionary();
        boolean boolean76 = inflater72.needsInput();
        int int77 = inflater72.getRemaining();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        boolean boolean79 = inflater78.finished();
        int int80 = inflater78.getRemaining();
        boolean boolean81 = inflater78.finished();
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater78.setInput(byteArray88);
        int int90 = inflater72.inflate(byteArray88);
        inflater65.setInput(byteArray88);
        inflater59.setInput(byteArray88);
        int int93 = inflater55.inflate(byteArray88);
        inflater29.setInput(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray88, (int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        boolean boolean3 = inflater1.finished();
        boolean boolean4 = inflater1.needsDictionary();
        int int5 = inflater1.getRemaining();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getAdler();
        boolean boolean8 = inflater0.needsDictionary();
        byte[] byteArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = inflater0.inflate(byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        inflater0.reset();
        inflater0.end();
        boolean boolean10 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        boolean boolean13 = inflater0.needsInput();
        inflater0.reset();
        inflater0.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater(true);
        int int18 = inflater17.getRemaining();
        long long19 = inflater17.getBytesRead();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        inflater20.end();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        inflater20.setInput(byteArray34);
        inflater17.setInput(byteArray34, (int) (byte) 1, (int) (short) 1);
        int int40 = inflater17.getTotalIn();
        int int41 = inflater17.getRemaining();
        long long42 = inflater17.getBytesRead();
        boolean boolean43 = inflater17.finished();
        boolean boolean44 = inflater17.needsInput();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.needsDictionary();
        int int47 = inflater45.getTotalOut();
        int int48 = inflater45.getTotalOut();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getTotalIn();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        byte[] byteArray53 = new byte[] { (byte) 1 };
        int int54 = inflater51.inflate(byteArray53);
        int int55 = inflater51.getAdler();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.finished();
        long long60 = inflater56.getBytesRead();
        boolean boolean61 = inflater56.finished();
        long long62 = inflater56.getBytesRead();
        boolean boolean63 = inflater56.needsDictionary();
        boolean boolean64 = inflater56.needsDictionary();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.needsDictionary();
        int int67 = inflater65.getTotalOut();
        int int68 = inflater65.getTotalOut();
        boolean boolean69 = inflater65.needsInput();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        byte[] byteArray72 = new byte[] { (byte) 1 };
        int int73 = inflater70.inflate(byteArray72);
        inflater70.reset();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        byte[] byteArray77 = new byte[] { (byte) 1 };
        int int78 = inflater75.inflate(byteArray77);
        int int79 = inflater75.getTotalIn();
        java.util.zip.Inflater inflater80 = new java.util.zip.Inflater();
        byte[] byteArray82 = new byte[] { (byte) 1 };
        int int83 = inflater80.inflate(byteArray82);
        byte[] byteArray88 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int89 = inflater80.inflate(byteArray88);
        int int90 = inflater75.inflate(byteArray88);
        inflater70.setInput(byteArray88);
        inflater65.setInput(byteArray88);
        int int93 = inflater56.inflate(byteArray88);
        inflater51.setInput(byteArray88);
        inflater45.setInput(byteArray88);
        inflater17.setInput(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        boolean boolean15 = inflater8.needsInput();
        inflater8.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        long long21 = inflater17.getBytesRead();
        boolean boolean22 = inflater17.needsInput();
        int int23 = inflater17.getTotalOut();
        long long24 = inflater17.getBytesRead();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        inflater25.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        inflater25.setInput(byteArray42);
        int int47 = inflater17.inflate(byteArray42, 1, (int) (short) 1);
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        int int52 = inflater48.getAdler();
        int int53 = inflater48.getAdler();
        int int54 = inflater48.getAdler();
        int int55 = inflater48.getTotalOut();
        inflater48.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.needsDictionary();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.needsDictionary();
        boolean boolean63 = inflater59.needsInput();
        int int64 = inflater59.getRemaining();
        inflater59.reset();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater59.setInput(byteArray76);
        inflater57.setInput(byteArray76);
        inflater48.setInput(byteArray76, (int) (byte) 0, 0);
        int int83 = inflater17.inflate(byteArray76);
        int int84 = inflater8.inflate(byteArray76);
        int int85 = inflater0.inflate(byteArray76);
        inflater0.reset();
        long long87 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        long long7 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        long long12 = inflater8.getBytesRead();
        inflater8.reset();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        boolean boolean19 = inflater14.needsDictionary();
        boolean boolean20 = inflater14.needsDictionary();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater21.setInput(byteArray31);
        int int33 = inflater14.inflate(byteArray31);
        int int34 = inflater8.inflate(byteArray31);
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getAdler();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        inflater40.setInput(byteArray54);
        inflater35.setInput(byteArray54);
        inflater8.setInput(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray54, 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        int int11 = inflater0.getAdler();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        inflater12.end();
        int int14 = inflater12.getRemaining();
        inflater12.end();
        int int16 = inflater12.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        inflater19.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        long long28 = inflater24.getBytesWritten();
        inflater24.reset();
        long long30 = inflater24.getBytesWritten();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        int int49 = inflater31.inflate(byteArray47);
        inflater24.setInput(byteArray47);
        inflater19.setInput(byteArray47);
        inflater18.setDictionary(byteArray47);
        inflater12.setInput(byteArray47);
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        long long58 = inflater54.getBytesRead();
        boolean boolean59 = inflater54.needsInput();
        int int60 = inflater54.getTotalOut();
        long long61 = inflater54.getBytesRead();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsDictionary();
        boolean boolean66 = inflater62.needsInput();
        int int67 = inflater62.getRemaining();
        inflater62.reset();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        byte[] byteArray79 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater69.setInput(byteArray79);
        inflater62.setInput(byteArray79);
        int int84 = inflater54.inflate(byteArray79, 1, (int) (short) 1);
        inflater12.setInput(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray79, 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        inflater0.reset();
        int int7 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int17 = inflater8.inflate(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = inflater0.inflate(byteArray16, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        int int56 = inflater0.getTotalOut();
        long long57 = inflater0.getBytesRead();
        boolean boolean58 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsDictionary();
        long long24 = inflater0.getBytesWritten();
        boolean boolean25 = inflater0.needsInput();
        inflater0.end();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        inflater0.reset();
        inflater0.end();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        int int13 = inflater9.getAdler();
        inflater9.reset();
        long long15 = inflater9.getBytesWritten();
        inflater9.end();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        boolean boolean36 = inflater17.finished();
        int int37 = inflater17.getTotalOut();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        long long42 = inflater38.getBytesRead();
        boolean boolean43 = inflater38.needsDictionary();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        long long48 = inflater44.getBytesWritten();
        inflater44.reset();
        long long50 = inflater44.getBytesWritten();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater57.setInput(byteArray67);
        int int69 = inflater51.inflate(byteArray67);
        inflater44.setInput(byteArray67);
        inflater38.setInput(byteArray67);
        int int72 = inflater17.inflate(byteArray67);
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.needsInput();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        boolean boolean78 = inflater77.finished();
        int int79 = inflater77.getRemaining();
        boolean boolean80 = inflater77.finished();
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater77.setInput(byteArray87);
        inflater73.setInput(byteArray87);
        int int90 = inflater17.inflate(byteArray87);
        inflater9.setInput(byteArray87);
        int int92 = inflater0.inflate(byteArray87);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        boolean boolean25 = inflater6.finished();
        int int26 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        int int61 = inflater6.inflate(byteArray56);
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater62.setInput(byteArray76);
        int int79 = inflater6.inflate(byteArray76);
        inflater0.setInput(byteArray76, 0, (int) (short) 0);
        inflater0.reset();
        long long84 = inflater0.getBytesRead();
        byte[] byteArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray85, (int) (byte) 1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.needsInput();
        int int12 = inflater6.getTotalOut();
        long long13 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        inflater21.end();
        boolean boolean25 = inflater21.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        inflater21.setInput(byteArray28);
        inflater16.setInput(byteArray28);
        inflater14.setInput(byteArray28);
        int int33 = inflater6.inflate(byteArray28);
        int int34 = inflater6.getAdler();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.finished();
        long long41 = inflater35.getBytesRead();
        boolean boolean42 = inflater35.needsDictionary();
        boolean boolean43 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        long long48 = inflater44.getBytesWritten();
        boolean boolean49 = inflater44.needsInput();
        boolean boolean50 = inflater44.finished();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        inflater44.setInput(byteArray61);
        int int64 = inflater35.inflate(byteArray61);
        int int65 = inflater6.inflate(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray61, (int) (byte) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass4 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        boolean boolean42 = inflater0.finished();
        boolean boolean43 = inflater0.finished();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.needsDictionary();
        int int46 = inflater44.getTotalOut();
        int int47 = inflater44.getTotalOut();
        int int48 = inflater44.getAdler();
        boolean boolean49 = inflater44.needsDictionary();
        int int50 = inflater44.getTotalOut();
        int int51 = inflater44.getTotalOut();
        boolean boolean52 = inflater44.needsInput();
        int int53 = inflater44.getRemaining();
        int int54 = inflater44.getAdler();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        inflater55.end();
        int int68 = inflater55.getRemaining();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        int int73 = inflater69.getAdler();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        inflater74.end();
        boolean boolean78 = inflater74.needsInput();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        byte[] byteArray81 = new byte[] { (byte) 1 };
        int int82 = inflater79.inflate(byteArray81);
        inflater74.setInput(byteArray81);
        int int84 = inflater69.inflate(byteArray81);
        inflater55.setInput(byteArray81);
        int int86 = inflater44.inflate(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray81, 2, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.finished();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        int int25 = inflater0.getRemaining();
        int int26 = inflater0.getAdler();
        inflater0.reset();
        int int28 = inflater0.getRemaining();
        int int29 = inflater0.getAdler();
        int int30 = inflater0.getRemaining();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getTotalIn();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        int int9 = inflater0.getAdler();
        int int10 = inflater0.getTotalOut();
        inflater0.reset();
        int int12 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        inflater0.setInput(byteArray34, (int) (byte) 0, 1);
        int int42 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        int int47 = inflater43.getTotalOut();
        boolean boolean48 = inflater43.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        inflater49.end();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        inflater49.setInput(byteArray63);
        inflater43.setInput(byteArray63);
        inflater0.setInput(byteArray63);
        int int68 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        long long5 = inflater0.getBytesRead();
        inflater0.end();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean9 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater(true);
        int int12 = inflater11.getRemaining();
        long long13 = inflater11.getBytesRead();
        int int14 = inflater11.getTotalIn();
        int int15 = inflater11.getRemaining();
        boolean boolean16 = inflater11.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.needsDictionary();
        int int19 = inflater17.getTotalOut();
        int int20 = inflater17.getTotalOut();
        int int21 = inflater17.getAdler();
        boolean boolean22 = inflater17.needsDictionary();
        int int23 = inflater17.getTotalOut();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        boolean boolean28 = inflater24.finished();
        inflater24.end();
        inflater24.end();
        boolean boolean31 = inflater24.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        inflater32.reset();
        boolean boolean39 = inflater32.needsDictionary();
        int int40 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        inflater41.reset();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        inflater48.reset();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        inflater48.setInput(byteArray65);
        int int70 = inflater41.inflate(byteArray65, 0, (int) (byte) 0);
        int int71 = inflater32.inflate(byteArray65);
        inflater24.setInput(byteArray65);
        int int75 = inflater17.inflate(byteArray65, 0, (int) (byte) 0);
        inflater11.setDictionary(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray65, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        int int9 = inflater0.getAdler();
        int int10 = inflater0.getTotalOut();
        inflater0.reset();
        java.lang.Class<?> wildcardClass12 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        boolean boolean13 = inflater0.needsInput();
        long long14 = inflater0.getBytesWritten();
        boolean boolean15 = inflater0.needsDictionary();
        boolean boolean16 = inflater0.finished();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        inflater17.end();
        boolean boolean21 = inflater17.needsInput();
        boolean boolean22 = inflater17.needsDictionary();
        boolean boolean23 = inflater17.needsDictionary();
        boolean boolean24 = inflater17.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.needsDictionary();
        int int27 = inflater25.getTotalOut();
        int int28 = inflater25.getTotalOut();
        boolean boolean29 = inflater25.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        inflater30.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int49 = inflater40.inflate(byteArray48);
        int int50 = inflater35.inflate(byteArray48);
        inflater30.setInput(byteArray48);
        inflater25.setInput(byteArray48);
        inflater17.setInput(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        int int40 = inflater22.inflate(byteArray38);
        boolean boolean41 = inflater22.finished();
        int int42 = inflater22.getAdler();
        boolean boolean43 = inflater22.finished();
        int int44 = inflater22.getAdler();
        boolean boolean45 = inflater22.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        int int50 = inflater46.getTotalIn();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        byte[] byteArray53 = new byte[] { (byte) 1 };
        int int54 = inflater51.inflate(byteArray53);
        byte[] byteArray59 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int60 = inflater51.inflate(byteArray59);
        int int61 = inflater46.inflate(byteArray59);
        int int62 = inflater22.inflate(byteArray59);
        inflater0.setInput(byteArray59);
        int int64 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater0.setInput(byteArray7);
        int int10 = inflater0.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        int int29 = inflater11.inflate(byteArray27);
        boolean boolean30 = inflater11.finished();
        int int31 = inflater11.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater(true);
        inflater33.end();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        inflater35.reset();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater42.setInput(byteArray52);
        inflater35.setInput(byteArray52);
        inflater33.setInput(byteArray52);
        inflater11.setInput(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = inflater0.inflate(byteArray52, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        inflater2.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        long long11 = inflater7.getBytesWritten();
        inflater7.reset();
        long long13 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        inflater7.setInput(byteArray30);
        inflater2.setInput(byteArray30);
        inflater1.setDictionary(byteArray30);
        int int36 = inflater1.getRemaining();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        boolean boolean30 = inflater25.needsDictionary();
        boolean boolean31 = inflater25.needsDictionary();
        int int32 = inflater25.getTotalOut();
        inflater25.reset();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        boolean boolean36 = inflater34.needsInput();
        long long37 = inflater34.getBytesWritten();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        long long42 = inflater38.getBytesRead();
        inflater38.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        boolean boolean49 = inflater44.needsDictionary();
        boolean boolean50 = inflater44.needsDictionary();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater44.inflate(byteArray61);
        int int64 = inflater38.inflate(byteArray61);
        int int65 = inflater34.inflate(byteArray61);
        int int66 = inflater25.inflate(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray61, (int) (short) 1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater0.setInput(byteArray7);
        int int10 = inflater0.getRemaining();
        boolean boolean11 = inflater0.needsDictionary();
        inflater0.end();
        boolean boolean13 = inflater0.needsInput();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        long long8 = inflater0.getBytesRead();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsInput();
        boolean boolean13 = inflater0.needsDictionary();
        boolean boolean14 = inflater0.needsInput();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.needsDictionary();
        int int17 = inflater15.getTotalOut();
        int int18 = inflater15.getTotalOut();
        long long19 = inflater15.getBytesWritten();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        long long24 = inflater20.getBytesRead();
        boolean boolean25 = inflater20.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        long long30 = inflater26.getBytesWritten();
        inflater26.reset();
        long long32 = inflater26.getBytesWritten();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        inflater26.setInput(byteArray49);
        inflater20.setInput(byteArray49);
        int int54 = inflater15.inflate(byteArray49);
        int int55 = inflater15.getRemaining();
        int int56 = inflater15.getTotalIn();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        inflater57.reset();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        long long66 = inflater62.getBytesWritten();
        inflater62.reset();
        long long68 = inflater62.getBytesWritten();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.needsDictionary();
        boolean boolean73 = inflater69.needsInput();
        int int74 = inflater69.getRemaining();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        boolean boolean78 = inflater75.finished();
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater75.setInput(byteArray85);
        int int87 = inflater69.inflate(byteArray85);
        inflater62.setInput(byteArray85);
        inflater57.setInput(byteArray85);
        int int90 = inflater15.inflate(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = inflater0.inflate(byteArray85);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        int int28 = inflater25.getTotalOut();
        inflater25.reset();
        boolean boolean30 = inflater25.needsInput();
        int int31 = inflater25.getRemaining();
        boolean boolean32 = inflater25.finished();
        int int33 = inflater25.getTotalOut();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        boolean boolean53 = inflater34.finished();
        int int54 = inflater34.getAdler();
        boolean boolean55 = inflater34.finished();
        int int56 = inflater34.getAdler();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsDictionary();
        boolean boolean61 = inflater57.needsInput();
        int int62 = inflater57.getRemaining();
        inflater57.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater64.setInput(byteArray74);
        inflater57.setInput(byteArray74);
        int int77 = inflater34.inflate(byteArray74);
        inflater25.setInput(byteArray74, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = inflater0.inflate(byteArray74);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        inflater0.reset();
        int int24 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass25 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        long long1 = inflater0.getBytesRead();
        long long2 = inflater0.getBytesRead();
        boolean boolean3 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        long long7 = inflater0.getBytesWritten();
        int int8 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        long long51 = inflater47.getBytesWritten();
        inflater47.reset();
        long long53 = inflater47.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        int int72 = inflater54.inflate(byteArray70);
        inflater47.setInput(byteArray70);
        inflater42.setInput(byteArray70);
        int int75 = inflater0.inflate(byteArray70);
        int int76 = inflater0.getTotalIn();
        boolean boolean77 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        long long23 = inflater0.getBytesWritten();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getTotalOut();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.needsInput();
        int int9 = inflater0.getTotalIn();
        int int10 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.needsDictionary();
        int int18 = inflater12.getAdler();
        long long19 = inflater12.getBytesRead();
        boolean boolean20 = inflater12.needsDictionary();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsInput();
        int int27 = inflater21.getTotalOut();
        long long28 = inflater21.getBytesRead();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        inflater29.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        inflater29.setInput(byteArray46);
        int int51 = inflater21.inflate(byteArray46, 1, (int) (short) 1);
        inflater12.setInput(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesWritten();
        boolean boolean8 = inflater0.finished();
        int int9 = inflater0.getTotalOut();
        boolean boolean10 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.needsDictionary();
        boolean boolean12 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater(false);
        boolean boolean15 = inflater14.finished();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getTotalIn();
        int int21 = inflater16.getTotalIn();
        int int22 = inflater16.getRemaining();
        boolean boolean23 = inflater16.needsInput();
        int int24 = inflater16.getAdler();
        int int25 = inflater16.getTotalOut();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        int int30 = inflater26.getAdler();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        inflater31.end();
        boolean boolean35 = inflater31.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        inflater31.setInput(byteArray38);
        int int41 = inflater26.inflate(byteArray38);
        inflater16.setInput(byteArray38);
        inflater14.setInput(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = inflater0.inflate(byteArray38, 4, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getTotalIn();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        int int11 = inflater9.getTotalOut();
        int int12 = inflater9.getTotalOut();
        boolean boolean13 = inflater9.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.needsDictionary();
        int int16 = inflater14.getTotalOut();
        int int17 = inflater14.getTotalOut();
        long long18 = inflater14.getBytesWritten();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        long long23 = inflater19.getBytesRead();
        boolean boolean24 = inflater19.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        long long29 = inflater25.getBytesWritten();
        inflater25.reset();
        long long31 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.needsDictionary();
        boolean boolean36 = inflater32.needsInput();
        int int37 = inflater32.getRemaining();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        int int50 = inflater32.inflate(byteArray48);
        inflater25.setInput(byteArray48);
        inflater19.setInput(byteArray48);
        int int53 = inflater14.inflate(byteArray48);
        int int54 = inflater14.getRemaining();
        int int55 = inflater14.getTotalIn();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        byte[] byteArray58 = new byte[] { (byte) 1 };
        int int59 = inflater56.inflate(byteArray58);
        inflater56.reset();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        long long65 = inflater61.getBytesWritten();
        inflater61.reset();
        long long67 = inflater61.getBytesWritten();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.needsDictionary();
        boolean boolean72 = inflater68.needsInput();
        int int73 = inflater68.getRemaining();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.finished();
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater74.setInput(byteArray84);
        int int86 = inflater68.inflate(byteArray84);
        inflater61.setInput(byteArray84);
        inflater56.setInput(byteArray84);
        int int89 = inflater14.inflate(byteArray84);
        inflater9.setInput(byteArray84, (int) (byte) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray84, (int) (byte) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        int int4 = inflater0.getRemaining();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.needsDictionary();
        int int8 = inflater6.getTotalOut();
        long long9 = inflater6.getBytesWritten();
        boolean boolean10 = inflater6.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        long long16 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater(true);
        int int19 = inflater18.getRemaining();
        long long20 = inflater18.getBytesRead();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        inflater21.end();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        inflater21.setInput(byteArray35);
        inflater18.setInput(byteArray35, (int) (byte) 1, (int) (short) 1);
        int int41 = inflater11.inflate(byteArray35);
        int int42 = inflater6.inflate(byteArray35);
        int int43 = inflater0.inflate(byteArray35);
        boolean boolean44 = inflater0.finished();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray47, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getAdler();
        inflater0.reset();
        long long10 = inflater0.getBytesRead();
        long long11 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsInput();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        boolean boolean17 = inflater0.needsInput();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        long long56 = inflater0.getBytesRead();
        int int57 = inflater0.getTotalOut();
        int int58 = inflater0.getTotalIn();
        inflater0.reset();
        boolean boolean60 = inflater0.needsInput();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        boolean boolean65 = inflater61.finished();
        int int66 = inflater61.getRemaining();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        int int73 = inflater69.getTotalIn();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        inflater74.end();
        boolean boolean78 = inflater74.needsInput();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        byte[] byteArray81 = new byte[] { (byte) 1 };
        int int82 = inflater79.inflate(byteArray81);
        inflater74.setInput(byteArray81);
        inflater69.setInput(byteArray81);
        inflater67.setInput(byteArray81);
        int int86 = inflater61.inflate(byteArray81);
        inflater0.setInput(byteArray81);
        int int88 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        int int3 = inflater1.getRemaining();
        boolean boolean4 = inflater1.finished();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getTotalIn();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        inflater12.end();
        boolean boolean16 = inflater12.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        inflater12.setInput(byteArray19);
        inflater7.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray19, (int) (byte) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        int int11 = inflater9.getTotalOut();
        int int12 = inflater9.getTotalOut();
        boolean boolean13 = inflater9.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        inflater14.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int33 = inflater24.inflate(byteArray32);
        int int34 = inflater19.inflate(byteArray32);
        inflater14.setInput(byteArray32);
        inflater9.setInput(byteArray32);
        int int37 = inflater0.inflate(byteArray32);
        int int38 = inflater0.getTotalOut();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getTotalOut();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.needsInput();
        int int9 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        int int13 = inflater10.getTotalOut();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) -1 };
        inflater10.setInput(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, -1]");
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        int int10 = inflater6.getTotalIn();
        long long11 = inflater6.getBytesWritten();
        int int12 = inflater6.getTotalIn();
        boolean boolean13 = inflater6.needsDictionary();
        int int14 = inflater6.getAdler();
        inflater6.end();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater(true);
        int int18 = inflater17.getRemaining();
        long long19 = inflater17.getBytesRead();
        int int20 = inflater17.getTotalIn();
        long long21 = inflater17.getBytesWritten();
        int int22 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        inflater23.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int42 = inflater33.inflate(byteArray41);
        int int43 = inflater28.inflate(byteArray41);
        inflater23.setInput(byteArray41);
        int int45 = inflater17.inflate(byteArray41);
        inflater6.setInput(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass4 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.reset();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        int int25 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        int int4 = inflater0.getRemaining();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.needsDictionary();
        int int8 = inflater6.getTotalOut();
        long long9 = inflater6.getBytesWritten();
        boolean boolean10 = inflater6.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        long long16 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater(true);
        int int19 = inflater18.getRemaining();
        long long20 = inflater18.getBytesRead();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        inflater21.end();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        inflater21.setInput(byteArray35);
        inflater18.setInput(byteArray35, (int) (byte) 1, (int) (short) 1);
        int int41 = inflater11.inflate(byteArray35);
        int int42 = inflater6.inflate(byteArray35);
        int int43 = inflater0.inflate(byteArray35);
        byte[] byteArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray44, (int) ' ', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        boolean boolean22 = inflater0.needsInput();
        int int23 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsInput();
        int int26 = inflater0.getRemaining();
        long long27 = inflater0.getBytesRead();
        int int28 = inflater0.getAdler();
        java.lang.Class<?> wildcardClass29 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        int int11 = inflater9.getTotalOut();
        int int12 = inflater9.getTotalOut();
        boolean boolean13 = inflater9.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        inflater14.reset();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int33 = inflater24.inflate(byteArray32);
        int int34 = inflater19.inflate(byteArray32);
        inflater14.setInput(byteArray32);
        inflater9.setInput(byteArray32);
        int int37 = inflater0.inflate(byteArray32);
        inflater0.reset();
        int int39 = inflater0.getTotalOut();
        inflater0.end();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        boolean boolean43 = inflater41.needsInput();
        long long44 = inflater41.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        long long49 = inflater45.getBytesRead();
        inflater45.reset();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        boolean boolean56 = inflater51.needsDictionary();
        boolean boolean57 = inflater51.needsDictionary();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        int int70 = inflater51.inflate(byteArray68);
        int int71 = inflater45.inflate(byteArray68);
        int int72 = inflater41.inflate(byteArray68);
        inflater0.setInput(byteArray68);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getAdler();
        boolean boolean8 = inflater0.needsInput();
        boolean boolean9 = inflater0.needsDictionary();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.finished();
        long long19 = inflater13.getBytesRead();
        boolean boolean20 = inflater13.needsDictionary();
        boolean boolean21 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.needsDictionary();
        int int24 = inflater22.getTotalOut();
        int int25 = inflater22.getTotalOut();
        boolean boolean26 = inflater22.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater27.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int46 = inflater37.inflate(byteArray45);
        int int47 = inflater32.inflate(byteArray45);
        inflater27.setInput(byteArray45);
        inflater22.setInput(byteArray45);
        int int50 = inflater13.inflate(byteArray45);
        inflater8.setInput(byteArray45);
        int int52 = inflater0.inflate(byteArray45);
        int int53 = inflater0.getTotalIn();
        boolean boolean54 = inflater0.needsInput();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.needsDictionary();
        long long59 = inflater55.getBytesRead();
        boolean boolean60 = inflater55.needsInput();
        int int61 = inflater55.getTotalOut();
        long long62 = inflater55.getBytesRead();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.needsDictionary();
        boolean boolean67 = inflater63.needsInput();
        int int68 = inflater63.getRemaining();
        inflater63.reset();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.finished();
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater70.setInput(byteArray80);
        inflater63.setInput(byteArray80);
        int int85 = inflater55.inflate(byteArray80, 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray80, 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        int int74 = inflater0.getRemaining();
        long long75 = inflater0.getBytesRead();
        long long76 = inflater0.getBytesWritten();
        long long77 = inflater0.getBytesWritten();
        long long78 = inflater0.getBytesWritten();
        boolean boolean79 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        inflater0.reset();
        inflater0.reset();
        int int26 = inflater0.getTotalIn();
        int int27 = inflater0.getTotalOut();
        boolean boolean28 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        boolean boolean9 = inflater7.needsInput();
        boolean boolean10 = inflater7.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        long long15 = inflater11.getBytesRead();
        boolean boolean16 = inflater11.needsDictionary();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        long long21 = inflater17.getBytesWritten();
        inflater17.reset();
        long long23 = inflater17.getBytesWritten();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        int int42 = inflater24.inflate(byteArray40);
        inflater17.setInput(byteArray40);
        inflater11.setInput(byteArray40);
        int int45 = inflater7.inflate(byteArray40);
        int int46 = inflater0.inflate(byteArray40);
        boolean boolean47 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        int int6 = inflater0.getTotalOut();
        boolean boolean7 = inflater0.finished();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getTotalIn();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        inflater13.end();
        boolean boolean17 = inflater13.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        inflater13.setInput(byteArray20);
        inflater8.setInput(byteArray20);
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        int int40 = inflater24.getTotalOut();
        int int41 = inflater24.getTotalOut();
        long long42 = inflater24.getBytesRead();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        long long47 = inflater43.getBytesRead();
        boolean boolean48 = inflater43.finished();
        long long49 = inflater43.getBytesRead();
        boolean boolean50 = inflater43.needsDictionary();
        boolean boolean51 = inflater43.needsDictionary();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.needsDictionary();
        int int54 = inflater52.getTotalOut();
        int int55 = inflater52.getTotalOut();
        boolean boolean56 = inflater52.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        inflater57.reset();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        int int66 = inflater62.getTotalIn();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int76 = inflater67.inflate(byteArray75);
        int int77 = inflater62.inflate(byteArray75);
        inflater57.setInput(byteArray75);
        inflater52.setInput(byteArray75);
        int int80 = inflater43.inflate(byteArray75);
        inflater24.setInput(byteArray75);
        inflater8.setInput(byteArray75);
        inflater0.setInput(byteArray75);
        boolean boolean84 = inflater0.finished();
        long long85 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        inflater0.reset();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        boolean boolean13 = inflater0.needsInput();
        int int14 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean16 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        int int74 = inflater0.getRemaining();
        int int75 = inflater0.getRemaining();
        int int76 = inflater0.getRemaining();
        boolean boolean77 = inflater0.needsInput();
        inflater0.reset();
        boolean boolean79 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        int int1 = inflater0.getTotalIn();
        inflater0.reset();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        int int6 = inflater3.inflate(byteArray5);
        long long7 = inflater3.getBytesWritten();
        inflater3.reset();
        long long9 = inflater3.getBytesWritten();
        int int10 = inflater3.getTotalIn();
        boolean boolean11 = inflater3.needsDictionary();
        int int12 = inflater3.getTotalIn();
        int int13 = inflater3.getTotalIn();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        boolean boolean33 = inflater14.finished();
        int int34 = inflater14.getTotalOut();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        long long45 = inflater41.getBytesWritten();
        inflater41.reset();
        long long47 = inflater41.getBytesWritten();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.finished();
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater54.setInput(byteArray64);
        int int66 = inflater48.inflate(byteArray64);
        inflater41.setInput(byteArray64);
        inflater35.setInput(byteArray64);
        int int69 = inflater14.inflate(byteArray64);
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        int int72 = inflater70.getRemaining();
        boolean boolean73 = inflater70.needsInput();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.finished();
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater74.setInput(byteArray84);
        inflater70.setInput(byteArray84);
        int int87 = inflater14.inflate(byteArray84);
        int int88 = inflater3.inflate(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray84, 4, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.end();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        inflater6.end();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater10.setInput(byteArray20);
        inflater6.setInput(byteArray20);
        inflater0.setInput(byteArray20);
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        boolean boolean29 = inflater24.needsDictionary();
        int int30 = inflater24.getRemaining();
        boolean boolean31 = inflater24.needsDictionary();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        long long36 = inflater32.getBytesRead();
        boolean boolean37 = inflater32.finished();
        long long38 = inflater32.getBytesRead();
        boolean boolean39 = inflater32.needsDictionary();
        boolean boolean40 = inflater32.needsDictionary();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        long long45 = inflater41.getBytesWritten();
        boolean boolean46 = inflater41.needsInput();
        boolean boolean47 = inflater41.finished();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        inflater41.setInput(byteArray58);
        int int61 = inflater32.inflate(byteArray58);
        int int62 = inflater24.inflate(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray58, (int) (short) 0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        long long5 = inflater1.getBytesWritten();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        boolean boolean11 = inflater6.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        int int30 = inflater12.inflate(byteArray28);
        boolean boolean31 = inflater12.finished();
        int int32 = inflater12.getTotalOut();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        long long37 = inflater33.getBytesRead();
        boolean boolean38 = inflater33.needsDictionary();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        long long43 = inflater39.getBytesWritten();
        inflater39.reset();
        long long45 = inflater39.getBytesWritten();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.needsDictionary();
        boolean boolean50 = inflater46.needsInput();
        int int51 = inflater46.getRemaining();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        int int64 = inflater46.inflate(byteArray62);
        inflater39.setInput(byteArray62);
        inflater33.setInput(byteArray62);
        int int67 = inflater12.inflate(byteArray62);
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.needsInput();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.finished();
        byte[] byteArray82 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater72.setInput(byteArray82);
        inflater68.setInput(byteArray82);
        int int85 = inflater12.inflate(byteArray82);
        inflater6.setInput(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            int int89 = inflater1.inflate(byteArray82, (int) (short) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsDictionary();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsDictionary();
        long long9 = inflater0.getBytesRead();
        boolean boolean10 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        boolean boolean15 = inflater11.needsInput();
        int int16 = inflater11.getRemaining();
        inflater11.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        inflater11.setInput(byteArray28);
        inflater9.setInput(byteArray28);
        inflater0.setInput(byteArray28, (int) (byte) 0, 0);
        inflater0.reset();
        int int36 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        boolean boolean3 = inflater1.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        boolean boolean8 = inflater4.finished();
        inflater4.end();
        inflater4.end();
        boolean boolean11 = inflater4.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        inflater12.reset();
        boolean boolean19 = inflater12.needsDictionary();
        int int20 = inflater12.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        boolean boolean25 = inflater21.needsInput();
        int int26 = inflater21.getRemaining();
        inflater21.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater28.setInput(byteArray45);
        int int50 = inflater21.inflate(byteArray45, 0, (int) (byte) 0);
        int int51 = inflater12.inflate(byteArray45);
        inflater4.setInput(byteArray45);
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater(true);
        int int55 = inflater54.getRemaining();
        long long56 = inflater54.getBytesRead();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        int int61 = inflater54.inflate(byteArray59);
        inflater4.setInput(byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray59, (-1), (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalOut();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.finished();
        long long8 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        int int12 = inflater9.getTotalOut();
        inflater9.reset();
        boolean boolean14 = inflater9.needsInput();
        long long15 = inflater9.getBytesRead();
        int int16 = inflater9.getTotalOut();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        boolean boolean36 = inflater17.finished();
        int int37 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        inflater38.reset();
        boolean boolean45 = inflater38.needsDictionary();
        int int46 = inflater38.getTotalIn();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        boolean boolean51 = inflater47.needsInput();
        int int52 = inflater47.getRemaining();
        inflater47.reset();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        inflater54.reset();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.finished();
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater61.setInput(byteArray71);
        inflater54.setInput(byteArray71);
        int int76 = inflater47.inflate(byteArray71, 0, (int) (byte) 0);
        int int77 = inflater38.inflate(byteArray71);
        int int78 = inflater17.inflate(byteArray71);
        int int79 = inflater9.inflate(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray71, (int) (byte) 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        int int6 = inflater3.inflate(byteArray5);
        inflater3.reset();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        long long12 = inflater8.getBytesWritten();
        inflater8.reset();
        long long14 = inflater8.getBytesWritten();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        int int20 = inflater15.getRemaining();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater21.setInput(byteArray31);
        int int33 = inflater15.inflate(byteArray31);
        inflater8.setInput(byteArray31);
        inflater3.setInput(byteArray31);
        int int36 = inflater0.inflate(byteArray31);
        boolean boolean37 = inflater0.needsDictionary();
        boolean boolean38 = inflater0.needsDictionary();
        long long39 = inflater0.getBytesRead();
        int int40 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getTotalIn();
        inflater0.end();
        boolean boolean8 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getAdler();
        boolean boolean9 = inflater0.finished();
        long long10 = inflater0.getBytesRead();
        int int11 = inflater0.getTotalIn();
        int int12 = inflater0.getTotalIn();
        boolean boolean13 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getAdler();
        boolean boolean9 = inflater0.finished();
        long long10 = inflater0.getBytesRead();
        int int11 = inflater0.getTotalIn();
        int int12 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass13 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        boolean boolean25 = inflater1.finished();
        boolean boolean26 = inflater1.needsDictionary();
        inflater1.end();
        boolean boolean28 = inflater1.finished();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        int int11 = inflater0.getTotalIn();
        int int12 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getTotalIn();
        boolean boolean26 = inflater0.needsInput();
        boolean boolean27 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        boolean boolean11 = inflater6.needsInput();
        int int12 = inflater6.getRemaining();
        int int13 = inflater6.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        inflater14.setInput(byteArray28);
        inflater6.setInput(byteArray28, (int) (byte) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray28, 2, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        boolean boolean17 = inflater16.finished();
        int int18 = inflater16.getRemaining();
        boolean boolean19 = inflater16.finished();
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater16.setInput(byteArray26);
        inflater9.setInput(byteArray26);
        int int29 = inflater9.getRemaining();
        boolean boolean30 = inflater9.finished();
        inflater9.reset();
        int int32 = inflater9.getAdler();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        int int37 = inflater33.getTotalIn();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int47 = inflater38.inflate(byteArray46);
        int int48 = inflater33.inflate(byteArray46);
        int int49 = inflater33.getTotalOut();
        int int50 = inflater33.getTotalOut();
        long long51 = inflater33.getBytesRead();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        long long56 = inflater52.getBytesRead();
        boolean boolean57 = inflater52.finished();
        long long58 = inflater52.getBytesRead();
        boolean boolean59 = inflater52.needsDictionary();
        boolean boolean60 = inflater52.needsDictionary();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.needsDictionary();
        int int63 = inflater61.getTotalOut();
        int int64 = inflater61.getTotalOut();
        boolean boolean65 = inflater61.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        int int69 = inflater66.inflate(byteArray68);
        inflater66.reset();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        byte[] byteArray73 = new byte[] { (byte) 1 };
        int int74 = inflater71.inflate(byteArray73);
        int int75 = inflater71.getTotalIn();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        byte[] byteArray78 = new byte[] { (byte) 1 };
        int int79 = inflater76.inflate(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int85 = inflater76.inflate(byteArray84);
        int int86 = inflater71.inflate(byteArray84);
        inflater66.setInput(byteArray84);
        inflater61.setInput(byteArray84);
        int int89 = inflater52.inflate(byteArray84);
        inflater33.setInput(byteArray84);
        int int91 = inflater9.inflate(byteArray84);
        int int92 = inflater0.inflate(byteArray84);
        int int93 = inflater0.getAdler();
        long long94 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        long long3 = inflater0.getBytesWritten();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        int int9 = inflater6.getTotalOut();
        inflater6.reset();
        boolean boolean11 = inflater6.needsInput();
        long long12 = inflater6.getBytesRead();
        int int13 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        boolean boolean33 = inflater14.finished();
        int int34 = inflater14.getTotalIn();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        inflater35.reset();
        boolean boolean42 = inflater35.needsDictionary();
        int int43 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        inflater44.reset();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        inflater51.reset();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater51.setInput(byteArray68);
        int int73 = inflater44.inflate(byteArray68, 0, (int) (byte) 0);
        int int74 = inflater35.inflate(byteArray68);
        int int75 = inflater14.inflate(byteArray68);
        int int76 = inflater6.inflate(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getRemaining();
        int int10 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        int int16 = inflater11.getRemaining();
        int int17 = inflater11.getTotalOut();
        boolean boolean18 = inflater11.finished();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        inflater24.end();
        boolean boolean28 = inflater24.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        inflater24.setInput(byteArray31);
        inflater19.setInput(byteArray31);
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        int int39 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int49 = inflater40.inflate(byteArray48);
        int int50 = inflater35.inflate(byteArray48);
        int int51 = inflater35.getTotalOut();
        int int52 = inflater35.getTotalOut();
        long long53 = inflater35.getBytesRead();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.finished();
        long long58 = inflater54.getBytesRead();
        boolean boolean59 = inflater54.finished();
        long long60 = inflater54.getBytesRead();
        boolean boolean61 = inflater54.needsDictionary();
        boolean boolean62 = inflater54.needsDictionary();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.needsDictionary();
        int int65 = inflater63.getTotalOut();
        int int66 = inflater63.getTotalOut();
        boolean boolean67 = inflater63.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        byte[] byteArray70 = new byte[] { (byte) 1 };
        int int71 = inflater68.inflate(byteArray70);
        inflater68.reset();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        byte[] byteArray75 = new byte[] { (byte) 1 };
        int int76 = inflater73.inflate(byteArray75);
        int int77 = inflater73.getTotalIn();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        byte[] byteArray80 = new byte[] { (byte) 1 };
        int int81 = inflater78.inflate(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int87 = inflater78.inflate(byteArray86);
        int int88 = inflater73.inflate(byteArray86);
        inflater68.setInput(byteArray86);
        inflater63.setInput(byteArray86);
        int int91 = inflater54.inflate(byteArray86);
        inflater35.setInput(byteArray86);
        inflater19.setInput(byteArray86);
        inflater11.setInput(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray86, 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        inflater0.reset();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        int int13 = inflater9.getRemaining();
        long long14 = inflater9.getBytesWritten();
        boolean boolean15 = inflater9.finished();
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int30 = inflater21.inflate(byteArray29);
        int int31 = inflater16.inflate(byteArray29);
        int int32 = inflater16.getTotalOut();
        long long33 = inflater16.getBytesRead();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        int int46 = inflater16.inflate(byteArray44);
        int int47 = inflater9.inflate(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray44, 10, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        long long19 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        int int25 = inflater20.getRemaining();
        inflater20.reset();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater27.setInput(byteArray37);
        inflater20.setInput(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = inflater0.inflate(byteArray37, 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.end();
        java.lang.Class<?> wildcardClass2 = inflater0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.finished();
        long long9 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        long long15 = inflater10.getBytesWritten();
        int int16 = inflater10.getTotalIn();
        int int17 = inflater10.getTotalOut();
        int int18 = inflater10.getTotalOut();
        boolean boolean19 = inflater10.needsDictionary();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        int int24 = inflater20.getAdler();
        boolean boolean25 = inflater20.finished();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        inflater26.reset();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        long long35 = inflater31.getBytesWritten();
        inflater31.reset();
        long long37 = inflater31.getBytesWritten();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        int int56 = inflater38.inflate(byteArray54);
        inflater31.setInput(byteArray54);
        inflater26.setInput(byteArray54);
        inflater20.setInput(byteArray54, (int) (byte) 0, 1);
        int int62 = inflater10.inflate(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = inflater0.inflate(byteArray54, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.needsDictionary();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        int int13 = inflater9.getAdler();
        inflater9.reset();
        long long15 = inflater9.getBytesWritten();
        inflater9.end();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        boolean boolean36 = inflater17.finished();
        int int37 = inflater17.getTotalOut();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        long long42 = inflater38.getBytesRead();
        boolean boolean43 = inflater38.needsDictionary();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        long long48 = inflater44.getBytesWritten();
        inflater44.reset();
        long long50 = inflater44.getBytesWritten();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater57.setInput(byteArray67);
        int int69 = inflater51.inflate(byteArray67);
        inflater44.setInput(byteArray67);
        inflater38.setInput(byteArray67);
        int int72 = inflater17.inflate(byteArray67);
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.needsInput();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        boolean boolean78 = inflater77.finished();
        int int79 = inflater77.getRemaining();
        boolean boolean80 = inflater77.finished();
        byte[] byteArray87 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater77.setInput(byteArray87);
        inflater73.setInput(byteArray87);
        int int90 = inflater17.inflate(byteArray87);
        inflater9.setInput(byteArray87);
        inflater0.setInput(byteArray87, (int) (byte) 0, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        boolean boolean15 = inflater8.needsInput();
        inflater8.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        long long21 = inflater17.getBytesRead();
        boolean boolean22 = inflater17.needsInput();
        int int23 = inflater17.getTotalOut();
        long long24 = inflater17.getBytesRead();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        inflater25.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        inflater25.setInput(byteArray42);
        int int47 = inflater17.inflate(byteArray42, 1, (int) (short) 1);
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        int int52 = inflater48.getAdler();
        int int53 = inflater48.getAdler();
        int int54 = inflater48.getAdler();
        int int55 = inflater48.getTotalOut();
        inflater48.reset();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.needsDictionary();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.needsDictionary();
        boolean boolean63 = inflater59.needsInput();
        int int64 = inflater59.getRemaining();
        inflater59.reset();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater59.setInput(byteArray76);
        inflater57.setInput(byteArray76);
        inflater48.setInput(byteArray76, (int) (byte) 0, 0);
        int int83 = inflater17.inflate(byteArray76);
        int int84 = inflater8.inflate(byteArray76);
        int int85 = inflater0.inflate(byteArray76);
        boolean boolean86 = inflater0.needsInput();
        int int87 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        int int74 = inflater0.getRemaining();
        long long75 = inflater0.getBytesRead();
        boolean boolean76 = inflater0.needsDictionary();
        int int77 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        inflater0.reset();
        inflater0.reset();
        java.lang.Class<?> wildcardClass25 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.reset();
        inflater0.reset();
        long long9 = inflater0.getBytesRead();
        long long10 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater(true);
        int int13 = inflater12.getRemaining();
        long long14 = inflater12.getBytesRead();
        boolean boolean15 = inflater12.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater(true);
        int int18 = inflater17.getRemaining();
        long long19 = inflater17.getBytesRead();
        int int20 = inflater17.getTotalIn();
        long long21 = inflater17.getBytesWritten();
        int int22 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        inflater23.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int42 = inflater33.inflate(byteArray41);
        int int43 = inflater28.inflate(byteArray41);
        inflater23.setInput(byteArray41);
        int int45 = inflater17.inflate(byteArray41);
        inflater12.setDictionary(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        long long8 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.needsInput();
        int int15 = inflater9.getTotalOut();
        long long16 = inflater9.getBytesWritten();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        int int23 = inflater19.getTotalIn();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        inflater24.end();
        boolean boolean28 = inflater24.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        inflater24.setInput(byteArray31);
        inflater19.setInput(byteArray31);
        inflater17.setInput(byteArray31);
        int int36 = inflater9.inflate(byteArray31);
        int int37 = inflater9.getTotalOut();
        long long38 = inflater9.getBytesRead();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        boolean boolean51 = inflater39.needsDictionary();
        int int52 = inflater39.getRemaining();
        long long53 = inflater39.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.finished();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater54.setInput(byteArray68);
        inflater39.setInput(byteArray68);
        int int72 = inflater9.inflate(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        boolean boolean3 = inflater1.finished();
        boolean boolean4 = inflater1.needsDictionary();
        inflater1.reset();
        int int6 = inflater1.getTotalOut();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater(true);
        int int9 = inflater8.getRemaining();
        long long10 = inflater8.getBytesRead();
        int int11 = inflater8.getTotalIn();
        long long12 = inflater8.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.finished();
        inflater13.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        int int25 = inflater20.getRemaining();
        inflater20.reset();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        byte[] byteArray37 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater27.setInput(byteArray37);
        inflater20.setInput(byteArray37);
        int int40 = inflater13.inflate(byteArray37);
        inflater8.setInput(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray37, 4, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        boolean boolean4 = inflater1.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater(true);
        int int7 = inflater6.getRemaining();
        long long8 = inflater6.getBytesRead();
        int int9 = inflater6.getTotalIn();
        long long10 = inflater6.getBytesWritten();
        int int11 = inflater6.getTotalIn();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater12.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        int int21 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        byte[] byteArray30 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int31 = inflater22.inflate(byteArray30);
        int int32 = inflater17.inflate(byteArray30);
        inflater12.setInput(byteArray30);
        int int34 = inflater6.inflate(byteArray30);
        inflater1.setDictionary(byteArray30);
        inflater1.end();
        boolean boolean37 = inflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getAdler();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean10 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        boolean boolean23 = inflater0.finished();
        int int24 = inflater0.getTotalIn();
        inflater0.reset();
        long long26 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        boolean boolean31 = inflater27.needsInput();
        int int32 = inflater27.getRemaining();
        inflater27.reset();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        int int40 = inflater37.getTotalOut();
        inflater37.reset();
        boolean boolean42 = inflater37.needsInput();
        int int43 = inflater37.getRemaining();
        boolean boolean44 = inflater37.finished();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        boolean boolean49 = inflater45.finished();
        inflater45.end();
        inflater45.end();
        boolean boolean52 = inflater45.needsDictionary();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.finished();
        byte[] byteArray67 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater57.setInput(byteArray67);
        inflater53.setInput(byteArray67);
        inflater45.setInput(byteArray67);
        int int73 = inflater37.inflate(byteArray67, 6, (int) (short) 0);
        int int74 = inflater34.inflate(byteArray67);
        inflater27.setInput(byteArray67, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray67, 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        inflater0.reset();
        int int23 = inflater0.getAdler();
        int int24 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        boolean boolean2 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsDictionary();
        boolean boolean23 = inflater0.finished();
        int int24 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        inflater24.reset();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        inflater31.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        inflater31.setInput(byteArray48);
        int int53 = inflater24.inflate(byteArray48, 0, (int) (byte) 0);
        inflater1.setInput(byteArray48);
        int int55 = inflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        int int21 = inflater0.getTotalIn();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getTotalOut();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        long long29 = inflater25.getBytesWritten();
        inflater25.reset();
        int int31 = inflater25.getRemaining();
        boolean boolean32 = inflater25.needsDictionary();
        boolean boolean33 = inflater25.needsDictionary();
        inflater25.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater(true);
        int int37 = inflater36.getRemaining();
        long long38 = inflater36.getBytesRead();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        int int43 = inflater36.inflate(byteArray41);
        int int44 = inflater36.getAdler();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        byte[] byteArray47 = new byte[] { (byte) 1 };
        int int48 = inflater45.inflate(byteArray47);
        int int49 = inflater45.getTotalIn();
        int int50 = inflater45.getTotalIn();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        long long55 = inflater51.getBytesRead();
        boolean boolean56 = inflater51.finished();
        long long57 = inflater51.getBytesRead();
        boolean boolean58 = inflater51.needsDictionary();
        boolean boolean59 = inflater51.needsDictionary();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.needsDictionary();
        int int62 = inflater60.getTotalOut();
        int int63 = inflater60.getTotalOut();
        boolean boolean64 = inflater60.needsInput();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        inflater65.reset();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        byte[] byteArray72 = new byte[] { (byte) 1 };
        int int73 = inflater70.inflate(byteArray72);
        int int74 = inflater70.getTotalIn();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        byte[] byteArray77 = new byte[] { (byte) 1 };
        int int78 = inflater75.inflate(byteArray77);
        byte[] byteArray83 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int84 = inflater75.inflate(byteArray83);
        int int85 = inflater70.inflate(byteArray83);
        inflater65.setInput(byteArray83);
        inflater60.setInput(byteArray83);
        int int88 = inflater51.inflate(byteArray83);
        inflater45.setInput(byteArray83);
        inflater36.setDictionary(byteArray83);
        int int91 = inflater25.inflate(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray83, 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        boolean boolean11 = inflater6.needsDictionary();
        boolean boolean12 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater6.inflate(byteArray23);
        int int26 = inflater0.inflate(byteArray23);
        int int27 = inflater0.getTotalIn();
        inflater0.end();
        int int29 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        int int21 = inflater0.getTotalIn();
        boolean boolean22 = inflater0.finished();
        int int23 = inflater0.getTotalIn();
        int int24 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        inflater5.reset();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        int int14 = inflater10.getTotalIn();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int24 = inflater15.inflate(byteArray23);
        int int25 = inflater10.inflate(byteArray23);
        inflater5.setInput(byteArray23);
        inflater0.setInput(byteArray23);
        int int28 = inflater0.getAdler();
        boolean boolean29 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalOut();
        boolean boolean9 = inflater0.needsInput();
        boolean boolean10 = inflater0.needsInput();
        long long11 = inflater0.getBytesRead();
        boolean boolean12 = inflater0.needsInput();
        long long13 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        boolean boolean19 = inflater14.needsDictionary();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        long long24 = inflater20.getBytesWritten();
        inflater20.reset();
        int int26 = inflater20.getRemaining();
        boolean boolean27 = inflater20.needsDictionary();
        boolean boolean28 = inflater20.needsDictionary();
        inflater20.reset();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater(true);
        int int32 = inflater31.getRemaining();
        long long33 = inflater31.getBytesRead();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        int int38 = inflater31.inflate(byteArray36);
        int int39 = inflater31.getAdler();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        int int44 = inflater40.getTotalIn();
        int int45 = inflater40.getTotalIn();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        long long50 = inflater46.getBytesRead();
        boolean boolean51 = inflater46.finished();
        long long52 = inflater46.getBytesRead();
        boolean boolean53 = inflater46.needsDictionary();
        boolean boolean54 = inflater46.needsDictionary();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.needsDictionary();
        int int57 = inflater55.getTotalOut();
        int int58 = inflater55.getTotalOut();
        boolean boolean59 = inflater55.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        byte[] byteArray62 = new byte[] { (byte) 1 };
        int int63 = inflater60.inflate(byteArray62);
        inflater60.reset();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        int int69 = inflater65.getTotalIn();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        byte[] byteArray72 = new byte[] { (byte) 1 };
        int int73 = inflater70.inflate(byteArray72);
        byte[] byteArray78 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int79 = inflater70.inflate(byteArray78);
        int int80 = inflater65.inflate(byteArray78);
        inflater60.setInput(byteArray78);
        inflater55.setInput(byteArray78);
        int int83 = inflater46.inflate(byteArray78);
        inflater40.setInput(byteArray78);
        inflater31.setDictionary(byteArray78);
        int int86 = inflater20.inflate(byteArray78);
        int int87 = inflater14.inflate(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray78, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getTotalOut();
        boolean boolean18 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater(false);
        boolean boolean21 = inflater20.finished();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        int int26 = inflater22.getTotalIn();
        int int27 = inflater22.getTotalIn();
        int int28 = inflater22.getRemaining();
        boolean boolean29 = inflater22.needsInput();
        int int30 = inflater22.getAdler();
        int int31 = inflater22.getTotalOut();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        int int36 = inflater32.getAdler();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        inflater37.end();
        boolean boolean41 = inflater37.needsInput();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater37.setInput(byteArray44);
        int int47 = inflater32.inflate(byteArray44);
        inflater22.setInput(byteArray44);
        inflater20.setInput(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        int int11 = inflater0.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        boolean boolean16 = inflater12.finished();
        inflater12.end();
        inflater12.end();
        boolean boolean19 = inflater12.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.needsDictionary();
        boolean boolean24 = inflater20.needsInput();
        int int25 = inflater20.getRemaining();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        int int38 = inflater20.inflate(byteArray36);
        boolean boolean39 = inflater20.finished();
        int int40 = inflater20.getAdler();
        boolean boolean41 = inflater20.finished();
        int int42 = inflater20.getAdler();
        boolean boolean43 = inflater20.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        int int48 = inflater44.getTotalIn();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        byte[] byteArray57 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int58 = inflater49.inflate(byteArray57);
        int int59 = inflater44.inflate(byteArray57);
        int int60 = inflater20.inflate(byteArray57);
        inflater12.setInput(byteArray57, (int) (byte) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray57, (-1), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        long long8 = inflater0.getBytesRead();
        boolean boolean9 = inflater0.needsDictionary();
        int int10 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsInput();
        long long23 = inflater0.getBytesRead();
        int int24 = inflater0.getRemaining();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        long long5 = inflater1.getBytesWritten();
        boolean boolean6 = inflater1.finished();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getAdler();
        boolean boolean12 = inflater7.finished();
        long long13 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        boolean boolean16 = inflater14.needsInput();
        boolean boolean17 = inflater14.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        long long22 = inflater18.getBytesRead();
        boolean boolean23 = inflater18.needsDictionary();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        long long28 = inflater24.getBytesWritten();
        inflater24.reset();
        long long30 = inflater24.getBytesWritten();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        int int49 = inflater31.inflate(byteArray47);
        inflater24.setInput(byteArray47);
        inflater18.setInput(byteArray47);
        int int52 = inflater14.inflate(byteArray47);
        int int53 = inflater7.inflate(byteArray47);
        inflater1.setInput(byteArray47, 0, (int) (short) 1);
        long long57 = inflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        long long10 = inflater5.getBytesWritten();
        int int11 = inflater5.getAdler();
        int int12 = inflater5.getAdler();
        boolean boolean13 = inflater5.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        long long18 = inflater14.getBytesRead();
        boolean boolean19 = inflater14.needsInput();
        int int20 = inflater14.getTotalOut();
        long long21 = inflater14.getBytesRead();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        inflater22.reset();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        inflater22.setInput(byteArray39);
        int int44 = inflater14.inflate(byteArray39, 1, (int) (short) 1);
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        int int49 = inflater45.getAdler();
        int int50 = inflater45.getAdler();
        int int51 = inflater45.getAdler();
        int int52 = inflater45.getTotalOut();
        inflater45.reset();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.needsDictionary();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        boolean boolean60 = inflater56.needsInput();
        int int61 = inflater56.getRemaining();
        inflater56.reset();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.finished();
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater63.setInput(byteArray73);
        inflater56.setInput(byteArray73);
        inflater54.setInput(byteArray73);
        inflater45.setInput(byteArray73, (int) (byte) 0, 0);
        int int80 = inflater14.inflate(byteArray73);
        int int81 = inflater5.inflate(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray73, 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        int int73 = inflater0.inflate(byteArray70);
        int int74 = inflater0.getRemaining();
        long long75 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        byte[] byteArray78 = new byte[] { (byte) 1 };
        int int79 = inflater76.inflate(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = inflater0.inflate(byteArray78, (int) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.finished();
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater5.setInput(byteArray15);
        inflater5.end();
        int int18 = inflater5.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        int int23 = inflater19.getAdler();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        inflater24.end();
        boolean boolean28 = inflater24.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        inflater24.setInput(byteArray31);
        int int34 = inflater19.inflate(byteArray31);
        inflater5.setInput(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray31, (int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        boolean boolean3 = inflater1.needsDictionary();
        int int4 = inflater1.getAdler();
        int int5 = inflater1.getTotalOut();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        int int10 = inflater7.getTotalIn();
        int int11 = inflater7.getTotalIn();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        int int17 = inflater13.getTotalIn();
        long long18 = inflater13.getBytesWritten();
        int int19 = inflater13.getAdler();
        int int20 = inflater13.getAdler();
        boolean boolean21 = inflater13.needsInput();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        long long26 = inflater22.getBytesRead();
        boolean boolean27 = inflater22.needsInput();
        int int28 = inflater22.getTotalOut();
        long long29 = inflater22.getBytesRead();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        inflater30.reset();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater30.setInput(byteArray47);
        int int52 = inflater22.inflate(byteArray47, 1, (int) (short) 1);
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        int int57 = inflater53.getAdler();
        int int58 = inflater53.getAdler();
        int int59 = inflater53.getAdler();
        int int60 = inflater53.getTotalOut();
        inflater53.reset();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.needsDictionary();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsDictionary();
        boolean boolean68 = inflater64.needsInput();
        int int69 = inflater64.getRemaining();
        inflater64.reset();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        boolean boolean72 = inflater71.finished();
        int int73 = inflater71.getRemaining();
        boolean boolean74 = inflater71.finished();
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater71.setInput(byteArray81);
        inflater64.setInput(byteArray81);
        inflater62.setInput(byteArray81);
        inflater53.setInput(byteArray81, (int) (byte) 0, 0);
        int int88 = inflater22.inflate(byteArray81);
        int int89 = inflater13.inflate(byteArray81);
        inflater7.setDictionary(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = inflater1.inflate(byteArray81, (int) (short) 10, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        boolean boolean16 = inflater9.needsInput();
        int int17 = inflater9.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsInput();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        inflater18.setInput(byteArray32);
        inflater9.setInput(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray32, (int) '#', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getTotalOut();
        long long17 = inflater0.getBytesRead();
        int int18 = inflater0.getTotalIn();
        boolean boolean19 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsInput();
        int int9 = inflater0.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater(true);
        int int12 = inflater11.getRemaining();
        long long13 = inflater11.getBytesRead();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        inflater14.end();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.finished();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater18.setInput(byteArray28);
        inflater14.setInput(byteArray28);
        inflater11.setInput(byteArray28, (int) (byte) 1, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = inflater0.inflate(byteArray28, (int) (byte) -1, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater5.setInput(byteArray12);
        inflater0.setInput(byteArray12);
        java.util.zip.Inflater inflater16 = new java.util.zip.Inflater();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        int int19 = inflater16.inflate(byteArray18);
        int int20 = inflater16.getTotalIn();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int30 = inflater21.inflate(byteArray29);
        int int31 = inflater16.inflate(byteArray29);
        int int32 = inflater16.getTotalOut();
        int int33 = inflater16.getTotalOut();
        long long34 = inflater16.getBytesRead();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.finished();
        long long41 = inflater35.getBytesRead();
        boolean boolean42 = inflater35.needsDictionary();
        boolean boolean43 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.needsDictionary();
        int int46 = inflater44.getTotalOut();
        int int47 = inflater44.getTotalOut();
        boolean boolean48 = inflater44.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        inflater49.reset();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        int int58 = inflater54.getTotalIn();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int68 = inflater59.inflate(byteArray67);
        int int69 = inflater54.inflate(byteArray67);
        inflater49.setInput(byteArray67);
        inflater44.setInput(byteArray67);
        int int72 = inflater35.inflate(byteArray67);
        inflater16.setInput(byteArray67);
        inflater0.setInput(byteArray67);
        inflater0.reset();
        long long76 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass77 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        boolean boolean25 = inflater6.finished();
        int int26 = inflater6.getAdler();
        boolean boolean27 = inflater6.finished();
        int int28 = inflater6.getAdler();
        boolean boolean29 = inflater6.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        int int48 = inflater30.inflate(byteArray46);
        boolean boolean49 = inflater30.finished();
        int int50 = inflater30.getAdler();
        boolean boolean51 = inflater30.finished();
        int int52 = inflater30.getAdler();
        boolean boolean53 = inflater30.needsInput();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        int int58 = inflater54.getTotalIn();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int68 = inflater59.inflate(byteArray67);
        int int69 = inflater54.inflate(byteArray67);
        int int70 = inflater30.inflate(byteArray67);
        int int71 = inflater6.inflate(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray67, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        int int1 = inflater0.getRemaining();
        long long2 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater3 = new java.util.zip.Inflater();
        boolean boolean4 = inflater3.finished();
        int int5 = inflater3.getRemaining();
        boolean boolean6 = inflater3.needsDictionary();
        boolean boolean7 = inflater3.needsInput();
        int int8 = inflater3.getRemaining();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        int int21 = inflater3.inflate(byteArray19);
        boolean boolean22 = inflater3.finished();
        int int23 = inflater3.getTotalOut();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        long long28 = inflater24.getBytesRead();
        boolean boolean29 = inflater24.needsDictionary();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        long long34 = inflater30.getBytesWritten();
        inflater30.reset();
        long long36 = inflater30.getBytesWritten();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        int int55 = inflater37.inflate(byteArray53);
        inflater30.setInput(byteArray53);
        inflater24.setInput(byteArray53);
        int int58 = inflater3.inflate(byteArray53);
        long long59 = inflater3.getBytesRead();
        int int60 = inflater3.getTotalOut();
        int int61 = inflater3.getTotalIn();
        inflater3.reset();
        boolean boolean63 = inflater3.needsInput();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        boolean boolean68 = inflater64.finished();
        int int69 = inflater64.getRemaining();
        java.util.zip.Inflater inflater70 = new java.util.zip.Inflater();
        boolean boolean71 = inflater70.finished();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        byte[] byteArray74 = new byte[] { (byte) 1 };
        int int75 = inflater72.inflate(byteArray74);
        int int76 = inflater72.getTotalIn();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        boolean boolean78 = inflater77.finished();
        int int79 = inflater77.getRemaining();
        inflater77.end();
        boolean boolean81 = inflater77.needsInput();
        java.util.zip.Inflater inflater82 = new java.util.zip.Inflater();
        byte[] byteArray84 = new byte[] { (byte) 1 };
        int int85 = inflater82.inflate(byteArray84);
        inflater77.setInput(byteArray84);
        inflater72.setInput(byteArray84);
        inflater70.setInput(byteArray84);
        int int89 = inflater64.inflate(byteArray84);
        inflater3.setInput(byteArray84);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.finished();
        long long10 = inflater0.getBytesRead();
        boolean boolean11 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass12 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        java.lang.Class<?> wildcardClass20 = byteArray17.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.end();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.finished();
        boolean boolean8 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsDictionary();
        inflater0.reset();
        int int10 = inflater0.getAdler();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        long long15 = inflater11.getBytesRead();
        boolean boolean16 = inflater11.needsInput();
        int int17 = inflater11.getTotalOut();
        long long18 = inflater11.getBytesRead();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        int int24 = inflater19.getRemaining();
        inflater19.reset();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        inflater19.setInput(byteArray36);
        int int41 = inflater11.inflate(byteArray36, 1, (int) (short) 1);
        inflater0.setInput(byteArray36);
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        int int13 = inflater9.getTotalIn();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int23 = inflater14.inflate(byteArray22);
        int int24 = inflater9.inflate(byteArray22);
        int int25 = inflater9.getTotalOut();
        int int26 = inflater9.getTotalOut();
        long long27 = inflater9.getBytesRead();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        long long32 = inflater28.getBytesRead();
        boolean boolean33 = inflater28.finished();
        long long34 = inflater28.getBytesRead();
        boolean boolean35 = inflater28.needsDictionary();
        boolean boolean36 = inflater28.needsDictionary();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.needsDictionary();
        int int39 = inflater37.getTotalOut();
        int int40 = inflater37.getTotalOut();
        boolean boolean41 = inflater37.needsInput();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        int int51 = inflater47.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int61 = inflater52.inflate(byteArray60);
        int int62 = inflater47.inflate(byteArray60);
        inflater42.setInput(byteArray60);
        inflater37.setInput(byteArray60);
        int int65 = inflater28.inflate(byteArray60);
        inflater9.setInput(byteArray60);
        inflater0.setInput(byteArray60);
        java.lang.Class<?> wildcardClass68 = byteArray60.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        inflater0.reset();
        boolean boolean2 = inflater0.needsInput();
        int int3 = inflater0.getTotalIn();
        int int4 = inflater0.getRemaining();
        boolean boolean5 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        boolean boolean10 = inflater6.finished();
        inflater6.reset();
        boolean boolean12 = inflater6.needsDictionary();
        long long13 = inflater6.getBytesRead();
        inflater6.end();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        boolean boolean19 = inflater15.needsInput();
        boolean boolean20 = inflater15.needsDictionary();
        boolean boolean21 = inflater15.finished();
        int int22 = inflater15.getTotalIn();
        int int23 = inflater15.getRemaining();
        int int24 = inflater15.getAdler();
        int int25 = inflater15.getAdler();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        int int29 = inflater26.getTotalOut();
        inflater26.reset();
        boolean boolean31 = inflater26.needsInput();
        int int32 = inflater26.getRemaining();
        boolean boolean33 = inflater26.finished();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        boolean boolean38 = inflater34.finished();
        inflater34.end();
        inflater34.end();
        boolean boolean41 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        inflater42.setInput(byteArray56);
        inflater34.setInput(byteArray56);
        int int62 = inflater26.inflate(byteArray56, 6, (int) (short) 0);
        int int63 = inflater15.inflate(byteArray56);
        inflater6.setInput(byteArray56, 4, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray56, (int) (short) 0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        inflater0.end();
        boolean boolean8 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsDictionary();
        long long6 = inflater0.getBytesRead();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        long long12 = inflater8.getBytesWritten();
        inflater8.reset();
        long long14 = inflater8.getBytesWritten();
        int int15 = inflater8.getTotalIn();
        boolean boolean16 = inflater8.needsDictionary();
        int int17 = inflater8.getTotalIn();
        int int18 = inflater8.getTotalIn();
        boolean boolean19 = inflater8.needsInput();
        inflater8.reset();
        long long21 = inflater8.getBytesRead();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater28.setInput(byteArray38);
        int int40 = inflater22.inflate(byteArray38);
        boolean boolean41 = inflater22.finished();
        int int42 = inflater22.getTotalOut();
        boolean boolean43 = inflater22.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        int int48 = inflater44.getAdler();
        int int49 = inflater44.getAdler();
        long long50 = inflater44.getBytesWritten();
        long long51 = inflater44.getBytesRead();
        boolean boolean52 = inflater44.finished();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater53.setInput(byteArray63);
        int int65 = inflater44.inflate(byteArray63);
        inflater22.setInput(byteArray63);
        inflater8.setInput(byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        inflater27.setInput(byteArray41);
        inflater8.setInput(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray41, (int) 'a', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        int int9 = inflater0.getAdler();
        long long10 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        int int15 = inflater11.getTotalIn();
        long long16 = inflater11.getBytesWritten();
        int int17 = inflater11.getAdler();
        int int18 = inflater11.getAdler();
        long long19 = inflater11.getBytesRead();
        boolean boolean20 = inflater11.finished();
        long long21 = inflater11.getBytesRead();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        int int26 = inflater22.getTotalIn();
        int int27 = inflater22.getTotalIn();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.finished();
        long long32 = inflater28.getBytesRead();
        boolean boolean33 = inflater28.finished();
        long long34 = inflater28.getBytesRead();
        boolean boolean35 = inflater28.needsDictionary();
        boolean boolean36 = inflater28.needsDictionary();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.needsDictionary();
        int int39 = inflater37.getTotalOut();
        int int40 = inflater37.getTotalOut();
        boolean boolean41 = inflater37.needsInput();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        int int51 = inflater47.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int61 = inflater52.inflate(byteArray60);
        int int62 = inflater47.inflate(byteArray60);
        inflater42.setInput(byteArray60);
        inflater37.setInput(byteArray60);
        int int65 = inflater28.inflate(byteArray60);
        inflater22.setInput(byteArray60);
        inflater11.setInput(byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray60, 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getAdler();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        int int29 = inflater25.getAdler();
        boolean boolean30 = inflater25.finished();
        long long31 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        boolean boolean34 = inflater32.needsInput();
        boolean boolean35 = inflater32.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        long long40 = inflater36.getBytesRead();
        boolean boolean41 = inflater36.needsDictionary();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        long long46 = inflater42.getBytesWritten();
        inflater42.reset();
        long long48 = inflater42.getBytesWritten();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        int int67 = inflater49.inflate(byteArray65);
        inflater42.setInput(byteArray65);
        inflater36.setInput(byteArray65);
        int int70 = inflater32.inflate(byteArray65);
        int int71 = inflater25.inflate(byteArray65);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray65, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        inflater29.reset();
        boolean boolean36 = inflater29.needsDictionary();
        int int37 = inflater29.getTotalIn();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        inflater38.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        inflater45.reset();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        inflater45.setInput(byteArray62);
        int int67 = inflater38.inflate(byteArray62, 0, (int) (byte) 0);
        int int68 = inflater29.inflate(byteArray62);
        int int69 = inflater8.inflate(byteArray62);
        int int70 = inflater0.inflate(byteArray62);
        long long71 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsDictionary();
        int int23 = inflater0.getAdler();
        long long24 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.needsDictionary();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        boolean boolean25 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        boolean boolean28 = inflater26.needsInput();
        boolean boolean29 = inflater26.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        long long34 = inflater30.getBytesRead();
        boolean boolean35 = inflater30.needsDictionary();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        long long40 = inflater36.getBytesWritten();
        inflater36.reset();
        long long42 = inflater36.getBytesWritten();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.finished();
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater49.setInput(byteArray59);
        int int61 = inflater43.inflate(byteArray59);
        inflater36.setInput(byteArray59);
        inflater30.setInput(byteArray59);
        int int64 = inflater26.inflate(byteArray59);
        inflater0.setInput(byteArray59);
        boolean boolean66 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getTotalOut();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.needsDictionary();
        int int11 = inflater9.getTotalOut();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        int int17 = inflater12.getRemaining();
        inflater12.reset();
        boolean boolean19 = inflater12.needsDictionary();
        int int20 = inflater12.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        boolean boolean25 = inflater21.finished();
        inflater21.end();
        inflater21.end();
        boolean boolean28 = inflater21.needsInput();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        boolean boolean48 = inflater29.finished();
        int int49 = inflater29.getAdler();
        boolean boolean50 = inflater29.finished();
        int int51 = inflater29.getAdler();
        boolean boolean52 = inflater29.needsInput();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        int int57 = inflater53.getTotalIn();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int67 = inflater58.inflate(byteArray66);
        int int68 = inflater53.inflate(byteArray66);
        int int69 = inflater29.inflate(byteArray66);
        inflater21.setInput(byteArray66, (int) (byte) 0, (int) (short) 1);
        int int73 = inflater12.inflate(byteArray66);
        inflater9.setInput(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray66, 4, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        long long19 = inflater0.getBytesRead();
        int int20 = inflater0.getAdler();
        int int21 = inflater0.getTotalIn();
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        java.lang.Class<?> wildcardClass24 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.reset();
        boolean boolean8 = inflater0.needsDictionary();
        byte[] byteArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = inflater0.inflate(byteArray9, 10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getAdler();
        boolean boolean7 = inflater0.needsInput();
        long long8 = inflater0.getBytesRead();
        int int9 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        int int26 = inflater8.inflate(byteArray24);
        boolean boolean27 = inflater8.finished();
        int int28 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        long long33 = inflater29.getBytesRead();
        boolean boolean34 = inflater29.needsDictionary();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        long long39 = inflater35.getBytesWritten();
        inflater35.reset();
        long long41 = inflater35.getBytesWritten();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        inflater35.setInput(byteArray58);
        inflater29.setInput(byteArray58);
        int int63 = inflater8.inflate(byteArray58);
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsInput();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater64.setInput(byteArray78);
        int int81 = inflater8.inflate(byteArray78);
        inflater0.setInput(byteArray78);
        java.lang.Class<?> wildcardClass83 = byteArray78.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        boolean boolean13 = inflater9.finished();
        inflater9.end();
        inflater9.end();
        boolean boolean16 = inflater9.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        boolean boolean36 = inflater17.finished();
        int int37 = inflater17.getAdler();
        boolean boolean38 = inflater17.finished();
        int int39 = inflater17.getAdler();
        boolean boolean40 = inflater17.needsInput();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        int int45 = inflater41.getTotalIn();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int55 = inflater46.inflate(byteArray54);
        int int56 = inflater41.inflate(byteArray54);
        int int57 = inflater17.inflate(byteArray54);
        inflater9.setInput(byteArray54, (int) (byte) 0, (int) (short) 1);
        int int61 = inflater0.inflate(byteArray54);
        boolean boolean62 = inflater0.needsInput();
        int int63 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean19 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        java.lang.Class<?> wildcardClass19 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        long long12 = inflater8.getBytesRead();
        long long13 = inflater8.getBytesWritten();
        boolean boolean14 = inflater8.finished();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        boolean boolean19 = inflater15.finished();
        int int20 = inflater15.getRemaining();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        inflater21.reset();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        int int30 = inflater26.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int40 = inflater31.inflate(byteArray39);
        int int41 = inflater26.inflate(byteArray39);
        inflater21.setInput(byteArray39);
        inflater15.setInput(byteArray39);
        int int44 = inflater8.inflate(byteArray39);
        int int45 = inflater0.inflate(byteArray39);
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray56, 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        boolean boolean41 = inflater0.needsInput();
        inflater0.reset();
        inflater0.reset();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        boolean boolean49 = inflater44.needsDictionary();
        boolean boolean50 = inflater44.needsDictionary();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater44.inflate(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray61, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.needsDictionary();
        boolean boolean9 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.needsDictionary();
        long long14 = inflater10.getBytesRead();
        boolean boolean15 = inflater10.needsInput();
        int int16 = inflater10.getTotalOut();
        long long17 = inflater10.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        boolean boolean22 = inflater18.finished();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        int int29 = inflater26.inflate(byteArray28);
        int int30 = inflater26.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        inflater31.end();
        boolean boolean35 = inflater31.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        inflater31.setInput(byteArray38);
        inflater26.setInput(byteArray38);
        inflater24.setInput(byteArray38);
        int int43 = inflater18.inflate(byteArray38);
        inflater10.setInput(byteArray38);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsDictionary();
        boolean boolean13 = inflater0.needsInput();
        inflater0.reset();
        inflater0.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater(true);
        inflater17.end();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        int int24 = inflater19.getRemaining();
        inflater19.reset();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater26.setInput(byteArray36);
        inflater19.setInput(byteArray36);
        inflater17.setInput(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray36, (int) '#', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        boolean boolean4 = inflater1.needsInput();
        inflater1.reset();
        long long6 = inflater1.getBytesRead();
        int int7 = inflater1.getTotalOut();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getTotalIn();
        int int13 = inflater8.getTotalOut();
        boolean boolean14 = inflater8.needsInput();
        int int15 = inflater8.getTotalOut();
        long long16 = inflater8.getBytesRead();
        boolean boolean17 = inflater8.needsDictionary();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        long long22 = inflater18.getBytesRead();
        long long23 = inflater18.getBytesWritten();
        boolean boolean24 = inflater18.finished();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        inflater25.reset();
        boolean boolean32 = inflater25.needsDictionary();
        int int33 = inflater25.getTotalOut();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        boolean boolean38 = inflater34.finished();
        inflater34.end();
        inflater34.end();
        boolean boolean41 = inflater34.needsInput();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        byte[] byteArray58 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater48.setInput(byteArray58);
        int int60 = inflater42.inflate(byteArray58);
        boolean boolean61 = inflater42.finished();
        int int62 = inflater42.getAdler();
        boolean boolean63 = inflater42.finished();
        int int64 = inflater42.getAdler();
        boolean boolean65 = inflater42.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        int int69 = inflater66.inflate(byteArray68);
        int int70 = inflater66.getTotalIn();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        byte[] byteArray73 = new byte[] { (byte) 1 };
        int int74 = inflater71.inflate(byteArray73);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int80 = inflater71.inflate(byteArray79);
        int int81 = inflater66.inflate(byteArray79);
        int int82 = inflater42.inflate(byteArray79);
        inflater34.setInput(byteArray79, (int) (byte) 0, (int) (short) 1);
        int int86 = inflater25.inflate(byteArray79);
        inflater18.setInput(byteArray79, (int) (byte) 0, 1);
        int int90 = inflater8.inflate(byteArray79);
        inflater1.setDictionary(byteArray79, (int) (short) 0, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        int int25 = inflater1.getRemaining();
        long long26 = inflater1.getBytesRead();
        long long27 = inflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalOut();
        long long25 = inflater0.getBytesRead();
        int int26 = inflater0.getRemaining();
        boolean boolean27 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        inflater28.setInput(byteArray45);
        int int48 = inflater28.getTotalOut();
        boolean boolean49 = inflater28.needsDictionary();
        long long50 = inflater28.getBytesWritten();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.needsDictionary();
        int int53 = inflater51.getTotalOut();
        int int54 = inflater51.getTotalOut();
        long long55 = inflater51.getBytesWritten();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        long long60 = inflater56.getBytesRead();
        boolean boolean61 = inflater56.needsDictionary();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        long long66 = inflater62.getBytesWritten();
        inflater62.reset();
        long long68 = inflater62.getBytesWritten();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.needsDictionary();
        boolean boolean73 = inflater69.needsInput();
        int int74 = inflater69.getRemaining();
        java.util.zip.Inflater inflater75 = new java.util.zip.Inflater();
        boolean boolean76 = inflater75.finished();
        int int77 = inflater75.getRemaining();
        boolean boolean78 = inflater75.finished();
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater75.setInput(byteArray85);
        int int87 = inflater69.inflate(byteArray85);
        inflater62.setInput(byteArray85);
        inflater56.setInput(byteArray85);
        int int90 = inflater51.inflate(byteArray85);
        inflater28.setInput(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = inflater0.inflate(byteArray85);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: incorrect header check");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater10.setInput(byteArray24);
        inflater7.setInput(byteArray24, (int) (byte) 1, (int) (short) 1);
        int int30 = inflater0.inflate(byteArray24);
        boolean boolean31 = inflater0.needsInput();
        boolean boolean32 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass33 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.reset();
        boolean boolean6 = inflater0.needsDictionary();
        int int7 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        boolean boolean13 = inflater8.needsDictionary();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        long long18 = inflater14.getBytesWritten();
        inflater14.reset();
        int int20 = inflater14.getRemaining();
        boolean boolean21 = inflater14.needsDictionary();
        boolean boolean22 = inflater14.needsDictionary();
        inflater14.reset();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater(true);
        int int26 = inflater25.getRemaining();
        long long27 = inflater25.getBytesRead();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater25.inflate(byteArray30);
        int int33 = inflater25.getAdler();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        int int38 = inflater34.getTotalIn();
        int int39 = inflater34.getTotalIn();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        long long44 = inflater40.getBytesRead();
        boolean boolean45 = inflater40.finished();
        long long46 = inflater40.getBytesRead();
        boolean boolean47 = inflater40.needsDictionary();
        boolean boolean48 = inflater40.needsDictionary();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.needsDictionary();
        int int51 = inflater49.getTotalOut();
        int int52 = inflater49.getTotalOut();
        boolean boolean53 = inflater49.needsInput();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        inflater54.reset();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        int int63 = inflater59.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int73 = inflater64.inflate(byteArray72);
        int int74 = inflater59.inflate(byteArray72);
        inflater54.setInput(byteArray72);
        inflater49.setInput(byteArray72);
        int int77 = inflater40.inflate(byteArray72);
        inflater34.setInput(byteArray72);
        inflater25.setDictionary(byteArray72);
        int int80 = inflater14.inflate(byteArray72);
        int int81 = inflater8.inflate(byteArray72);
        inflater0.setInput(byteArray72);
        int int83 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int14 = inflater5.inflate(byteArray13);
        int int15 = inflater0.inflate(byteArray13);
        int int16 = inflater0.getTotalOut();
        int int17 = inflater0.getTotalOut();
        long long18 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        long long23 = inflater19.getBytesRead();
        boolean boolean24 = inflater19.finished();
        long long25 = inflater19.getBytesRead();
        boolean boolean26 = inflater19.needsDictionary();
        boolean boolean27 = inflater19.needsDictionary();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.needsDictionary();
        int int30 = inflater28.getTotalOut();
        int int31 = inflater28.getTotalOut();
        boolean boolean32 = inflater28.needsInput();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        inflater33.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        int int42 = inflater38.getTotalIn();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        byte[] byteArray51 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int52 = inflater43.inflate(byteArray51);
        int int53 = inflater38.inflate(byteArray51);
        inflater33.setInput(byteArray51);
        inflater28.setInput(byteArray51);
        int int56 = inflater19.inflate(byteArray51);
        inflater0.setInput(byteArray51);
        inflater0.end();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        boolean boolean60 = inflater59.finished();
        int int61 = inflater59.getRemaining();
        boolean boolean62 = inflater59.needsDictionary();
        long long63 = inflater59.getBytesRead();
        boolean boolean64 = inflater59.needsDictionary();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        int int68 = inflater65.inflate(byteArray67);
        long long69 = inflater65.getBytesWritten();
        inflater65.reset();
        long long71 = inflater65.getBytesWritten();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        boolean boolean73 = inflater72.finished();
        int int74 = inflater72.getRemaining();
        boolean boolean75 = inflater72.needsDictionary();
        boolean boolean76 = inflater72.needsInput();
        int int77 = inflater72.getRemaining();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        boolean boolean79 = inflater78.finished();
        int int80 = inflater78.getRemaining();
        boolean boolean81 = inflater78.finished();
        byte[] byteArray88 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater78.setInput(byteArray88);
        int int90 = inflater72.inflate(byteArray88);
        inflater65.setInput(byteArray88);
        inflater59.setInput(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray88, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        inflater2.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        long long11 = inflater7.getBytesWritten();
        inflater7.reset();
        long long13 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        int int19 = inflater14.getRemaining();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        int int32 = inflater14.inflate(byteArray30);
        inflater7.setInput(byteArray30);
        inflater2.setInput(byteArray30);
        inflater1.setDictionary(byteArray30);
        long long36 = inflater1.getBytesRead();
        inflater1.end();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        int int5 = inflater1.getRemaining();
        boolean boolean6 = inflater1.needsInput();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.needsDictionary();
        int int9 = inflater7.getTotalOut();
        int int10 = inflater7.getTotalOut();
        int int11 = inflater7.getAdler();
        boolean boolean12 = inflater7.needsDictionary();
        int int13 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        int int17 = inflater14.inflate(byteArray16);
        boolean boolean18 = inflater14.finished();
        inflater14.end();
        inflater14.end();
        boolean boolean21 = inflater14.needsInput();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getRemaining();
        inflater22.reset();
        boolean boolean29 = inflater22.needsDictionary();
        int int30 = inflater22.getTotalIn();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        inflater31.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        inflater38.reset();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        inflater38.setInput(byteArray55);
        int int60 = inflater31.inflate(byteArray55, 0, (int) (byte) 0);
        int int61 = inflater22.inflate(byteArray55);
        inflater14.setInput(byteArray55);
        int int65 = inflater7.inflate(byteArray55, 0, (int) (byte) 0);
        inflater1.setDictionary(byteArray55);
        long long67 = inflater1.getBytesRead();
        long long68 = inflater1.getBytesWritten();
        inflater1.reset();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        long long5 = inflater1.getBytesWritten();
        int int6 = inflater1.getAdler();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        inflater7.reset();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater7.setInput(byteArray24);
        int int27 = inflater7.getTotalOut();
        boolean boolean28 = inflater7.needsInput();
        boolean boolean29 = inflater7.needsDictionary();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        boolean boolean34 = inflater30.finished();
        inflater30.end();
        inflater30.end();
        boolean boolean37 = inflater30.needsInput();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.needsDictionary();
        boolean boolean42 = inflater38.needsInput();
        int int43 = inflater38.getRemaining();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        int int56 = inflater38.inflate(byteArray54);
        boolean boolean57 = inflater38.finished();
        int int58 = inflater38.getAdler();
        boolean boolean59 = inflater38.finished();
        int int60 = inflater38.getAdler();
        boolean boolean61 = inflater38.needsInput();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        int int66 = inflater62.getTotalIn();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int76 = inflater67.inflate(byteArray75);
        int int77 = inflater62.inflate(byteArray75);
        int int78 = inflater38.inflate(byteArray75);
        inflater30.setInput(byteArray75, (int) (byte) 0, (int) (short) 1);
        inflater7.setInput(byteArray75);
        inflater1.setInput(byteArray75, (int) (short) 0, 1);
        boolean boolean86 = inflater1.needsInput();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        boolean boolean28 = inflater24.needsInput();
        int int29 = inflater24.getRemaining();
        inflater24.reset();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        boolean boolean35 = inflater31.needsInput();
        int int36 = inflater31.getRemaining();
        inflater31.reset();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        boolean boolean39 = inflater38.finished();
        int int40 = inflater38.getRemaining();
        boolean boolean41 = inflater38.finished();
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater38.setInput(byteArray48);
        inflater31.setInput(byteArray48);
        int int53 = inflater24.inflate(byteArray48, 0, (int) (byte) 0);
        inflater1.setInput(byteArray48);
        boolean boolean55 = inflater1.finished();
        boolean boolean56 = inflater1.needsDictionary();
        inflater1.end();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        long long5 = inflater1.getBytesWritten();
        int int6 = inflater1.getTotalOut();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        inflater0.reset();
        boolean boolean3 = inflater0.needsInput();
        int int4 = inflater0.getAdler();
        java.lang.Class<?> wildcardClass5 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        inflater0.reset();
        int int24 = inflater0.getTotalIn();
        boolean boolean25 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        int int56 = inflater0.getAdler();
        int int57 = inflater0.getAdler();
        int int58 = inflater0.getRemaining();
        long long59 = inflater0.getBytesWritten();
        boolean boolean60 = inflater0.needsInput();
        boolean boolean61 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater0.setInput(byteArray10);
        boolean boolean12 = inflater0.needsInput();
        boolean boolean13 = inflater0.needsDictionary();
        boolean boolean14 = inflater0.needsInput();
        boolean boolean15 = inflater0.finished();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater(true);
        int int18 = inflater17.getRemaining();
        long long19 = inflater17.getBytesRead();
        int int20 = inflater17.getTotalIn();
        long long21 = inflater17.getBytesWritten();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        long long26 = inflater22.getBytesRead();
        boolean boolean27 = inflater22.finished();
        inflater22.reset();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        inflater29.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        inflater29.setInput(byteArray46);
        int int49 = inflater22.inflate(byteArray46);
        inflater17.setInput(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = inflater0.inflate(byteArray46, (int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        boolean boolean11 = inflater7.finished();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        int int17 = inflater13.getAdler();
        boolean boolean18 = inflater13.finished();
        long long19 = inflater13.getBytesWritten();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        boolean boolean22 = inflater20.needsInput();
        boolean boolean23 = inflater20.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.needsDictionary();
        long long28 = inflater24.getBytesRead();
        boolean boolean29 = inflater24.needsDictionary();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        long long34 = inflater30.getBytesWritten();
        inflater30.reset();
        long long36 = inflater30.getBytesWritten();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        boolean boolean41 = inflater37.needsInput();
        int int42 = inflater37.getRemaining();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        int int55 = inflater37.inflate(byteArray53);
        inflater30.setInput(byteArray53);
        inflater24.setInput(byteArray53);
        int int58 = inflater20.inflate(byteArray53);
        int int59 = inflater13.inflate(byteArray53);
        inflater7.setInput(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray53, 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        boolean boolean6 = inflater0.needsDictionary();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getTotalIn();
        long long9 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        long long17 = inflater13.getBytesRead();
        boolean boolean18 = inflater13.finished();
        long long19 = inflater13.getBytesRead();
        boolean boolean20 = inflater13.needsDictionary();
        boolean boolean21 = inflater13.needsDictionary();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.needsDictionary();
        int int24 = inflater22.getTotalOut();
        int int25 = inflater22.getTotalOut();
        boolean boolean26 = inflater22.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater27.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getTotalIn();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int46 = inflater37.inflate(byteArray45);
        int int47 = inflater32.inflate(byteArray45);
        inflater27.setInput(byteArray45);
        inflater22.setInput(byteArray45);
        int int50 = inflater13.inflate(byteArray45);
        inflater8.setInput(byteArray45);
        int int52 = inflater0.inflate(byteArray45);
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.needsDictionary();
        boolean boolean57 = inflater53.needsInput();
        int int58 = inflater53.getRemaining();
        inflater53.reset();
        boolean boolean60 = inflater53.needsInput();
        int int61 = inflater53.getRemaining();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        inflater62.setInput(byteArray76);
        inflater53.setInput(byteArray76);
        int int80 = inflater0.inflate(byteArray76);
        boolean boolean81 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.finished();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        int int21 = inflater0.inflate(byteArray19);
        int int22 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass23 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        int int13 = inflater10.getTotalOut();
        inflater10.reset();
        boolean boolean15 = inflater10.needsInput();
        int int16 = inflater10.getRemaining();
        boolean boolean17 = inflater10.finished();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        boolean boolean22 = inflater18.finished();
        inflater18.end();
        inflater18.end();
        boolean boolean25 = inflater18.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        inflater26.setInput(byteArray40);
        inflater18.setInput(byteArray40);
        int int46 = inflater10.inflate(byteArray40, 6, (int) (short) 0);
        int int47 = inflater7.inflate(byteArray40);
        inflater0.setInput(byteArray40, (int) (byte) 0, (int) (byte) 1);
        boolean boolean51 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalOut();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        int int13 = inflater8.getRemaining();
        inflater8.reset();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        inflater8.setInput(byteArray25);
        int int30 = inflater0.inflate(byteArray25, 1, (int) (short) 1);
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        int int35 = inflater31.getAdler();
        int int36 = inflater31.getAdler();
        int int37 = inflater31.getAdler();
        int int38 = inflater31.getTotalOut();
        inflater31.reset();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.needsDictionary();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.needsDictionary();
        boolean boolean46 = inflater42.needsInput();
        int int47 = inflater42.getRemaining();
        inflater42.reset();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.finished();
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater49.setInput(byteArray59);
        inflater42.setInput(byteArray59);
        inflater40.setInput(byteArray59);
        inflater31.setInput(byteArray59, (int) (byte) 0, 0);
        int int66 = inflater0.inflate(byteArray59);
        int int67 = inflater0.getTotalIn();
        boolean boolean68 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.finished();
        long long30 = inflater26.getBytesRead();
        boolean boolean31 = inflater26.finished();
        inflater26.reset();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        inflater33.reset();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        inflater33.setInput(byteArray50);
        int int53 = inflater26.inflate(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = inflater0.inflate(byteArray50, (int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        inflater0.reset();
        boolean boolean3 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        long long24 = inflater0.getBytesRead();
        long long25 = inflater0.getBytesRead();
        long long26 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        boolean boolean31 = inflater27.needsInput();
        int int32 = inflater27.getRemaining();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater33.setInput(byteArray43);
        int int45 = inflater27.inflate(byteArray43);
        boolean boolean46 = inflater27.finished();
        int int47 = inflater27.getTotalIn();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater(true);
        inflater49.end();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        inflater51.reset();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater51.setInput(byteArray68);
        inflater49.setInput(byteArray68);
        inflater27.setInput(byteArray68);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = inflater0.inflate(byteArray68, (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        int int5 = inflater1.getTotalIn();
        int int6 = inflater1.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        boolean boolean26 = inflater7.finished();
        int int27 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        long long32 = inflater28.getBytesRead();
        boolean boolean33 = inflater28.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        long long38 = inflater34.getBytesWritten();
        inflater34.reset();
        long long40 = inflater34.getBytesWritten();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        boolean boolean44 = inflater41.needsDictionary();
        boolean boolean45 = inflater41.needsInput();
        int int46 = inflater41.getRemaining();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        int int59 = inflater41.inflate(byteArray57);
        inflater34.setInput(byteArray57);
        inflater28.setInput(byteArray57);
        int int62 = inflater7.inflate(byteArray57);
        int int63 = inflater7.getAdler();
        int int64 = inflater7.getAdler();
        java.util.zip.Inflater inflater65 = new java.util.zip.Inflater();
        boolean boolean66 = inflater65.finished();
        int int67 = inflater65.getRemaining();
        boolean boolean68 = inflater65.finished();
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater65.setInput(byteArray75);
        inflater65.end();
        int int78 = inflater65.getRemaining();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        boolean boolean80 = inflater79.finished();
        int int81 = inflater79.getRemaining();
        boolean boolean82 = inflater79.finished();
        int int83 = inflater79.getAdler();
        java.util.zip.Inflater inflater84 = new java.util.zip.Inflater();
        boolean boolean85 = inflater84.finished();
        int int86 = inflater84.getRemaining();
        inflater84.end();
        boolean boolean88 = inflater84.needsInput();
        java.util.zip.Inflater inflater89 = new java.util.zip.Inflater();
        byte[] byteArray91 = new byte[] { (byte) 1 };
        int int92 = inflater89.inflate(byteArray91);
        inflater84.setInput(byteArray91);
        int int94 = inflater79.inflate(byteArray91);
        inflater65.setInput(byteArray91);
        int int96 = inflater7.inflate(byteArray91);
        inflater1.setDictionary(byteArray91);
        int int98 = inflater1.getRemaining();
        long long99 = inflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 6 + "'", int78 == 6);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        int int11 = inflater0.getTotalOut();
        int int12 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        inflater13.setInput(byteArray27);
        int int30 = inflater13.getAdler();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        boolean boolean35 = inflater31.finished();
        int int36 = inflater31.getRemaining();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        inflater37.reset();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        int int46 = inflater42.getTotalIn();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        byte[] byteArray55 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int56 = inflater47.inflate(byteArray55);
        int int57 = inflater42.inflate(byteArray55);
        inflater37.setInput(byteArray55);
        inflater31.setInput(byteArray55);
        inflater13.setInput(byteArray55);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray55, (int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        boolean boolean3 = inflater1.finished();
        boolean boolean4 = inflater1.needsDictionary();
        inflater1.reset();
        int int6 = inflater1.getTotalOut();
        long long7 = inflater1.getBytesRead();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalOut();
        int int10 = inflater0.getTotalOut();
        boolean boolean11 = inflater0.needsInput();
        boolean boolean12 = inflater0.needsInput();
        int int13 = inflater0.getTotalIn();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        int int10 = inflater7.inflate(byteArray9);
        int int11 = inflater7.getTotalOut();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getTotalIn();
        long long17 = inflater12.getBytesWritten();
        int int18 = inflater12.getTotalIn();
        boolean boolean19 = inflater12.needsDictionary();
        int int20 = inflater12.getAdler();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        inflater21.end();
        boolean boolean25 = inflater21.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        long long30 = inflater26.getBytesRead();
        boolean boolean31 = inflater26.needsInput();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        long long36 = inflater32.getBytesWritten();
        inflater32.reset();
        long long38 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.needsDictionary();
        boolean boolean43 = inflater39.needsInput();
        int int44 = inflater39.getRemaining();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.finished();
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater45.setInput(byteArray55);
        int int57 = inflater39.inflate(byteArray55);
        inflater32.setInput(byteArray55);
        int int59 = inflater26.inflate(byteArray55);
        inflater21.setInput(byteArray55);
        int int61 = inflater12.inflate(byteArray55);
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        int int66 = inflater62.getAdler();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        int int69 = inflater67.getRemaining();
        boolean boolean70 = inflater67.needsInput();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        boolean boolean72 = inflater71.finished();
        int int73 = inflater71.getRemaining();
        boolean boolean74 = inflater71.finished();
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater71.setInput(byteArray81);
        inflater67.setInput(byteArray81);
        inflater62.setInput(byteArray81);
        int int85 = inflater12.inflate(byteArray81);
        inflater7.setInput(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        inflater1.reset();
        int int3 = inflater1.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater(true);
        int int6 = inflater5.getRemaining();
        long long7 = inflater5.getBytesRead();
        int int8 = inflater5.getTotalIn();
        long long9 = inflater5.getBytesWritten();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        long long14 = inflater10.getBytesRead();
        boolean boolean15 = inflater10.finished();
        inflater10.reset();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        inflater17.reset();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        inflater17.setInput(byteArray34);
        int int37 = inflater10.inflate(byteArray34);
        inflater5.setInput(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = inflater1.inflate(byteArray34, (int) 'a', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsInput();
        int int8 = inflater0.getAdler();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        int int12 = inflater9.getTotalOut();
        inflater9.reset();
        long long14 = inflater9.getBytesWritten();
        int int15 = inflater9.getAdler();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater(false);
        int int18 = inflater17.getTotalIn();
        boolean boolean19 = inflater17.finished();
        boolean boolean20 = inflater17.needsDictionary();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        long long25 = inflater21.getBytesRead();
        inflater21.reset();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        boolean boolean31 = inflater27.needsInput();
        boolean boolean32 = inflater27.needsDictionary();
        boolean boolean33 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater34.setInput(byteArray44);
        int int46 = inflater27.inflate(byteArray44);
        int int47 = inflater21.inflate(byteArray44);
        inflater17.setInput(byteArray44, (int) (byte) 0, 0);
        int int53 = inflater9.inflate(byteArray44, 1, 0);
        int int54 = inflater0.inflate(byteArray44);
        byte[] byteArray55 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        int int6 = inflater2.getTotalIn();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        inflater7.end();
        boolean boolean11 = inflater7.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater7.setInput(byteArray14);
        inflater2.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        boolean boolean19 = inflater0.finished();
        boolean boolean20 = inflater0.finished();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesWritten();
        boolean boolean7 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater(true);
        int int10 = inflater9.getRemaining();
        long long11 = inflater9.getBytesRead();
        int int12 = inflater9.getTotalIn();
        int int13 = inflater9.getTotalIn();
        int int14 = inflater9.getRemaining();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        long long19 = inflater15.getBytesRead();
        long long20 = inflater15.getBytesWritten();
        boolean boolean21 = inflater15.finished();
        boolean boolean22 = inflater15.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.needsDictionary();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        inflater25.reset();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        inflater25.setInput(byteArray42);
        inflater23.setInput(byteArray42);
        inflater15.setInput(byteArray42);
        int int47 = inflater9.inflate(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = inflater0.inflate(byteArray42, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        inflater1.end();
        inflater1.end();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        long long8 = inflater4.getBytesRead();
        int int9 = inflater4.getTotalOut();
        int int10 = inflater4.getAdler();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater(true);
        int int13 = inflater12.getRemaining();
        long long14 = inflater12.getBytesRead();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        int int19 = inflater12.inflate(byteArray17);
        int int22 = inflater4.inflate(byteArray17, (int) (short) 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray17, 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        boolean boolean3 = inflater1.needsDictionary();
        int int4 = inflater1.getTotalOut();
        int int5 = inflater1.getTotalIn();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        int int10 = inflater6.getTotalIn();
        int int11 = inflater6.getTotalOut();
        int int12 = inflater6.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        int int16 = inflater13.inflate(byteArray15);
        int int17 = inflater13.getTotalIn();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        inflater18.end();
        boolean boolean22 = inflater18.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        inflater18.setInput(byteArray25);
        inflater13.setInput(byteArray25);
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        int int33 = inflater29.getTotalIn();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        byte[] byteArray42 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int43 = inflater34.inflate(byteArray42);
        int int44 = inflater29.inflate(byteArray42);
        int int45 = inflater29.getTotalOut();
        int int46 = inflater29.getTotalOut();
        long long47 = inflater29.getBytesRead();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        long long52 = inflater48.getBytesRead();
        boolean boolean53 = inflater48.finished();
        long long54 = inflater48.getBytesRead();
        boolean boolean55 = inflater48.needsDictionary();
        boolean boolean56 = inflater48.needsDictionary();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.needsDictionary();
        int int59 = inflater57.getTotalOut();
        int int60 = inflater57.getTotalOut();
        boolean boolean61 = inflater57.needsInput();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        inflater62.reset();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        int int71 = inflater67.getTotalIn();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        byte[] byteArray74 = new byte[] { (byte) 1 };
        int int75 = inflater72.inflate(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int81 = inflater72.inflate(byteArray80);
        int int82 = inflater67.inflate(byteArray80);
        inflater62.setInput(byteArray80);
        inflater57.setInput(byteArray80);
        int int85 = inflater48.inflate(byteArray80);
        inflater29.setInput(byteArray80);
        inflater13.setInput(byteArray80);
        int int88 = inflater6.inflate(byteArray80);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setDictionary(byteArray80, 6, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getAdler();
        int int25 = inflater0.getTotalIn();
        boolean boolean26 = inflater0.needsInput();
        int int27 = inflater0.getTotalIn();
        int int28 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        boolean boolean4 = inflater0.needsDictionary();
        long long5 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int15 = inflater6.inflate(byteArray14);
        boolean boolean16 = inflater6.finished();
        long long17 = inflater6.getBytesWritten();
        boolean boolean18 = inflater6.needsInput();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.needsDictionary();
        int int21 = inflater19.getTotalOut();
        int int22 = inflater19.getAdler();
        int int23 = inflater19.getTotalIn();
        int int24 = inflater19.getAdler();
        int int25 = inflater19.getRemaining();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.needsDictionary();
        int int28 = inflater26.getTotalOut();
        int int29 = inflater26.getTotalOut();
        long long30 = inflater26.getBytesWritten();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.needsDictionary();
        long long35 = inflater31.getBytesRead();
        boolean boolean36 = inflater31.needsDictionary();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        long long41 = inflater37.getBytesWritten();
        inflater37.reset();
        long long43 = inflater37.getBytesWritten();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.finished();
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater50.setInput(byteArray60);
        int int62 = inflater44.inflate(byteArray60);
        inflater37.setInput(byteArray60);
        inflater31.setInput(byteArray60);
        int int65 = inflater26.inflate(byteArray60);
        int int66 = inflater19.inflate(byteArray60);
        int int67 = inflater6.inflate(byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray60, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        inflater0.reset();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        boolean boolean7 = inflater0.needsInput();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        boolean boolean13 = inflater8.needsDictionary();
        boolean boolean14 = inflater8.finished();
        int int15 = inflater8.getTotalIn();
        int int16 = inflater8.getRemaining();
        long long17 = inflater8.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        int int22 = inflater18.getTotalIn();
        long long23 = inflater18.getBytesWritten();
        int int24 = inflater18.getTotalIn();
        int int25 = inflater18.getTotalOut();
        int int26 = inflater18.getTotalOut();
        boolean boolean27 = inflater18.needsDictionary();
        int int28 = inflater18.getTotalOut();
        long long29 = inflater18.getBytesRead();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        int int34 = inflater30.getAdler();
        int int35 = inflater30.getAdler();
        long long36 = inflater30.getBytesWritten();
        long long37 = inflater30.getBytesRead();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        int int42 = inflater38.getAdler();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        long long47 = inflater43.getBytesRead();
        boolean boolean48 = inflater43.finished();
        long long49 = inflater43.getBytesRead();
        boolean boolean50 = inflater43.needsDictionary();
        boolean boolean51 = inflater43.needsDictionary();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.needsDictionary();
        int int54 = inflater52.getTotalOut();
        int int55 = inflater52.getTotalOut();
        boolean boolean56 = inflater52.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        inflater57.reset();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        int int66 = inflater62.getTotalIn();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int76 = inflater67.inflate(byteArray75);
        int int77 = inflater62.inflate(byteArray75);
        inflater57.setInput(byteArray75);
        inflater52.setInput(byteArray75);
        int int80 = inflater43.inflate(byteArray75);
        inflater38.setInput(byteArray75);
        int int82 = inflater30.inflate(byteArray75);
        inflater18.setInput(byteArray75);
        int int84 = inflater8.inflate(byteArray75);
        inflater0.setInput(byteArray75);
        java.lang.Class<?> wildcardClass86 = byteArray75.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        int int40 = inflater0.inflate(byteArray37);
        long long41 = inflater0.getBytesRead();
        int int42 = inflater0.getRemaining();
        int int43 = inflater0.getTotalOut();
        int int44 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        long long21 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        int int27 = inflater22.getTotalIn();
        int int28 = inflater22.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        int int33 = inflater29.getAdler();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        long long38 = inflater34.getBytesRead();
        boolean boolean39 = inflater34.finished();
        long long40 = inflater34.getBytesRead();
        boolean boolean41 = inflater34.needsDictionary();
        boolean boolean42 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.needsDictionary();
        int int45 = inflater43.getTotalOut();
        int int46 = inflater43.getTotalOut();
        boolean boolean47 = inflater43.needsInput();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        inflater48.reset();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        int int57 = inflater53.getTotalIn();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        byte[] byteArray60 = new byte[] { (byte) 1 };
        int int61 = inflater58.inflate(byteArray60);
        byte[] byteArray66 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int67 = inflater58.inflate(byteArray66);
        int int68 = inflater53.inflate(byteArray66);
        inflater48.setInput(byteArray66);
        inflater43.setInput(byteArray66);
        int int71 = inflater34.inflate(byteArray66);
        inflater29.setInput(byteArray66);
        int int73 = inflater22.inflate(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = inflater0.inflate(byteArray66);
            org.junit.Assert.fail("Expected exception of type java.util.zip.DataFormatException; message: unknown compression method");
        } catch (java.util.zip.DataFormatException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getRemaining();
        inflater0.reset();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        inflater0.reset();
        boolean boolean28 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        inflater0.end();
        int int8 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        long long9 = inflater0.getBytesWritten();
        int int10 = inflater0.getTotalIn();
        int int11 = inflater0.getTotalIn();
        int int12 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        java.util.zip.Inflater inflater2 = new java.util.zip.Inflater();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        int int5 = inflater2.inflate(byteArray4);
        int int6 = inflater2.getTotalIn();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        inflater7.end();
        boolean boolean11 = inflater7.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        inflater7.setInput(byteArray14);
        inflater2.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        inflater0.end();
        boolean boolean22 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getAdler();
        boolean boolean9 = inflater0.finished();
        int int10 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        int int23 = inflater5.inflate(byteArray21);
        boolean boolean24 = inflater5.finished();
        int int25 = inflater5.getAdler();
        boolean boolean26 = inflater5.finished();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        inflater5.setInput(byteArray56);
        inflater0.setInput(byteArray56);
        int int63 = inflater0.getTotalIn();
        boolean boolean64 = inflater0.needsInput();
        int int65 = inflater0.getTotalIn();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        inflater0.reset();
        int int9 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass12 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsDictionary();
        int int8 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        boolean boolean13 = inflater9.finished();
        inflater9.end();
        inflater9.end();
        boolean boolean16 = inflater9.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        boolean boolean36 = inflater17.finished();
        int int37 = inflater17.getAdler();
        boolean boolean38 = inflater17.finished();
        int int39 = inflater17.getAdler();
        boolean boolean40 = inflater17.needsInput();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        int int45 = inflater41.getTotalIn();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        byte[] byteArray54 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int55 = inflater46.inflate(byteArray54);
        int int56 = inflater41.inflate(byteArray54);
        int int57 = inflater17.inflate(byteArray54);
        inflater9.setInput(byteArray54, (int) (byte) 0, (int) (short) 1);
        int int61 = inflater0.inflate(byteArray54);
        boolean boolean62 = inflater0.needsInput();
        long long63 = inflater0.getBytesWritten();
        byte[] byteArray64 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray64, (int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getRemaining();
        boolean boolean8 = inflater0.needsInput();
        boolean boolean9 = inflater0.needsDictionary();
        int int10 = inflater0.getAdler();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        int int14 = inflater11.getTotalOut();
        inflater11.reset();
        long long16 = inflater11.getBytesWritten();
        inflater11.reset();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        int int22 = inflater18.getTotalIn();
        long long23 = inflater18.getBytesWritten();
        int int24 = inflater18.getTotalOut();
        inflater18.reset();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        int int44 = inflater26.inflate(byteArray42);
        boolean boolean45 = inflater26.finished();
        int int46 = inflater26.getTotalOut();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.needsDictionary();
        long long51 = inflater47.getBytesRead();
        boolean boolean52 = inflater47.needsDictionary();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        byte[] byteArray55 = new byte[] { (byte) 1 };
        int int56 = inflater53.inflate(byteArray55);
        long long57 = inflater53.getBytesWritten();
        inflater53.reset();
        long long59 = inflater53.getBytesWritten();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.needsDictionary();
        boolean boolean64 = inflater60.needsInput();
        int int65 = inflater60.getRemaining();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        boolean boolean67 = inflater66.finished();
        int int68 = inflater66.getRemaining();
        boolean boolean69 = inflater66.finished();
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater66.setInput(byteArray76);
        int int78 = inflater60.inflate(byteArray76);
        inflater53.setInput(byteArray76);
        inflater47.setInput(byteArray76);
        int int81 = inflater26.inflate(byteArray76);
        inflater18.setInput(byteArray76);
        int int83 = inflater11.inflate(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = inflater0.inflate(byteArray76, (int) 'a', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getTotalOut();
        int int41 = inflater0.getAdler();
        boolean boolean42 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        int int19 = inflater0.getAdler();
        long long20 = inflater0.getBytesRead();
        long long21 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.needsDictionary();
        boolean boolean26 = inflater22.needsInput();
        boolean boolean27 = inflater22.needsDictionary();
        boolean boolean28 = inflater22.needsDictionary();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        int int41 = inflater22.inflate(byteArray39);
        boolean boolean42 = inflater22.finished();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        inflater22.setInput(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = inflater0.inflate(byteArray45, 6, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsInput();
        int int26 = inflater0.getRemaining();
        long long27 = inflater0.getBytesRead();
        long long28 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        int int5 = inflater0.getRemaining();
        int int6 = inflater0.getTotalOut();
        boolean boolean7 = inflater0.finished();
        long long8 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        boolean boolean26 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        long long31 = inflater27.getBytesWritten();
        inflater27.reset();
        long long33 = inflater27.getBytesWritten();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.needsDictionary();
        boolean boolean38 = inflater34.needsInput();
        int int39 = inflater34.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.finished();
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater40.setInput(byteArray50);
        int int52 = inflater34.inflate(byteArray50);
        inflater27.setInput(byteArray50);
        inflater21.setInput(byteArray50);
        int int55 = inflater0.inflate(byteArray50);
        int int56 = inflater0.getAdler();
        int int57 = inflater0.getAdler();
        int int58 = inflater0.getRemaining();
        int int59 = inflater0.getTotalIn();
        long long60 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        int int19 = inflater0.inflate(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getTotalOut();
        java.lang.Class<?> wildcardClass23 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesRead();
        int int7 = inflater0.getTotalOut();
        long long8 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        long long9 = inflater0.getBytesWritten();
        inflater0.end();
        int int11 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.needsDictionary();
        int int15 = inflater13.getTotalOut();
        boolean boolean16 = inflater13.finished();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        boolean boolean22 = inflater17.needsDictionary();
        boolean boolean23 = inflater17.finished();
        int int24 = inflater17.getTotalIn();
        int int25 = inflater17.getRemaining();
        long long26 = inflater17.getBytesWritten();
        int int27 = inflater17.getTotalOut();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        inflater28.end();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        inflater28.setInput(byteArray42);
        int int45 = inflater17.inflate(byteArray42);
        int int46 = inflater13.inflate(byteArray42);
        int int47 = inflater13.getTotalIn();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        inflater48.end();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater52.setInput(byteArray62);
        inflater48.setInput(byteArray62);
        inflater13.setInput(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = inflater0.inflate(byteArray62, 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        int int27 = inflater24.getTotalOut();
        inflater24.reset();
        boolean boolean29 = inflater24.needsInput();
        int int30 = inflater24.getRemaining();
        boolean boolean31 = inflater24.finished();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        boolean boolean36 = inflater32.finished();
        inflater32.end();
        inflater32.end();
        boolean boolean39 = inflater32.needsDictionary();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsInput();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.finished();
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater44.setInput(byteArray54);
        inflater40.setInput(byteArray54);
        inflater32.setInput(byteArray54);
        int int60 = inflater24.inflate(byteArray54, 6, (int) (short) 0);
        inflater0.setInput(byteArray54, 0, 6);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.finished();
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater29.setInput(byteArray39);
        inflater25.setInput(byteArray39);
        inflater6.setInput(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = inflater0.inflate(byteArray39, (-1), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        int int3 = inflater1.getAdler();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        int int8 = inflater4.getAdler();
        int int9 = inflater4.getAdler();
        long long10 = inflater4.getBytesWritten();
        long long11 = inflater4.getBytesRead();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        int int16 = inflater12.getAdler();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        long long21 = inflater17.getBytesRead();
        boolean boolean22 = inflater17.finished();
        long long23 = inflater17.getBytesRead();
        boolean boolean24 = inflater17.needsDictionary();
        boolean boolean25 = inflater17.needsDictionary();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.needsDictionary();
        int int28 = inflater26.getTotalOut();
        int int29 = inflater26.getTotalOut();
        boolean boolean30 = inflater26.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        inflater31.reset();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        int int40 = inflater36.getTotalIn();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        byte[] byteArray49 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int50 = inflater41.inflate(byteArray49);
        int int51 = inflater36.inflate(byteArray49);
        inflater31.setInput(byteArray49);
        inflater26.setInput(byteArray49);
        int int54 = inflater17.inflate(byteArray49);
        inflater12.setInput(byteArray49);
        int int56 = inflater4.inflate(byteArray49);
        int int57 = inflater1.inflate(byteArray49);
        int int58 = inflater1.getAdler();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        int int63 = inflater59.getTotalIn();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int73 = inflater64.inflate(byteArray72);
        int int74 = inflater59.inflate(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = inflater1.inflate(byteArray72, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        boolean boolean3 = inflater1.finished();
        boolean boolean4 = inflater1.finished();
        boolean boolean5 = inflater1.needsDictionary();
        boolean boolean6 = inflater1.finished();
        java.lang.Class<?> wildcardClass7 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean9 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        boolean boolean13 = inflater10.finished();
        int int14 = inflater10.getAdler();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        inflater15.end();
        boolean boolean19 = inflater15.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        byte[] byteArray22 = new byte[] { (byte) 1 };
        int int23 = inflater20.inflate(byteArray22);
        inflater15.setInput(byteArray22);
        int int25 = inflater10.inflate(byteArray22);
        inflater0.setInput(byteArray22);
        int int27 = inflater0.getRemaining();
        int int28 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsInput();
        int int8 = inflater0.getAdler();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.needsDictionary();
        boolean boolean13 = inflater9.needsInput();
        int int14 = inflater9.getRemaining();
        inflater9.reset();
        boolean boolean16 = inflater9.needsInput();
        int int17 = inflater9.getRemaining();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsInput();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        inflater18.setInput(byteArray32);
        inflater9.setInput(byteArray32);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray32, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        int int21 = inflater0.getTotalIn();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getTotalOut();
        int int24 = inflater0.getRemaining();
        boolean boolean25 = inflater0.needsDictionary();
        inflater0.reset();
        long long27 = inflater0.getBytesRead();
        long long28 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        long long13 = inflater9.getBytesWritten();
        int int14 = inflater9.getRemaining();
        int int15 = inflater9.getTotalOut();
        boolean boolean16 = inflater9.finished();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        int int21 = inflater17.getTotalIn();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        inflater22.end();
        boolean boolean26 = inflater22.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        inflater22.setInput(byteArray29);
        inflater17.setInput(byteArray29);
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        int int37 = inflater33.getTotalIn();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int47 = inflater38.inflate(byteArray46);
        int int48 = inflater33.inflate(byteArray46);
        int int49 = inflater33.getTotalOut();
        int int50 = inflater33.getTotalOut();
        long long51 = inflater33.getBytesRead();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        boolean boolean53 = inflater52.finished();
        int int54 = inflater52.getRemaining();
        boolean boolean55 = inflater52.finished();
        long long56 = inflater52.getBytesRead();
        boolean boolean57 = inflater52.finished();
        long long58 = inflater52.getBytesRead();
        boolean boolean59 = inflater52.needsDictionary();
        boolean boolean60 = inflater52.needsDictionary();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.needsDictionary();
        int int63 = inflater61.getTotalOut();
        int int64 = inflater61.getTotalOut();
        boolean boolean65 = inflater61.needsInput();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        int int69 = inflater66.inflate(byteArray68);
        inflater66.reset();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        byte[] byteArray73 = new byte[] { (byte) 1 };
        int int74 = inflater71.inflate(byteArray73);
        int int75 = inflater71.getTotalIn();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        byte[] byteArray78 = new byte[] { (byte) 1 };
        int int79 = inflater76.inflate(byteArray78);
        byte[] byteArray84 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int85 = inflater76.inflate(byteArray84);
        int int86 = inflater71.inflate(byteArray84);
        inflater66.setInput(byteArray84);
        inflater61.setInput(byteArray84);
        int int89 = inflater52.inflate(byteArray84);
        inflater33.setInput(byteArray84);
        inflater17.setInput(byteArray84);
        inflater9.setInput(byteArray84);
        int int93 = inflater0.inflate(byteArray84);
        int int94 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalIn();
        int int10 = inflater0.getTotalIn();
        boolean boolean11 = inflater0.needsInput();
        inflater0.reset();
        boolean boolean13 = inflater0.finished();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 100, (byte) 100, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            int int23 = inflater0.inflate(byteArray20, (int) '4', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 1, 0, 100, 100, 10]");
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesWritten();
        boolean boolean7 = inflater0.finished();
        int int8 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        long long11 = inflater0.getBytesRead();
        boolean boolean12 = inflater0.needsDictionary();
        boolean boolean13 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        inflater0.reset();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        boolean boolean11 = inflater6.needsDictionary();
        boolean boolean12 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater6.inflate(byteArray23);
        int int26 = inflater0.inflate(byteArray23);
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.finished();
        int int31 = inflater27.getAdler();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        inflater32.end();
        boolean boolean36 = inflater32.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        inflater32.setInput(byteArray39);
        int int42 = inflater27.inflate(byteArray39);
        inflater0.setInput(byteArray39);
        long long44 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        boolean boolean47 = inflater45.needsInput();
        boolean boolean48 = inflater45.needsInput();
        inflater45.end();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.finished();
        long long54 = inflater50.getBytesRead();
        inflater50.reset();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        boolean boolean60 = inflater56.needsInput();
        boolean boolean61 = inflater56.needsDictionary();
        boolean boolean62 = inflater56.needsDictionary();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        boolean boolean64 = inflater63.finished();
        int int65 = inflater63.getRemaining();
        boolean boolean66 = inflater63.finished();
        byte[] byteArray73 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater63.setInput(byteArray73);
        int int75 = inflater56.inflate(byteArray73);
        int int76 = inflater50.inflate(byteArray73);
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        boolean boolean78 = inflater77.finished();
        int int79 = inflater77.getRemaining();
        boolean boolean80 = inflater77.finished();
        int int81 = inflater77.getAdler();
        java.util.zip.Inflater inflater82 = new java.util.zip.Inflater();
        boolean boolean83 = inflater82.finished();
        int int84 = inflater82.getRemaining();
        inflater82.end();
        boolean boolean86 = inflater82.needsInput();
        java.util.zip.Inflater inflater87 = new java.util.zip.Inflater();
        byte[] byteArray89 = new byte[] { (byte) 1 };
        int int90 = inflater87.inflate(byteArray89);
        inflater82.setInput(byteArray89);
        int int92 = inflater77.inflate(byteArray89);
        inflater50.setInput(byteArray89);
        inflater45.setInput(byteArray89);
        int int95 = inflater0.inflate(byteArray89);
        boolean boolean96 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass97 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.finished();
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater37.setInput(byteArray47);
        inflater33.setInput(byteArray47);
        inflater25.setInput(byteArray47);
        inflater0.setInput(byteArray47);
        int int52 = inflater0.getRemaining();
        boolean boolean53 = inflater0.needsInput();
        inflater0.end();
        inflater0.end();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.finished();
        int int11 = inflater0.getTotalOut();
        boolean boolean12 = inflater0.finished();
        int int13 = inflater0.getTotalOut();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        long long7 = inflater0.getBytesWritten();
        boolean boolean8 = inflater0.finished();
        int int9 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        long long9 = inflater0.getBytesWritten();
        int int10 = inflater0.getTotalOut();
        inflater0.reset();
        long long12 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.needsDictionary();
        long long9 = inflater0.getBytesRead();
        boolean boolean10 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        int int15 = inflater11.getAdler();
        int int16 = inflater11.getAdler();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.finished();
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater17.setInput(byteArray27);
        boolean boolean29 = inflater17.needsDictionary();
        int int30 = inflater17.getRemaining();
        long long31 = inflater17.getBytesWritten();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        inflater32.setInput(byteArray46);
        inflater17.setInput(byteArray46);
        inflater11.setInput(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray46, (int) '4', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        inflater0.reset();
        inflater0.reset();
        int int26 = inflater0.getTotalIn();
        int int27 = inflater0.getTotalOut();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater0.setInput(byteArray33);
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        inflater0.reset();
        int int8 = inflater0.getTotalOut();
        int int9 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        boolean boolean15 = inflater11.finished();
        inflater11.end();
        inflater11.end();
        boolean boolean18 = inflater11.needsDictionary();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        inflater19.setInput(byteArray33);
        inflater11.setInput(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = inflater0.inflate(byteArray33, (int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.finished();
        boolean boolean7 = inflater0.needsDictionary();
        long long8 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass9 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        int int6 = inflater0.getRemaining();
        boolean boolean7 = inflater0.needsDictionary();
        boolean boolean8 = inflater0.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        long long13 = inflater9.getBytesRead();
        boolean boolean14 = inflater9.finished();
        long long15 = inflater9.getBytesRead();
        boolean boolean16 = inflater9.needsDictionary();
        boolean boolean17 = inflater9.needsDictionary();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.needsDictionary();
        int int20 = inflater18.getTotalOut();
        int int21 = inflater18.getTotalOut();
        boolean boolean22 = inflater18.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        inflater23.reset();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        int int32 = inflater28.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int42 = inflater33.inflate(byteArray41);
        int int43 = inflater28.inflate(byteArray41);
        inflater23.setInput(byteArray41);
        inflater18.setInput(byteArray41);
        int int46 = inflater9.inflate(byteArray41);
        inflater0.setInput(byteArray41, (int) (short) 0, (int) (byte) 1);
        boolean boolean50 = inflater0.finished();
        boolean boolean51 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int9 = inflater0.inflate(byteArray8);
        boolean boolean10 = inflater0.needsInput();
        boolean boolean11 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        long long16 = inflater12.getBytesRead();
        boolean boolean17 = inflater12.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        long long22 = inflater18.getBytesWritten();
        inflater18.reset();
        long long24 = inflater18.getBytesWritten();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        inflater18.setInput(byteArray41);
        int int45 = inflater12.inflate(byteArray41);
        inflater0.setInput(byteArray41, 0, (int) (byte) 0);
        int int49 = inflater0.getTotalIn();
        boolean boolean50 = inflater0.needsInput();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        byte[] byteArray53 = new byte[] { (byte) 1 };
        int int54 = inflater51.inflate(byteArray53);
        long long55 = inflater51.getBytesWritten();
        inflater51.end();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        inflater57.end();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.finished();
        byte[] byteArray71 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater61.setInput(byteArray71);
        inflater57.setInput(byteArray71);
        inflater51.setInput(byteArray71);
        int int75 = inflater0.inflate(byteArray71);
        java.lang.Class<?> wildcardClass76 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        long long19 = inflater0.getBytesRead();
        int int20 = inflater0.getAdler();
        int int21 = inflater0.getTotalIn();
        int int22 = inflater0.getTotalIn();
        java.lang.Class<?> wildcardClass23 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        long long5 = inflater0.getBytesWritten();
        int int6 = inflater0.getTotalIn();
        int int7 = inflater0.getTotalOut();
        long long8 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        boolean boolean10 = inflater7.needsInput();
        inflater7.reset();
        boolean boolean12 = inflater7.needsInput();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater(true);
        int int15 = inflater14.getRemaining();
        long long16 = inflater14.getBytesRead();
        int int17 = inflater14.getTotalIn();
        int int18 = inflater14.getRemaining();
        boolean boolean19 = inflater14.needsInput();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.needsDictionary();
        int int22 = inflater20.getTotalOut();
        int int23 = inflater20.getTotalOut();
        int int24 = inflater20.getAdler();
        boolean boolean25 = inflater20.needsDictionary();
        int int26 = inflater20.getTotalOut();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        int int30 = inflater27.inflate(byteArray29);
        boolean boolean31 = inflater27.finished();
        inflater27.end();
        inflater27.end();
        boolean boolean34 = inflater27.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        inflater35.reset();
        boolean boolean42 = inflater35.needsDictionary();
        int int43 = inflater35.getTotalIn();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        boolean boolean45 = inflater44.finished();
        int int46 = inflater44.getRemaining();
        boolean boolean47 = inflater44.needsDictionary();
        boolean boolean48 = inflater44.needsInput();
        int int49 = inflater44.getRemaining();
        inflater44.reset();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        inflater51.reset();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater51.setInput(byteArray68);
        int int73 = inflater44.inflate(byteArray68, 0, (int) (byte) 0);
        int int74 = inflater35.inflate(byteArray68);
        inflater27.setInput(byteArray68);
        int int78 = inflater20.inflate(byteArray68, 0, (int) (byte) 0);
        inflater14.setDictionary(byteArray68);
        inflater7.setDictionary(byteArray68, (int) (byte) 0, 2);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray68, (int) (byte) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        boolean boolean9 = inflater5.needsInput();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        inflater5.setInput(byteArray12);
        inflater0.setInput(byteArray12);
        boolean boolean16 = inflater0.needsInput();
        boolean boolean17 = inflater0.needsInput();
        int int18 = inflater0.getTotalIn();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        boolean boolean9 = inflater0.finished();
        long long10 = inflater0.getBytesRead();
        java.lang.Class<?> wildcardClass11 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.needsInput();
        int int9 = inflater0.getAdler();
        boolean boolean10 = inflater0.finished();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        int int15 = inflater11.getAdler();
        boolean boolean16 = inflater11.finished();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        int int20 = inflater17.inflate(byteArray19);
        inflater17.reset();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        long long26 = inflater22.getBytesWritten();
        inflater22.reset();
        long long28 = inflater22.getBytesWritten();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        boolean boolean30 = inflater29.finished();
        int int31 = inflater29.getRemaining();
        boolean boolean32 = inflater29.needsDictionary();
        boolean boolean33 = inflater29.needsInput();
        int int34 = inflater29.getRemaining();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.finished();
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater35.setInput(byteArray45);
        int int47 = inflater29.inflate(byteArray45);
        inflater22.setInput(byteArray45);
        inflater17.setInput(byteArray45);
        inflater11.setInput(byteArray45, (int) (byte) 0, 1);
        int int53 = inflater11.getTotalIn();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.needsDictionary();
        int int56 = inflater54.getTotalOut();
        int int57 = inflater54.getTotalOut();
        boolean boolean58 = inflater54.needsInput();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        inflater59.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        byte[] byteArray66 = new byte[] { (byte) 1 };
        int int67 = inflater64.inflate(byteArray66);
        int int68 = inflater64.getTotalIn();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int78 = inflater69.inflate(byteArray77);
        int int79 = inflater64.inflate(byteArray77);
        inflater59.setInput(byteArray77);
        inflater54.setInput(byteArray77);
        inflater11.setInput(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray77, 4, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsDictionary();
        int int6 = inflater0.getAdler();
        long long7 = inflater0.getBytesRead();
        int int8 = inflater0.getAdler();
        inflater0.reset();
        java.lang.Class<?> wildcardClass10 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        boolean boolean25 = inflater1.finished();
        boolean boolean26 = inflater1.finished();
        boolean boolean27 = inflater1.needsDictionary();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.needsInput();
        long long9 = inflater0.getBytesWritten();
        boolean boolean10 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater(true);
        int int13 = inflater12.getRemaining();
        long long14 = inflater12.getBytesRead();
        int int15 = inflater12.getTotalIn();
        long long16 = inflater12.getBytesWritten();
        int int17 = inflater12.getAdler();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        inflater18.reset();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        inflater18.setInput(byteArray35);
        int int38 = inflater18.getTotalOut();
        boolean boolean39 = inflater18.needsInput();
        boolean boolean40 = inflater18.needsDictionary();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        boolean boolean45 = inflater41.finished();
        inflater41.end();
        inflater41.end();
        boolean boolean48 = inflater41.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        int int67 = inflater49.inflate(byteArray65);
        boolean boolean68 = inflater49.finished();
        int int69 = inflater49.getAdler();
        boolean boolean70 = inflater49.finished();
        int int71 = inflater49.getAdler();
        boolean boolean72 = inflater49.needsInput();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        byte[] byteArray75 = new byte[] { (byte) 1 };
        int int76 = inflater73.inflate(byteArray75);
        int int77 = inflater73.getTotalIn();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        byte[] byteArray80 = new byte[] { (byte) 1 };
        int int81 = inflater78.inflate(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int87 = inflater78.inflate(byteArray86);
        int int88 = inflater73.inflate(byteArray86);
        int int89 = inflater49.inflate(byteArray86);
        inflater41.setInput(byteArray86, (int) (byte) 0, (int) (short) 1);
        inflater18.setInput(byteArray86);
        inflater12.setInput(byteArray86, (int) (short) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray86, (int) (byte) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getRemaining();
        inflater0.end();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        int int29 = inflater26.getTotalOut();
        inflater26.reset();
        int int31 = inflater26.getTotalOut();
        int int32 = inflater26.getTotalIn();
        int int33 = inflater26.getAdler();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        byte[] byteArray36 = new byte[] { (byte) 1 };
        int int37 = inflater34.inflate(byteArray36);
        int int38 = inflater34.getTotalIn();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        byte[] byteArray41 = new byte[] { (byte) 1 };
        int int42 = inflater39.inflate(byteArray41);
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int48 = inflater39.inflate(byteArray47);
        int int49 = inflater34.inflate(byteArray47);
        int int50 = inflater34.getTotalOut();
        int int51 = inflater34.getTotalOut();
        long long52 = inflater34.getBytesRead();
        java.util.zip.Inflater inflater53 = new java.util.zip.Inflater();
        boolean boolean54 = inflater53.finished();
        int int55 = inflater53.getRemaining();
        boolean boolean56 = inflater53.finished();
        long long57 = inflater53.getBytesRead();
        boolean boolean58 = inflater53.finished();
        long long59 = inflater53.getBytesRead();
        boolean boolean60 = inflater53.needsDictionary();
        boolean boolean61 = inflater53.needsDictionary();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.needsDictionary();
        int int64 = inflater62.getTotalOut();
        int int65 = inflater62.getTotalOut();
        boolean boolean66 = inflater62.needsInput();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        inflater67.reset();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        byte[] byteArray74 = new byte[] { (byte) 1 };
        int int75 = inflater72.inflate(byteArray74);
        int int76 = inflater72.getTotalIn();
        java.util.zip.Inflater inflater77 = new java.util.zip.Inflater();
        byte[] byteArray79 = new byte[] { (byte) 1 };
        int int80 = inflater77.inflate(byteArray79);
        byte[] byteArray85 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int86 = inflater77.inflate(byteArray85);
        int int87 = inflater72.inflate(byteArray85);
        inflater67.setInput(byteArray85);
        inflater62.setInput(byteArray85);
        int int90 = inflater53.inflate(byteArray85);
        inflater34.setInput(byteArray85);
        int int92 = inflater26.inflate(byteArray85);
        inflater0.setInput(byteArray85);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        inflater4.end();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater8.setInput(byteArray18);
        inflater4.setInput(byteArray18);
        inflater1.setInput(byteArray18, (int) (byte) 1, (int) (short) 1);
        int int24 = inflater1.getTotalIn();
        boolean boolean25 = inflater1.finished();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater(true);
        int int28 = inflater27.getRemaining();
        long long29 = inflater27.getBytesRead();
        int int30 = inflater27.getTotalIn();
        int int31 = inflater27.getRemaining();
        boolean boolean32 = inflater27.needsInput();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.needsDictionary();
        int int35 = inflater33.getTotalOut();
        int int36 = inflater33.getTotalOut();
        int int37 = inflater33.getAdler();
        boolean boolean38 = inflater33.needsDictionary();
        int int39 = inflater33.getTotalOut();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        int int43 = inflater40.inflate(byteArray42);
        boolean boolean44 = inflater40.finished();
        inflater40.end();
        inflater40.end();
        boolean boolean47 = inflater40.needsInput();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        inflater48.reset();
        boolean boolean55 = inflater48.needsDictionary();
        int int56 = inflater48.getTotalIn();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.finished();
        int int59 = inflater57.getRemaining();
        boolean boolean60 = inflater57.needsDictionary();
        boolean boolean61 = inflater57.needsInput();
        int int62 = inflater57.getRemaining();
        inflater57.reset();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.needsDictionary();
        boolean boolean68 = inflater64.needsInput();
        int int69 = inflater64.getRemaining();
        inflater64.reset();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        boolean boolean72 = inflater71.finished();
        int int73 = inflater71.getRemaining();
        boolean boolean74 = inflater71.finished();
        byte[] byteArray81 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater71.setInput(byteArray81);
        inflater64.setInput(byteArray81);
        int int86 = inflater57.inflate(byteArray81, 0, (int) (byte) 0);
        int int87 = inflater48.inflate(byteArray81);
        inflater40.setInput(byteArray81);
        int int91 = inflater33.inflate(byteArray81, 0, (int) (byte) 0);
        inflater27.setDictionary(byteArray81);
        inflater1.setDictionary(byteArray81);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.needsInput();
        int int9 = inflater0.getAdler();
        boolean boolean10 = inflater0.needsInput();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        int int18 = inflater11.getTotalIn();
        boolean boolean19 = inflater11.needsDictionary();
        int int20 = inflater11.getTotalOut();
        int int21 = inflater11.getTotalOut();
        boolean boolean22 = inflater11.needsInput();
        boolean boolean23 = inflater11.needsInput();
        boolean boolean24 = inflater11.finished();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        int int28 = inflater25.getTotalOut();
        inflater25.reset();
        long long30 = inflater25.getBytesWritten();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        boolean boolean33 = inflater31.needsInput();
        boolean boolean34 = inflater31.needsInput();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        long long39 = inflater35.getBytesRead();
        boolean boolean40 = inflater35.needsDictionary();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        byte[] byteArray43 = new byte[] { (byte) 1 };
        int int44 = inflater41.inflate(byteArray43);
        long long45 = inflater41.getBytesWritten();
        inflater41.reset();
        long long47 = inflater41.getBytesWritten();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        int int53 = inflater48.getRemaining();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.finished();
        byte[] byteArray64 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater54.setInput(byteArray64);
        int int66 = inflater48.inflate(byteArray64);
        inflater41.setInput(byteArray64);
        inflater35.setInput(byteArray64);
        int int69 = inflater31.inflate(byteArray64);
        int int70 = inflater25.inflate(byteArray64);
        inflater11.setInput(byteArray64);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray64, 4, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getAdler();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        long long8 = inflater4.getBytesWritten();
        inflater4.reset();
        int int10 = inflater4.getRemaining();
        boolean boolean11 = inflater4.needsDictionary();
        boolean boolean12 = inflater4.needsDictionary();
        inflater4.reset();
        int int14 = inflater4.getAdler();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.needsDictionary();
        long long19 = inflater15.getBytesRead();
        boolean boolean20 = inflater15.needsInput();
        int int21 = inflater15.getTotalOut();
        long long22 = inflater15.getBytesRead();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        boolean boolean27 = inflater23.needsInput();
        int int28 = inflater23.getRemaining();
        inflater23.reset();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.finished();
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater30.setInput(byteArray40);
        inflater23.setInput(byteArray40);
        int int45 = inflater15.inflate(byteArray40, 1, (int) (short) 1);
        inflater4.setInput(byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray40, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        boolean boolean5 = inflater4.finished();
        int int6 = inflater4.getRemaining();
        boolean boolean7 = inflater4.finished();
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater4.setInput(byteArray14);
        inflater0.setInput(byteArray14);
        int int17 = inflater0.getAdler();
        boolean boolean18 = inflater0.finished();
        int int19 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        int int27 = inflater0.getRemaining();
        int int28 = inflater0.getTotalIn();
        boolean boolean29 = inflater0.needsDictionary();
        boolean boolean30 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        long long5 = inflater1.getBytesWritten();
        int int6 = inflater1.getTotalIn();
        boolean boolean7 = inflater1.needsDictionary();
        inflater1.end();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        boolean boolean3 = inflater1.needsDictionary();
        int int4 = inflater1.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        inflater5.end();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        int int22 = inflater1.inflate(byteArray19);
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int32 = inflater23.inflate(byteArray31);
        boolean boolean33 = inflater23.finished();
        long long34 = inflater23.getBytesWritten();
        boolean boolean35 = inflater23.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.needsDictionary();
        int int38 = inflater36.getTotalOut();
        int int39 = inflater36.getAdler();
        int int40 = inflater36.getTotalIn();
        int int41 = inflater36.getAdler();
        int int42 = inflater36.getRemaining();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.needsDictionary();
        int int45 = inflater43.getTotalOut();
        int int46 = inflater43.getTotalOut();
        long long47 = inflater43.getBytesWritten();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        long long52 = inflater48.getBytesRead();
        boolean boolean53 = inflater48.needsDictionary();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        long long58 = inflater54.getBytesWritten();
        inflater54.reset();
        long long60 = inflater54.getBytesWritten();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.needsDictionary();
        boolean boolean65 = inflater61.needsInput();
        int int66 = inflater61.getRemaining();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        int int69 = inflater67.getRemaining();
        boolean boolean70 = inflater67.finished();
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater67.setInput(byteArray77);
        int int79 = inflater61.inflate(byteArray77);
        inflater54.setInput(byteArray77);
        inflater48.setInput(byteArray77);
        int int82 = inflater43.inflate(byteArray77);
        int int83 = inflater36.inflate(byteArray77);
        int int84 = inflater23.inflate(byteArray77);
        inflater1.setInput(byteArray77);
        boolean boolean86 = inflater1.needsDictionary();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.finished();
        int int9 = inflater5.getAdler();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        boolean boolean14 = inflater10.needsInput();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        inflater10.setInput(byteArray17);
        int int20 = inflater5.inflate(byteArray17);
        int int21 = inflater5.getTotalOut();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        boolean boolean26 = inflater22.finished();
        inflater22.end();
        inflater22.end();
        boolean boolean29 = inflater22.needsInput();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        int int48 = inflater30.inflate(byteArray46);
        boolean boolean49 = inflater30.finished();
        int int50 = inflater30.getAdler();
        boolean boolean51 = inflater30.finished();
        int int52 = inflater30.getAdler();
        boolean boolean53 = inflater30.needsInput();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        int int58 = inflater54.getTotalIn();
        java.util.zip.Inflater inflater59 = new java.util.zip.Inflater();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        int int62 = inflater59.inflate(byteArray61);
        byte[] byteArray67 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int68 = inflater59.inflate(byteArray67);
        int int69 = inflater54.inflate(byteArray67);
        int int70 = inflater30.inflate(byteArray67);
        inflater22.setInput(byteArray67, (int) (byte) 0, (int) (short) 1);
        inflater5.setInput(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = inflater0.inflate(byteArray67, (-1), 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsInput();
        boolean boolean22 = inflater0.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        inflater27.end();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        inflater27.setInput(byteArray41);
        int int44 = inflater23.inflate(byteArray41);
        inflater0.setInput(byteArray41, (int) (byte) 0, (int) (byte) 1);
        boolean boolean48 = inflater0.finished();
        int int49 = inflater0.getAdler();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        byte[] byteArray52 = new byte[] { (byte) 1 };
        int int53 = inflater50.inflate(byteArray52);
        inflater50.reset();
        long long55 = inflater50.getBytesWritten();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        byte[] byteArray58 = new byte[] { (byte) 1 };
        int int59 = inflater56.inflate(byteArray58);
        long long60 = inflater56.getBytesWritten();
        boolean boolean61 = inflater56.needsInput();
        int int62 = inflater56.getRemaining();
        int int63 = inflater56.getRemaining();
        java.util.zip.Inflater inflater64 = new java.util.zip.Inflater();
        boolean boolean65 = inflater64.finished();
        int int66 = inflater64.getRemaining();
        boolean boolean67 = inflater64.finished();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.finished();
        byte[] byteArray78 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater68.setInput(byteArray78);
        inflater64.setInput(byteArray78);
        inflater56.setInput(byteArray78, (int) (byte) 1, (int) (byte) 0);
        inflater50.setInput(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray78, (int) (short) 0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        long long5 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        boolean boolean11 = inflater10.finished();
        int int12 = inflater10.getRemaining();
        inflater10.end();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        byte[] byteArray24 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater14.setInput(byteArray24);
        inflater10.setInput(byteArray24);
        inflater7.setInput(byteArray24, (int) (byte) 1, (int) (short) 1);
        int int30 = inflater0.inflate(byteArray24);
        boolean boolean31 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass32 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getTotalIn();
        inflater0.reset();
        int int7 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        int int11 = inflater8.getTotalOut();
        inflater8.reset();
        boolean boolean13 = inflater8.needsInput();
        int int14 = inflater8.getRemaining();
        boolean boolean15 = inflater8.finished();
        int int16 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        boolean boolean21 = inflater17.needsInput();
        int int22 = inflater17.getRemaining();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        byte[] byteArray33 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater23.setInput(byteArray33);
        int int35 = inflater17.inflate(byteArray33);
        boolean boolean36 = inflater17.finished();
        int int37 = inflater17.getAdler();
        boolean boolean38 = inflater17.finished();
        int int39 = inflater17.getAdler();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        inflater40.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater47.setInput(byteArray57);
        inflater40.setInput(byteArray57);
        int int60 = inflater17.inflate(byteArray57);
        inflater8.setInput(byteArray57, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray57, (int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsInput();
        int int24 = inflater0.getRemaining();
        boolean boolean25 = inflater0.needsInput();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        int int6 = inflater0.getTotalIn();
        boolean boolean7 = inflater0.finished();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        inflater0.reset();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        long long10 = inflater6.getBytesRead();
        boolean boolean11 = inflater6.needsDictionary();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        int int15 = inflater12.inflate(byteArray14);
        long long16 = inflater12.getBytesWritten();
        inflater12.reset();
        long long18 = inflater12.getBytesWritten();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.needsDictionary();
        boolean boolean23 = inflater19.needsInput();
        int int24 = inflater19.getRemaining();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.finished();
        byte[] byteArray35 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater25.setInput(byteArray35);
        int int37 = inflater19.inflate(byteArray35);
        inflater12.setInput(byteArray35);
        inflater6.setInput(byteArray35);
        int int40 = inflater0.inflate(byteArray35);
        inflater0.end();
        inflater0.end();
        boolean boolean43 = inflater0.needsInput();
        inflater0.end();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        boolean boolean8 = inflater0.needsInput();
        boolean boolean9 = inflater0.finished();
        inflater0.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        int int15 = inflater11.getAdler();
        int int16 = inflater11.getAdler();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.needsDictionary();
        int int20 = inflater18.getTotalOut();
        long long21 = inflater18.getBytesWritten();
        boolean boolean22 = inflater18.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        int int27 = inflater23.getTotalIn();
        long long28 = inflater23.getBytesWritten();
        int int29 = inflater23.getTotalIn();
        boolean boolean30 = inflater23.needsDictionary();
        int int31 = inflater23.getAdler();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        inflater32.end();
        boolean boolean36 = inflater32.needsInput();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        boolean boolean40 = inflater37.needsDictionary();
        long long41 = inflater37.getBytesRead();
        boolean boolean42 = inflater37.needsInput();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        long long47 = inflater43.getBytesWritten();
        inflater43.reset();
        long long49 = inflater43.getBytesWritten();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.needsDictionary();
        boolean boolean54 = inflater50.needsInput();
        int int55 = inflater50.getRemaining();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.finished();
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater56.setInput(byteArray66);
        int int68 = inflater50.inflate(byteArray66);
        inflater43.setInput(byteArray66);
        int int70 = inflater37.inflate(byteArray66);
        inflater32.setInput(byteArray66);
        int int72 = inflater23.inflate(byteArray66);
        inflater18.setInput(byteArray66);
        inflater11.setInput(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        int int5 = inflater1.getTotalIn();
        int int6 = inflater1.getRemaining();
        long long7 = inflater1.getBytesRead();
        int int8 = inflater1.getTotalIn();
        int int9 = inflater1.getAdler();
        java.lang.Class<?> wildcardClass10 = inflater1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        java.util.zip.Inflater inflater4 = new java.util.zip.Inflater();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        int int7 = inflater4.inflate(byteArray6);
        int int8 = inflater1.inflate(byteArray6);
        long long9 = inflater1.getBytesWritten();
        inflater1.end();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        int int15 = inflater11.getTotalIn();
        int int16 = inflater11.getTotalOut();
        boolean boolean17 = inflater11.needsInput();
        int int18 = inflater11.getTotalOut();
        long long19 = inflater11.getBytesRead();
        boolean boolean20 = inflater11.needsDictionary();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.needsDictionary();
        long long25 = inflater21.getBytesRead();
        long long26 = inflater21.getBytesWritten();
        boolean boolean27 = inflater21.finished();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        boolean boolean29 = inflater28.finished();
        int int30 = inflater28.getRemaining();
        boolean boolean31 = inflater28.needsDictionary();
        boolean boolean32 = inflater28.needsInput();
        int int33 = inflater28.getRemaining();
        inflater28.reset();
        boolean boolean35 = inflater28.needsDictionary();
        int int36 = inflater28.getTotalOut();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        boolean boolean41 = inflater37.finished();
        inflater37.end();
        inflater37.end();
        boolean boolean44 = inflater37.needsInput();
        java.util.zip.Inflater inflater45 = new java.util.zip.Inflater();
        boolean boolean46 = inflater45.finished();
        int int47 = inflater45.getRemaining();
        boolean boolean48 = inflater45.needsDictionary();
        boolean boolean49 = inflater45.needsInput();
        int int50 = inflater45.getRemaining();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.finished();
        byte[] byteArray61 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater51.setInput(byteArray61);
        int int63 = inflater45.inflate(byteArray61);
        boolean boolean64 = inflater45.finished();
        int int65 = inflater45.getAdler();
        boolean boolean66 = inflater45.finished();
        int int67 = inflater45.getAdler();
        boolean boolean68 = inflater45.needsInput();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        byte[] byteArray71 = new byte[] { (byte) 1 };
        int int72 = inflater69.inflate(byteArray71);
        int int73 = inflater69.getTotalIn();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        byte[] byteArray76 = new byte[] { (byte) 1 };
        int int77 = inflater74.inflate(byteArray76);
        byte[] byteArray82 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int83 = inflater74.inflate(byteArray82);
        int int84 = inflater69.inflate(byteArray82);
        int int85 = inflater45.inflate(byteArray82);
        inflater37.setInput(byteArray82, (int) (byte) 0, (int) (short) 1);
        int int89 = inflater28.inflate(byteArray82);
        inflater21.setInput(byteArray82, (int) (byte) 0, 1);
        int int93 = inflater11.inflate(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            inflater1.setInput(byteArray82, 2, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.finished();
        byte[] byteArray21 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater11.setInput(byteArray21);
        int int23 = inflater5.inflate(byteArray21);
        boolean boolean24 = inflater5.finished();
        int int25 = inflater5.getAdler();
        boolean boolean26 = inflater5.finished();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsDictionary();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        long long37 = inflater33.getBytesWritten();
        inflater33.reset();
        long long39 = inflater33.getBytesWritten();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        boolean boolean43 = inflater40.needsDictionary();
        boolean boolean44 = inflater40.needsInput();
        int int45 = inflater40.getRemaining();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        boolean boolean47 = inflater46.finished();
        int int48 = inflater46.getRemaining();
        boolean boolean49 = inflater46.finished();
        byte[] byteArray56 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater46.setInput(byteArray56);
        int int58 = inflater40.inflate(byteArray56);
        inflater33.setInput(byteArray56);
        inflater27.setInput(byteArray56);
        inflater5.setInput(byteArray56);
        inflater0.setInput(byteArray56);
        boolean boolean63 = inflater0.needsInput();
        int int64 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass65 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalOut();
        int int10 = inflater0.getRemaining();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.needsDictionary();
        int int13 = inflater11.getTotalOut();
        int int14 = inflater11.getTotalOut();
        int int15 = inflater11.getAdler();
        boolean boolean16 = inflater11.needsDictionary();
        int int17 = inflater11.getTotalOut();
        int int18 = inflater11.getTotalOut();
        boolean boolean19 = inflater11.needsInput();
        int int20 = inflater11.getRemaining();
        int int21 = inflater11.getAdler();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        boolean boolean23 = inflater22.finished();
        int int24 = inflater22.getRemaining();
        boolean boolean25 = inflater22.finished();
        byte[] byteArray32 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater22.setInput(byteArray32);
        inflater22.end();
        int int35 = inflater22.getRemaining();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        int int40 = inflater36.getAdler();
        java.util.zip.Inflater inflater41 = new java.util.zip.Inflater();
        boolean boolean42 = inflater41.finished();
        int int43 = inflater41.getRemaining();
        inflater41.end();
        boolean boolean45 = inflater41.needsInput();
        java.util.zip.Inflater inflater46 = new java.util.zip.Inflater();
        byte[] byteArray48 = new byte[] { (byte) 1 };
        int int49 = inflater46.inflate(byteArray48);
        inflater41.setInput(byteArray48);
        int int51 = inflater36.inflate(byteArray48);
        inflater22.setInput(byteArray48);
        int int53 = inflater11.inflate(byteArray48);
        int int54 = inflater0.inflate(byteArray48);
        java.lang.Class<?> wildcardClass55 = byteArray48.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getRemaining();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        long long51 = inflater47.getBytesWritten();
        inflater47.reset();
        long long53 = inflater47.getBytesWritten();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        boolean boolean55 = inflater54.finished();
        int int56 = inflater54.getRemaining();
        boolean boolean57 = inflater54.needsDictionary();
        boolean boolean58 = inflater54.needsInput();
        int int59 = inflater54.getRemaining();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        int int72 = inflater54.inflate(byteArray70);
        inflater47.setInput(byteArray70);
        inflater42.setInput(byteArray70);
        int int75 = inflater0.inflate(byteArray70);
        int int76 = inflater0.getTotalIn();
        boolean boolean77 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.needsInput();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        long long10 = inflater6.getBytesWritten();
        inflater6.reset();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        boolean boolean20 = inflater19.finished();
        int int21 = inflater19.getRemaining();
        boolean boolean22 = inflater19.finished();
        byte[] byteArray29 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater19.setInput(byteArray29);
        int int31 = inflater13.inflate(byteArray29);
        inflater6.setInput(byteArray29);
        int int33 = inflater0.inflate(byteArray29);
        boolean boolean34 = inflater0.needsDictionary();
        int int35 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getRemaining();
        boolean boolean21 = inflater0.finished();
        boolean boolean22 = inflater0.needsInput();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.finished();
        int int25 = inflater23.getRemaining();
        boolean boolean26 = inflater23.finished();
        int int27 = inflater23.getAdler();
        int int28 = inflater23.getAdler();
        long long29 = inflater23.getBytesWritten();
        long long30 = inflater23.getBytesRead();
        boolean boolean31 = inflater23.finished();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        boolean boolean33 = inflater32.finished();
        int int34 = inflater32.getRemaining();
        boolean boolean35 = inflater32.finished();
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater32.setInput(byteArray42);
        int int44 = inflater23.inflate(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray42, 2, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        boolean boolean20 = inflater0.finished();
        boolean boolean21 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalOut();
        long long25 = inflater0.getBytesRead();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        long long5 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        inflater6.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.needsDictionary();
        boolean boolean17 = inflater13.needsInput();
        int int18 = inflater13.getRemaining();
        inflater13.reset();
        java.util.zip.Inflater inflater20 = new java.util.zip.Inflater();
        boolean boolean21 = inflater20.finished();
        int int22 = inflater20.getRemaining();
        boolean boolean23 = inflater20.finished();
        byte[] byteArray30 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater20.setInput(byteArray30);
        inflater13.setInput(byteArray30);
        int int35 = inflater6.inflate(byteArray30, 0, (int) (byte) 0);
        int int36 = inflater6.getTotalOut();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        int int39 = inflater37.getRemaining();
        java.util.zip.Inflater inflater40 = new java.util.zip.Inflater();
        boolean boolean41 = inflater40.finished();
        int int42 = inflater40.getRemaining();
        int int43 = inflater40.getTotalOut();
        inflater40.reset();
        boolean boolean45 = inflater40.needsInput();
        int int46 = inflater40.getRemaining();
        boolean boolean47 = inflater40.finished();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        int int51 = inflater48.inflate(byteArray50);
        boolean boolean52 = inflater48.finished();
        inflater48.end();
        inflater48.end();
        boolean boolean55 = inflater48.needsDictionary();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsInput();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater();
        boolean boolean61 = inflater60.finished();
        int int62 = inflater60.getRemaining();
        boolean boolean63 = inflater60.finished();
        byte[] byteArray70 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater60.setInput(byteArray70);
        inflater56.setInput(byteArray70);
        inflater48.setInput(byteArray70);
        int int76 = inflater40.inflate(byteArray70, 6, (int) (short) 0);
        int int77 = inflater37.inflate(byteArray70);
        int int78 = inflater6.inflate(byteArray70);
        int int79 = inflater0.inflate(byteArray70);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        int int4 = inflater1.getTotalIn();
        int int5 = inflater1.getRemaining();
        inflater1.reset();
        long long7 = inflater1.getBytesRead();
        boolean boolean8 = inflater1.finished();
        int int9 = inflater1.getTotalOut();
        long long10 = inflater1.getBytesWritten();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalIn();
        int int6 = inflater0.getTotalOut();
        boolean boolean7 = inflater0.needsInput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        inflater6.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater6.setInput(byteArray34);
        inflater0.setInput(byteArray34, (int) (byte) 0, 1);
        int int42 = inflater0.getRemaining();
        int int43 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater44 = new java.util.zip.Inflater();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        int int47 = inflater44.inflate(byteArray46);
        int int48 = inflater44.getAdler();
        boolean boolean49 = inflater44.finished();
        long long50 = inflater44.getBytesWritten();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        boolean boolean53 = inflater51.needsInput();
        boolean boolean54 = inflater51.needsInput();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.needsDictionary();
        long long59 = inflater55.getBytesRead();
        boolean boolean60 = inflater55.needsDictionary();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        long long65 = inflater61.getBytesWritten();
        inflater61.reset();
        long long67 = inflater61.getBytesWritten();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        boolean boolean69 = inflater68.finished();
        int int70 = inflater68.getRemaining();
        boolean boolean71 = inflater68.needsDictionary();
        boolean boolean72 = inflater68.needsInput();
        int int73 = inflater68.getRemaining();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        boolean boolean77 = inflater74.finished();
        byte[] byteArray84 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater74.setInput(byteArray84);
        int int86 = inflater68.inflate(byteArray84);
        inflater61.setInput(byteArray84);
        inflater55.setInput(byteArray84);
        int int89 = inflater51.inflate(byteArray84);
        int int90 = inflater44.inflate(byteArray84);
        inflater0.setInput(byteArray84, (int) (byte) 1, 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        boolean boolean23 = inflater0.needsInput();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        int int27 = inflater24.inflate(byteArray26);
        int int28 = inflater24.getTotalIn();
        java.util.zip.Inflater inflater29 = new java.util.zip.Inflater();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        int int32 = inflater29.inflate(byteArray31);
        byte[] byteArray37 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int38 = inflater29.inflate(byteArray37);
        int int39 = inflater24.inflate(byteArray37);
        int int40 = inflater0.inflate(byteArray37);
        long long41 = inflater0.getBytesRead();
        long long42 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        inflater0.end();
        inflater0.end();
        boolean boolean9 = inflater0.needsInput();
        boolean boolean10 = inflater0.needsDictionary();
        boolean boolean11 = inflater0.needsDictionary();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        inflater0.reset();
        boolean boolean25 = inflater0.finished();
        inflater0.reset();
        int int27 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        inflater0.reset();
        inflater0.reset();
        byte[] byteArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        int int6 = inflater0.getAdler();
        int int7 = inflater0.getTotalOut();
        boolean boolean8 = inflater0.finished();
        int int9 = inflater0.getAdler();
        java.lang.Class<?> wildcardClass10 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        int int24 = inflater6.inflate(byteArray22);
        boolean boolean25 = inflater6.finished();
        int int26 = inflater6.getAdler();
        boolean boolean27 = inflater6.finished();
        boolean boolean28 = inflater6.finished();
        long long29 = inflater6.getBytesWritten();
        boolean boolean30 = inflater6.finished();
        int int31 = inflater6.getTotalIn();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater(true);
        int int34 = inflater33.getRemaining();
        long long35 = inflater33.getBytesRead();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        int int40 = inflater33.inflate(byteArray38);
        int int41 = inflater33.getAdler();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        int int46 = inflater42.getTotalIn();
        int int47 = inflater42.getTotalIn();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.finished();
        long long52 = inflater48.getBytesRead();
        boolean boolean53 = inflater48.finished();
        long long54 = inflater48.getBytesRead();
        boolean boolean55 = inflater48.needsDictionary();
        boolean boolean56 = inflater48.needsDictionary();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        boolean boolean58 = inflater57.needsDictionary();
        int int59 = inflater57.getTotalOut();
        int int60 = inflater57.getTotalOut();
        boolean boolean61 = inflater57.needsInput();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        inflater62.reset();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        byte[] byteArray69 = new byte[] { (byte) 1 };
        int int70 = inflater67.inflate(byteArray69);
        int int71 = inflater67.getTotalIn();
        java.util.zip.Inflater inflater72 = new java.util.zip.Inflater();
        byte[] byteArray74 = new byte[] { (byte) 1 };
        int int75 = inflater72.inflate(byteArray74);
        byte[] byteArray80 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int81 = inflater72.inflate(byteArray80);
        int int82 = inflater67.inflate(byteArray80);
        inflater62.setInput(byteArray80);
        inflater57.setInput(byteArray80);
        int int85 = inflater48.inflate(byteArray80);
        inflater42.setInput(byteArray80);
        inflater33.setDictionary(byteArray80);
        int int88 = inflater6.inflate(byteArray80);
        inflater0.setInput(byteArray80);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        inflater0.reset();
        int int26 = inflater0.getAdler();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        inflater25.reset();
        long long30 = inflater25.getBytesWritten();
        boolean boolean31 = inflater25.needsInput();
        boolean boolean32 = inflater25.finished();
        int int33 = inflater25.getTotalOut();
        boolean boolean34 = inflater25.needsInput();
        boolean boolean35 = inflater25.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        int int41 = inflater36.getRemaining();
        inflater36.reset();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        inflater43.reset();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.finished();
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater50.setInput(byteArray60);
        inflater43.setInput(byteArray60);
        int int65 = inflater36.inflate(byteArray60, 0, (int) (byte) 0);
        inflater25.setInput(byteArray60);
        inflater0.setInput(byteArray60);
        long long68 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.needsDictionary();
        boolean boolean11 = inflater7.needsInput();
        int int12 = inflater7.getRemaining();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        int int25 = inflater7.inflate(byteArray23);
        inflater0.setInput(byteArray23);
        inflater0.reset();
        long long28 = inflater0.getBytesWritten();
        int int29 = inflater0.getAdler();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.needsDictionary();
        boolean boolean10 = inflater6.needsInput();
        int int11 = inflater6.getRemaining();
        inflater6.reset();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        boolean boolean16 = inflater13.finished();
        byte[] byteArray23 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater13.setInput(byteArray23);
        inflater6.setInput(byteArray23);
        int int26 = inflater6.getRemaining();
        boolean boolean27 = inflater6.finished();
        inflater6.reset();
        int int29 = inflater6.getAdler();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        byte[] byteArray32 = new byte[] { (byte) 1 };
        int int33 = inflater30.inflate(byteArray32);
        int int34 = inflater30.getTotalIn();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        int int38 = inflater35.inflate(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int44 = inflater35.inflate(byteArray43);
        int int45 = inflater30.inflate(byteArray43);
        int int46 = inflater30.getTotalOut();
        int int47 = inflater30.getTotalOut();
        long long48 = inflater30.getBytesRead();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.finished();
        long long53 = inflater49.getBytesRead();
        boolean boolean54 = inflater49.finished();
        long long55 = inflater49.getBytesRead();
        boolean boolean56 = inflater49.needsDictionary();
        boolean boolean57 = inflater49.needsDictionary();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.needsDictionary();
        int int60 = inflater58.getTotalOut();
        int int61 = inflater58.getTotalOut();
        boolean boolean62 = inflater58.needsInput();
        java.util.zip.Inflater inflater63 = new java.util.zip.Inflater();
        byte[] byteArray65 = new byte[] { (byte) 1 };
        int int66 = inflater63.inflate(byteArray65);
        inflater63.reset();
        java.util.zip.Inflater inflater68 = new java.util.zip.Inflater();
        byte[] byteArray70 = new byte[] { (byte) 1 };
        int int71 = inflater68.inflate(byteArray70);
        int int72 = inflater68.getTotalIn();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        byte[] byteArray75 = new byte[] { (byte) 1 };
        int int76 = inflater73.inflate(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int82 = inflater73.inflate(byteArray81);
        int int83 = inflater68.inflate(byteArray81);
        inflater63.setInput(byteArray81);
        inflater58.setInput(byteArray81);
        int int86 = inflater49.inflate(byteArray81);
        inflater30.setInput(byteArray81);
        int int88 = inflater6.inflate(byteArray81);
        inflater0.setInput(byteArray81);
        long long90 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(true);
        int int2 = inflater1.getRemaining();
        long long3 = inflater1.getBytesRead();
        boolean boolean4 = inflater1.needsInput();
        inflater1.reset();
        long long6 = inflater1.getBytesRead();
        int int7 = inflater1.getTotalOut();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        boolean boolean13 = inflater8.needsDictionary();
        boolean boolean14 = inflater8.needsDictionary();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        boolean boolean16 = inflater15.finished();
        int int17 = inflater15.getRemaining();
        boolean boolean18 = inflater15.finished();
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater15.setInput(byteArray25);
        int int27 = inflater8.inflate(byteArray25);
        int int28 = inflater8.getTotalOut();
        int int29 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater(false);
        int int32 = inflater31.getAdler();
        boolean boolean33 = inflater31.needsDictionary();
        int int34 = inflater31.getTotalOut();
        boolean boolean35 = inflater31.finished();
        boolean boolean36 = inflater31.needsDictionary();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        boolean boolean38 = inflater37.finished();
        boolean boolean39 = inflater37.needsInput();
        boolean boolean40 = inflater37.needsInput();
        inflater37.end();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        long long46 = inflater42.getBytesRead();
        inflater42.reset();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        boolean boolean52 = inflater48.needsInput();
        boolean boolean53 = inflater48.needsDictionary();
        boolean boolean54 = inflater48.needsDictionary();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        int int67 = inflater48.inflate(byteArray65);
        int int68 = inflater42.inflate(byteArray65);
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.finished();
        int int73 = inflater69.getAdler();
        java.util.zip.Inflater inflater74 = new java.util.zip.Inflater();
        boolean boolean75 = inflater74.finished();
        int int76 = inflater74.getRemaining();
        inflater74.end();
        boolean boolean78 = inflater74.needsInput();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        byte[] byteArray81 = new byte[] { (byte) 1 };
        int int82 = inflater79.inflate(byteArray81);
        inflater74.setInput(byteArray81);
        int int84 = inflater69.inflate(byteArray81);
        inflater42.setInput(byteArray81);
        inflater37.setInput(byteArray81);
        int int87 = inflater31.inflate(byteArray81);
        inflater8.setInput(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = inflater1.inflate(byteArray81, (int) (short) 100, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.finished();
        int int7 = inflater0.getTotalIn();
        int int8 = inflater0.getRemaining();
        int int9 = inflater0.getAdler();
        int int10 = inflater0.getAdler();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        int int14 = inflater11.getTotalOut();
        inflater11.reset();
        boolean boolean16 = inflater11.needsInput();
        int int17 = inflater11.getRemaining();
        boolean boolean18 = inflater11.finished();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        boolean boolean23 = inflater19.finished();
        inflater19.end();
        inflater19.end();
        boolean boolean26 = inflater19.needsDictionary();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsInput();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        inflater27.setInput(byteArray41);
        inflater19.setInput(byteArray41);
        int int47 = inflater11.inflate(byteArray41, 6, (int) (short) 0);
        int int48 = inflater0.inflate(byteArray41);
        boolean boolean49 = inflater0.needsDictionary();
        inflater0.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1 };
        inflater0.setInput(byteArray6);
        boolean boolean8 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        boolean boolean22 = inflater0.finished();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.needsInput();
        long long25 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsDictionary();
        long long6 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        int int13 = inflater9.getTotalIn();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        inflater14.end();
        boolean boolean18 = inflater14.needsInput();
        java.util.zip.Inflater inflater19 = new java.util.zip.Inflater();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        int int22 = inflater19.inflate(byteArray21);
        inflater14.setInput(byteArray21);
        inflater9.setInput(byteArray21);
        inflater7.setInput(byteArray21);
        int int26 = inflater0.inflate(byteArray21);
        long long27 = inflater0.getBytesWritten();
        boolean boolean28 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getRemaining();
        java.lang.Class<?> wildcardClass23 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        inflater0.end();
        int int7 = inflater0.getRemaining();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        int int40 = inflater0.getTotalOut();
        int int41 = inflater0.getTotalIn();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        inflater42.reset();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        int int50 = inflater47.inflate(byteArray49);
        int int51 = inflater47.getTotalIn();
        java.util.zip.Inflater inflater52 = new java.util.zip.Inflater();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        int int55 = inflater52.inflate(byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int61 = inflater52.inflate(byteArray60);
        int int62 = inflater47.inflate(byteArray60);
        inflater42.setInput(byteArray60);
        int int64 = inflater0.inflate(byteArray60);
        int int65 = inflater0.getRemaining();
        inflater0.end();
        boolean boolean67 = inflater0.finished();
        boolean boolean68 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        boolean boolean6 = inflater0.needsDictionary();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        int int19 = inflater0.inflate(byteArray17);
        int int20 = inflater0.getTotalOut();
        int int21 = inflater0.getRemaining();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        long long6 = inflater0.getBytesRead();
        long long7 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.finished();
        int int12 = inflater8.getAdler();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        int int15 = inflater13.getRemaining();
        inflater13.end();
        boolean boolean17 = inflater13.needsInput();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        byte[] byteArray20 = new byte[] { (byte) 1 };
        int int21 = inflater18.inflate(byteArray20);
        inflater13.setInput(byteArray20);
        int int23 = inflater8.inflate(byteArray20);
        int int24 = inflater8.getTotalOut();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        boolean boolean29 = inflater25.finished();
        inflater25.end();
        inflater25.end();
        boolean boolean32 = inflater25.needsInput();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.needsDictionary();
        boolean boolean37 = inflater33.needsInput();
        int int38 = inflater33.getRemaining();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        int int41 = inflater39.getRemaining();
        boolean boolean42 = inflater39.finished();
        byte[] byteArray49 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater39.setInput(byteArray49);
        int int51 = inflater33.inflate(byteArray49);
        boolean boolean52 = inflater33.finished();
        int int53 = inflater33.getAdler();
        boolean boolean54 = inflater33.finished();
        int int55 = inflater33.getAdler();
        boolean boolean56 = inflater33.needsInput();
        java.util.zip.Inflater inflater57 = new java.util.zip.Inflater();
        byte[] byteArray59 = new byte[] { (byte) 1 };
        int int60 = inflater57.inflate(byteArray59);
        int int61 = inflater57.getTotalIn();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        byte[] byteArray64 = new byte[] { (byte) 1 };
        int int65 = inflater62.inflate(byteArray64);
        byte[] byteArray70 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int71 = inflater62.inflate(byteArray70);
        int int72 = inflater57.inflate(byteArray70);
        int int73 = inflater33.inflate(byteArray70);
        inflater25.setInput(byteArray70, (int) (byte) 0, (int) (short) 1);
        inflater8.setInput(byteArray70);
        int int78 = inflater0.inflate(byteArray70);
        long long79 = inflater0.getBytesWritten();
        boolean boolean80 = inflater0.finished();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        boolean boolean4 = inflater0.needsInput();
        long long5 = inflater0.getBytesWritten();
        inflater0.end();
        boolean boolean7 = inflater0.needsInput();
        java.lang.Class<?> wildcardClass8 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getTotalIn();
        boolean boolean3 = inflater1.finished();
        long long4 = inflater1.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        boolean boolean9 = inflater5.needsInput();
        int int10 = inflater5.getRemaining();
        inflater5.reset();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.finished();
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater12.setInput(byteArray22);
        inflater5.setInput(byteArray22);
        int int25 = inflater5.getTotalOut();
        boolean boolean26 = inflater5.needsInput();
        java.util.zip.Inflater inflater27 = new java.util.zip.Inflater();
        boolean boolean28 = inflater27.finished();
        int int29 = inflater27.getRemaining();
        boolean boolean30 = inflater27.needsDictionary();
        long long31 = inflater27.getBytesRead();
        boolean boolean32 = inflater27.needsInput();
        int int33 = inflater27.getTotalOut();
        long long34 = inflater27.getBytesRead();
        java.util.zip.Inflater inflater35 = new java.util.zip.Inflater();
        boolean boolean36 = inflater35.finished();
        int int37 = inflater35.getRemaining();
        boolean boolean38 = inflater35.needsDictionary();
        boolean boolean39 = inflater35.needsInput();
        int int40 = inflater35.getRemaining();
        inflater35.reset();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        boolean boolean43 = inflater42.finished();
        int int44 = inflater42.getRemaining();
        boolean boolean45 = inflater42.finished();
        byte[] byteArray52 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater42.setInput(byteArray52);
        inflater35.setInput(byteArray52);
        int int57 = inflater27.inflate(byteArray52, 1, (int) (short) 1);
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        int int62 = inflater58.getAdler();
        int int63 = inflater58.getAdler();
        int int64 = inflater58.getAdler();
        int int65 = inflater58.getTotalOut();
        inflater58.reset();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.needsDictionary();
        java.util.zip.Inflater inflater69 = new java.util.zip.Inflater();
        boolean boolean70 = inflater69.finished();
        int int71 = inflater69.getRemaining();
        boolean boolean72 = inflater69.needsDictionary();
        boolean boolean73 = inflater69.needsInput();
        int int74 = inflater69.getRemaining();
        inflater69.reset();
        java.util.zip.Inflater inflater76 = new java.util.zip.Inflater();
        boolean boolean77 = inflater76.finished();
        int int78 = inflater76.getRemaining();
        boolean boolean79 = inflater76.finished();
        byte[] byteArray86 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater76.setInput(byteArray86);
        inflater69.setInput(byteArray86);
        inflater67.setInput(byteArray86);
        inflater58.setInput(byteArray86, (int) (byte) 0, 0);
        int int93 = inflater27.inflate(byteArray86);
        inflater5.setInput(byteArray86);
        inflater1.setInput(byteArray86);
        boolean boolean96 = inflater1.finished();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        boolean boolean4 = inflater0.finished();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        int int9 = inflater6.inflate(byteArray8);
        int int10 = inflater6.getAdler();
        boolean boolean11 = inflater6.finished();
        long long12 = inflater6.getBytesWritten();
        java.util.zip.Inflater inflater13 = new java.util.zip.Inflater();
        boolean boolean14 = inflater13.finished();
        boolean boolean15 = inflater13.needsInput();
        boolean boolean16 = inflater13.needsInput();
        java.util.zip.Inflater inflater17 = new java.util.zip.Inflater();
        boolean boolean18 = inflater17.finished();
        int int19 = inflater17.getRemaining();
        boolean boolean20 = inflater17.needsDictionary();
        long long21 = inflater17.getBytesRead();
        boolean boolean22 = inflater17.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        int int26 = inflater23.inflate(byteArray25);
        long long27 = inflater23.getBytesWritten();
        inflater23.reset();
        long long29 = inflater23.getBytesWritten();
        java.util.zip.Inflater inflater30 = new java.util.zip.Inflater();
        boolean boolean31 = inflater30.finished();
        int int32 = inflater30.getRemaining();
        boolean boolean33 = inflater30.needsDictionary();
        boolean boolean34 = inflater30.needsInput();
        int int35 = inflater30.getRemaining();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.finished();
        byte[] byteArray46 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater36.setInput(byteArray46);
        int int48 = inflater30.inflate(byteArray46);
        inflater23.setInput(byteArray46);
        inflater17.setInput(byteArray46);
        int int51 = inflater13.inflate(byteArray46);
        int int52 = inflater6.inflate(byteArray46);
        inflater0.setInput(byteArray46);
        long long54 = inflater0.getBytesRead();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsDictionary();
        int int5 = inflater0.getRemaining();
        int int6 = inflater0.getTotalOut();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        long long6 = inflater0.getBytesWritten();
        long long7 = inflater0.getBytesRead();
        boolean boolean8 = inflater0.finished();
        int int9 = inflater0.getTotalIn();
        boolean boolean10 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getAdler();
        int int5 = inflater0.getAdler();
        int int6 = inflater0.getRemaining();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.finished();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getTotalIn();
        int int5 = inflater0.getTotalOut();
        boolean boolean6 = inflater0.needsInput();
        long long7 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        long long4 = inflater0.getBytesWritten();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsDictionary();
        long long9 = inflater5.getBytesRead();
        boolean boolean10 = inflater5.needsDictionary();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        int int14 = inflater11.inflate(byteArray13);
        long long15 = inflater11.getBytesWritten();
        inflater11.reset();
        long long17 = inflater11.getBytesWritten();
        java.util.zip.Inflater inflater18 = new java.util.zip.Inflater();
        boolean boolean19 = inflater18.finished();
        int int20 = inflater18.getRemaining();
        boolean boolean21 = inflater18.needsDictionary();
        boolean boolean22 = inflater18.needsInput();
        int int23 = inflater18.getRemaining();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater();
        boolean boolean25 = inflater24.finished();
        int int26 = inflater24.getRemaining();
        boolean boolean27 = inflater24.finished();
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater24.setInput(byteArray34);
        int int36 = inflater18.inflate(byteArray34);
        inflater11.setInput(byteArray34);
        inflater5.setInput(byteArray34);
        int int39 = inflater0.inflate(byteArray34);
        long long40 = inflater0.getBytesRead();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        boolean boolean19 = inflater0.finished();
        int int20 = inflater0.getAdler();
        boolean boolean21 = inflater0.finished();
        int int22 = inflater0.getAdler();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        boolean boolean26 = inflater25.finished();
        int int27 = inflater25.getRemaining();
        boolean boolean28 = inflater25.needsDictionary();
        boolean boolean29 = inflater25.needsInput();
        int int30 = inflater25.getRemaining();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        boolean boolean32 = inflater31.finished();
        int int33 = inflater31.getRemaining();
        boolean boolean34 = inflater31.finished();
        byte[] byteArray41 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater31.setInput(byteArray41);
        int int43 = inflater25.inflate(byteArray41);
        boolean boolean44 = inflater25.finished();
        int int45 = inflater25.getAdler();
        boolean boolean46 = inflater25.finished();
        int int47 = inflater25.getAdler();
        boolean boolean48 = inflater25.needsInput();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        int int67 = inflater49.inflate(byteArray65);
        boolean boolean68 = inflater49.finished();
        int int69 = inflater49.getAdler();
        boolean boolean70 = inflater49.finished();
        int int71 = inflater49.getAdler();
        boolean boolean72 = inflater49.needsInput();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        byte[] byteArray75 = new byte[] { (byte) 1 };
        int int76 = inflater73.inflate(byteArray75);
        int int77 = inflater73.getTotalIn();
        java.util.zip.Inflater inflater78 = new java.util.zip.Inflater();
        byte[] byteArray80 = new byte[] { (byte) 1 };
        int int81 = inflater78.inflate(byteArray80);
        byte[] byteArray86 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int87 = inflater78.inflate(byteArray86);
        int int88 = inflater73.inflate(byteArray86);
        int int89 = inflater49.inflate(byteArray86);
        int int90 = inflater25.inflate(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        int int22 = inflater0.getRemaining();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.finished();
        inflater0.reset();
        boolean boolean26 = inflater0.finished();
        boolean boolean27 = inflater0.needsDictionary();
        int int28 = inflater0.getAdler();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        java.util.zip.Inflater inflater6 = new java.util.zip.Inflater();
        boolean boolean7 = inflater6.finished();
        int int8 = inflater6.getRemaining();
        boolean boolean9 = inflater6.finished();
        byte[] byteArray16 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater6.setInput(byteArray16);
        int int18 = inflater0.inflate(byteArray16);
        long long19 = inflater0.getBytesRead();
        int int20 = inflater0.getAdler();
        int int21 = inflater0.getTotalIn();
        long long22 = inflater0.getBytesWritten();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        int int3 = inflater0.getTotalOut();
        int int4 = inflater0.getTotalIn();
        boolean boolean5 = inflater0.needsInput();
        boolean boolean6 = inflater0.finished();
        java.lang.Class<?> wildcardClass7 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getTotalOut();
        long long6 = inflater0.getBytesWritten();
        boolean boolean7 = inflater0.finished();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        byte[] byteArray10 = new byte[] { (byte) 1 };
        int int11 = inflater8.inflate(byteArray10);
        int int12 = inflater8.getTotalIn();
        int int13 = inflater8.getTotalIn();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.finished();
        long long18 = inflater14.getBytesRead();
        boolean boolean19 = inflater14.finished();
        long long20 = inflater14.getBytesRead();
        boolean boolean21 = inflater14.needsDictionary();
        boolean boolean22 = inflater14.needsDictionary();
        java.util.zip.Inflater inflater23 = new java.util.zip.Inflater();
        boolean boolean24 = inflater23.needsDictionary();
        int int25 = inflater23.getTotalOut();
        int int26 = inflater23.getTotalOut();
        boolean boolean27 = inflater23.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        int int31 = inflater28.inflate(byteArray30);
        inflater28.reset();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        byte[] byteArray35 = new byte[] { (byte) 1 };
        int int36 = inflater33.inflate(byteArray35);
        int int37 = inflater33.getTotalIn();
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int47 = inflater38.inflate(byteArray46);
        int int48 = inflater33.inflate(byteArray46);
        inflater28.setInput(byteArray46);
        inflater23.setInput(byteArray46);
        int int51 = inflater14.inflate(byteArray46);
        inflater8.setInput(byteArray46);
        inflater8.end();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        inflater54.end();
        int int56 = inflater54.getRemaining();
        inflater54.end();
        int int58 = inflater54.getRemaining();
        java.util.zip.Inflater inflater60 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        inflater61.reset();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        int int69 = inflater66.inflate(byteArray68);
        long long70 = inflater66.getBytesWritten();
        inflater66.reset();
        long long72 = inflater66.getBytesWritten();
        java.util.zip.Inflater inflater73 = new java.util.zip.Inflater();
        boolean boolean74 = inflater73.finished();
        int int75 = inflater73.getRemaining();
        boolean boolean76 = inflater73.needsDictionary();
        boolean boolean77 = inflater73.needsInput();
        int int78 = inflater73.getRemaining();
        java.util.zip.Inflater inflater79 = new java.util.zip.Inflater();
        boolean boolean80 = inflater79.finished();
        int int81 = inflater79.getRemaining();
        boolean boolean82 = inflater79.finished();
        byte[] byteArray89 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater79.setInput(byteArray89);
        int int91 = inflater73.inflate(byteArray89);
        inflater66.setInput(byteArray89);
        inflater61.setInput(byteArray89);
        inflater60.setDictionary(byteArray89);
        inflater54.setInput(byteArray89);
        inflater8.setInput(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray89, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
            /* And violated CMM Protocol confirms this too: 
			"Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined. "*/
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        long long5 = inflater0.getBytesWritten();
        boolean boolean6 = inflater0.needsInput();
        int int7 = inflater0.getRemaining();
        boolean boolean8 = inflater0.needsInput();
        boolean boolean9 = inflater0.needsDictionary();
        int int10 = inflater0.getAdler();
        inflater0.end();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        inflater0.reset();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        int int23 = inflater0.getRemaining();
        int int24 = inflater0.getAdler();
        boolean boolean25 = inflater0.needsDictionary();
        java.lang.Class<?> wildcardClass26 = inflater0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalOut();
        int int10 = inflater0.getTotalOut();
        boolean boolean11 = inflater0.needsInput();
        java.util.zip.Inflater inflater12 = new java.util.zip.Inflater();
        boolean boolean13 = inflater12.finished();
        int int14 = inflater12.getRemaining();
        boolean boolean15 = inflater12.needsDictionary();
        boolean boolean16 = inflater12.needsInput();
        boolean boolean17 = inflater12.needsDictionary();
        boolean boolean18 = inflater12.finished();
        int int19 = inflater12.getTotalIn();
        int int20 = inflater12.getRemaining();
        long long21 = inflater12.getBytesWritten();
        java.util.zip.Inflater inflater22 = new java.util.zip.Inflater();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        int int25 = inflater22.inflate(byteArray24);
        int int26 = inflater22.getTotalIn();
        long long27 = inflater22.getBytesWritten();
        int int28 = inflater22.getTotalIn();
        int int29 = inflater22.getTotalOut();
        int int30 = inflater22.getTotalOut();
        boolean boolean31 = inflater22.needsDictionary();
        int int32 = inflater22.getTotalOut();
        long long33 = inflater22.getBytesRead();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.finished();
        int int36 = inflater34.getRemaining();
        boolean boolean37 = inflater34.finished();
        int int38 = inflater34.getAdler();
        int int39 = inflater34.getAdler();
        long long40 = inflater34.getBytesWritten();
        long long41 = inflater34.getBytesRead();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        int int46 = inflater42.getAdler();
        java.util.zip.Inflater inflater47 = new java.util.zip.Inflater();
        boolean boolean48 = inflater47.finished();
        int int49 = inflater47.getRemaining();
        boolean boolean50 = inflater47.finished();
        long long51 = inflater47.getBytesRead();
        boolean boolean52 = inflater47.finished();
        long long53 = inflater47.getBytesRead();
        boolean boolean54 = inflater47.needsDictionary();
        boolean boolean55 = inflater47.needsDictionary();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.needsDictionary();
        int int58 = inflater56.getTotalOut();
        int int59 = inflater56.getTotalOut();
        boolean boolean60 = inflater56.needsInput();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        byte[] byteArray63 = new byte[] { (byte) 1 };
        int int64 = inflater61.inflate(byteArray63);
        inflater61.reset();
        java.util.zip.Inflater inflater66 = new java.util.zip.Inflater();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        int int69 = inflater66.inflate(byteArray68);
        int int70 = inflater66.getTotalIn();
        java.util.zip.Inflater inflater71 = new java.util.zip.Inflater();
        byte[] byteArray73 = new byte[] { (byte) 1 };
        int int74 = inflater71.inflate(byteArray73);
        byte[] byteArray79 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int80 = inflater71.inflate(byteArray79);
        int int81 = inflater66.inflate(byteArray79);
        inflater61.setInput(byteArray79);
        inflater56.setInput(byteArray79);
        int int84 = inflater47.inflate(byteArray79);
        inflater42.setInput(byteArray79);
        int int86 = inflater34.inflate(byteArray79);
        inflater22.setInput(byteArray79);
        int int88 = inflater12.inflate(byteArray79);
        inflater0.setInput(byteArray79, (int) (short) 1, (int) (short) 1);
        boolean boolean92 = inflater0.needsInput();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        int int3 = inflater0.getTotalOut();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) -1 };
        inflater0.setInput(byteArray6);
        inflater0.reset();
        boolean boolean9 = inflater0.finished();
        inflater0.end();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        long long23 = inflater0.getBytesWritten();
        boolean boolean24 = inflater0.finished();
        boolean boolean25 = inflater0.needsInput();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        inflater26.reset();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater33.setInput(byteArray43);
        inflater26.setInput(byteArray43);
        int int46 = inflater26.getTotalOut();
        boolean boolean47 = inflater26.needsDictionary();
        long long48 = inflater26.getBytesWritten();
        int int49 = inflater26.getRemaining();
        int int50 = inflater26.getRemaining();
        java.util.zip.Inflater inflater51 = new java.util.zip.Inflater();
        boolean boolean52 = inflater51.finished();
        int int53 = inflater51.getRemaining();
        boolean boolean54 = inflater51.needsDictionary();
        boolean boolean55 = inflater51.needsInput();
        int int56 = inflater51.getRemaining();
        inflater51.reset();
        java.util.zip.Inflater inflater58 = new java.util.zip.Inflater();
        boolean boolean59 = inflater58.finished();
        int int60 = inflater58.getRemaining();
        boolean boolean61 = inflater58.finished();
        byte[] byteArray68 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater58.setInput(byteArray68);
        inflater51.setInput(byteArray68);
        inflater26.setInput(byteArray68, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        java.util.zip.Inflater inflater1 = new java.util.zip.Inflater(false);
        int int2 = inflater1.getAdler();
        long long3 = inflater1.getBytesWritten();
        inflater1.end();
        boolean boolean5 = inflater1.finished();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater(true);
        int int8 = inflater7.getRemaining();
        long long9 = inflater7.getBytesRead();
        boolean boolean10 = inflater7.needsInput();
        inflater7.reset();
        boolean boolean12 = inflater7.needsDictionary();
        long long13 = inflater7.getBytesWritten();
        java.util.zip.Inflater inflater14 = new java.util.zip.Inflater();
        boolean boolean15 = inflater14.finished();
        int int16 = inflater14.getRemaining();
        boolean boolean17 = inflater14.needsDictionary();
        boolean boolean18 = inflater14.needsInput();
        boolean boolean19 = inflater14.needsDictionary();
        boolean boolean20 = inflater14.needsDictionary();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        boolean boolean22 = inflater21.finished();
        int int23 = inflater21.getRemaining();
        boolean boolean24 = inflater21.finished();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater21.setInput(byteArray31);
        int int33 = inflater14.inflate(byteArray31);
        inflater7.setInput(byteArray31);
        inflater1.setInput(byteArray31);
        boolean boolean36 = inflater1.needsDictionary();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        int int8 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        int int12 = inflater9.inflate(byteArray11);
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int18 = inflater9.inflate(byteArray17);
        boolean boolean19 = inflater9.finished();
        long long20 = inflater9.getBytesRead();
        int int21 = inflater9.getRemaining();
        int int22 = inflater9.getAdler();
        java.util.zip.Inflater inflater24 = new java.util.zip.Inflater(true);
        inflater24.end();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        boolean boolean30 = inflater26.needsInput();
        int int31 = inflater26.getRemaining();
        inflater26.reset();
        java.util.zip.Inflater inflater33 = new java.util.zip.Inflater();
        boolean boolean34 = inflater33.finished();
        int int35 = inflater33.getRemaining();
        boolean boolean36 = inflater33.finished();
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater33.setInput(byteArray43);
        inflater26.setInput(byteArray43);
        inflater24.setInput(byteArray43);
        int int47 = inflater9.inflate(byteArray43);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setDictionary(byteArray43, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsDictionary();
        long long24 = inflater0.getBytesRead();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater(true);
        int int27 = inflater26.getRemaining();
        long long28 = inflater26.getBytesRead();
        int int29 = inflater26.getTotalIn();
        long long30 = inflater26.getBytesWritten();
        boolean boolean31 = inflater26.finished();
        java.util.zip.Inflater inflater32 = new java.util.zip.Inflater();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        int int35 = inflater32.inflate(byteArray34);
        int int36 = inflater32.getAdler();
        boolean boolean37 = inflater32.finished();
        long long38 = inflater32.getBytesWritten();
        java.util.zip.Inflater inflater39 = new java.util.zip.Inflater();
        boolean boolean40 = inflater39.finished();
        boolean boolean41 = inflater39.needsInput();
        boolean boolean42 = inflater39.needsInput();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        long long47 = inflater43.getBytesRead();
        boolean boolean48 = inflater43.needsDictionary();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        byte[] byteArray51 = new byte[] { (byte) 1 };
        int int52 = inflater49.inflate(byteArray51);
        long long53 = inflater49.getBytesWritten();
        inflater49.reset();
        long long55 = inflater49.getBytesWritten();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.needsDictionary();
        boolean boolean60 = inflater56.needsInput();
        int int61 = inflater56.getRemaining();
        java.util.zip.Inflater inflater62 = new java.util.zip.Inflater();
        boolean boolean63 = inflater62.finished();
        int int64 = inflater62.getRemaining();
        boolean boolean65 = inflater62.finished();
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater62.setInput(byteArray72);
        int int74 = inflater56.inflate(byteArray72);
        inflater49.setInput(byteArray72);
        inflater43.setInput(byteArray72);
        int int77 = inflater39.inflate(byteArray72);
        int int78 = inflater32.inflate(byteArray72);
        inflater26.setInput(byteArray72, 0, (int) (short) 1);
        inflater0.setInput(byteArray72, (int) (byte) 0, (int) (byte) 1);
        boolean boolean85 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalOut();
        java.util.zip.Inflater inflater25 = new java.util.zip.Inflater();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        int int28 = inflater25.inflate(byteArray27);
        inflater25.reset();
        long long30 = inflater25.getBytesWritten();
        boolean boolean31 = inflater25.needsInput();
        boolean boolean32 = inflater25.finished();
        int int33 = inflater25.getTotalOut();
        boolean boolean34 = inflater25.needsInput();
        boolean boolean35 = inflater25.needsInput();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        int int41 = inflater36.getRemaining();
        inflater36.reset();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.needsDictionary();
        boolean boolean47 = inflater43.needsInput();
        int int48 = inflater43.getRemaining();
        inflater43.reset();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.finished();
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater50.setInput(byteArray60);
        inflater43.setInput(byteArray60);
        int int65 = inflater36.inflate(byteArray60, 0, (int) (byte) 0);
        inflater25.setInput(byteArray60);
        inflater0.setInput(byteArray60);
        inflater0.end();
        java.lang.Class<?> wildcardClass69 = inflater0.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        int int4 = inflater0.getAdler();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        boolean boolean6 = inflater5.finished();
        int int7 = inflater5.getRemaining();
        boolean boolean8 = inflater5.needsInput();
        java.util.zip.Inflater inflater9 = new java.util.zip.Inflater();
        boolean boolean10 = inflater9.finished();
        int int11 = inflater9.getRemaining();
        boolean boolean12 = inflater9.finished();
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater9.setInput(byteArray19);
        inflater5.setInput(byteArray19);
        inflater0.setInput(byteArray19);
        boolean boolean23 = inflater0.needsInput();
        boolean boolean24 = inflater0.finished();
        inflater0.end();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        int int29 = inflater26.getTotalOut();
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) -1 };
        inflater26.setInput(byteArray32);
        inflater26.reset();
        boolean boolean35 = inflater26.finished();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater(true);
        java.util.zip.Inflater inflater38 = new java.util.zip.Inflater();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        int int41 = inflater38.inflate(byteArray40);
        inflater38.reset();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        byte[] byteArray45 = new byte[] { (byte) 1 };
        int int46 = inflater43.inflate(byteArray45);
        long long47 = inflater43.getBytesWritten();
        inflater43.reset();
        long long49 = inflater43.getBytesWritten();
        java.util.zip.Inflater inflater50 = new java.util.zip.Inflater();
        boolean boolean51 = inflater50.finished();
        int int52 = inflater50.getRemaining();
        boolean boolean53 = inflater50.needsDictionary();
        boolean boolean54 = inflater50.needsInput();
        int int55 = inflater50.getRemaining();
        java.util.zip.Inflater inflater56 = new java.util.zip.Inflater();
        boolean boolean57 = inflater56.finished();
        int int58 = inflater56.getRemaining();
        boolean boolean59 = inflater56.finished();
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater56.setInput(byteArray66);
        int int68 = inflater50.inflate(byteArray66);
        inflater43.setInput(byteArray66);
        inflater38.setInput(byteArray66);
        inflater37.setDictionary(byteArray66);
        int int72 = inflater26.inflate(byteArray66);
        inflater0.setInput(byteArray66);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        long long4 = inflater0.getBytesWritten();
        inflater0.reset();
        long long6 = inflater0.getBytesWritten();
        int int7 = inflater0.getTotalIn();
        boolean boolean8 = inflater0.needsDictionary();
        int int9 = inflater0.getTotalOut();
        int int10 = inflater0.getTotalOut();
        boolean boolean11 = inflater0.needsInput();
        boolean boolean12 = inflater0.needsInput();
        int int13 = inflater0.getAdler();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        boolean boolean7 = inflater0.needsInput();
        inflater0.reset();
        long long9 = inflater0.getBytesWritten();
        inflater0.reset();
        java.util.zip.Inflater inflater11 = new java.util.zip.Inflater();
        boolean boolean12 = inflater11.finished();
        int int13 = inflater11.getRemaining();
        boolean boolean14 = inflater11.needsDictionary();
        long long15 = inflater11.getBytesRead();
        boolean boolean16 = inflater11.needsDictionary();
        int int17 = inflater11.getAdler();
        long long18 = inflater11.getBytesRead();
        int int19 = inflater11.getAdler();
        boolean boolean20 = inflater11.finished();
        java.util.zip.Inflater inflater21 = new java.util.zip.Inflater();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        int int24 = inflater21.inflate(byteArray23);
        int int25 = inflater21.getTotalIn();
        long long26 = inflater21.getBytesWritten();
        int int27 = inflater21.getTotalIn();
        int int28 = inflater21.getTotalOut();
        int int29 = inflater21.getTotalOut();
        boolean boolean30 = inflater21.needsDictionary();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        int int35 = inflater31.getAdler();
        boolean boolean36 = inflater31.finished();
        java.util.zip.Inflater inflater37 = new java.util.zip.Inflater();
        byte[] byteArray39 = new byte[] { (byte) 1 };
        int int40 = inflater37.inflate(byteArray39);
        inflater37.reset();
        java.util.zip.Inflater inflater42 = new java.util.zip.Inflater();
        byte[] byteArray44 = new byte[] { (byte) 1 };
        int int45 = inflater42.inflate(byteArray44);
        long long46 = inflater42.getBytesWritten();
        inflater42.reset();
        long long48 = inflater42.getBytesWritten();
        java.util.zip.Inflater inflater49 = new java.util.zip.Inflater();
        boolean boolean50 = inflater49.finished();
        int int51 = inflater49.getRemaining();
        boolean boolean52 = inflater49.needsDictionary();
        boolean boolean53 = inflater49.needsInput();
        int int54 = inflater49.getRemaining();
        java.util.zip.Inflater inflater55 = new java.util.zip.Inflater();
        boolean boolean56 = inflater55.finished();
        int int57 = inflater55.getRemaining();
        boolean boolean58 = inflater55.finished();
        byte[] byteArray65 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater55.setInput(byteArray65);
        int int67 = inflater49.inflate(byteArray65);
        inflater42.setInput(byteArray65);
        inflater37.setInput(byteArray65);
        inflater31.setInput(byteArray65, (int) (byte) 0, 1);
        int int73 = inflater21.inflate(byteArray65);
        inflater11.setInput(byteArray65, 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            inflater0.setInput(byteArray65, 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.needsDictionary();
        int int2 = inflater0.getTotalOut();
        boolean boolean3 = inflater0.finished();
        boolean boolean4 = inflater0.needsInput();
        boolean boolean5 = inflater0.needsDictionary();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        int int22 = inflater0.getTotalIn();
        inflater0.reset();
        boolean boolean24 = inflater0.needsInput();
        byte[] byteArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int28 = inflater0.inflate(byteArray25, (int) '#', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.needsDictionary();
        boolean boolean4 = inflater0.needsInput();
        int int5 = inflater0.getRemaining();
        inflater0.reset();
        java.util.zip.Inflater inflater7 = new java.util.zip.Inflater();
        boolean boolean8 = inflater7.finished();
        int int9 = inflater7.getRemaining();
        boolean boolean10 = inflater7.finished();
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater7.setInput(byteArray17);
        inflater0.setInput(byteArray17);
        int int20 = inflater0.getTotalOut();
        boolean boolean21 = inflater0.needsDictionary();
        long long22 = inflater0.getBytesWritten();
        boolean boolean23 = inflater0.needsDictionary();
        boolean boolean24 = inflater0.needsDictionary();
        boolean boolean25 = inflater0.finished();
        java.util.zip.Inflater inflater26 = new java.util.zip.Inflater();
        boolean boolean27 = inflater26.finished();
        int int28 = inflater26.getRemaining();
        boolean boolean29 = inflater26.needsDictionary();
        long long30 = inflater26.getBytesRead();
        long long31 = inflater26.getBytesWritten();
        boolean boolean32 = inflater26.finished();
        boolean boolean33 = inflater26.needsInput();
        java.util.zip.Inflater inflater34 = new java.util.zip.Inflater();
        boolean boolean35 = inflater34.needsDictionary();
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        boolean boolean37 = inflater36.finished();
        int int38 = inflater36.getRemaining();
        boolean boolean39 = inflater36.needsDictionary();
        boolean boolean40 = inflater36.needsInput();
        int int41 = inflater36.getRemaining();
        inflater36.reset();
        java.util.zip.Inflater inflater43 = new java.util.zip.Inflater();
        boolean boolean44 = inflater43.finished();
        int int45 = inflater43.getRemaining();
        boolean boolean46 = inflater43.finished();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater43.setInput(byteArray53);
        inflater36.setInput(byteArray53);
        inflater34.setInput(byteArray53);
        inflater26.setInput(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = inflater0.inflate(byteArray53, (int) '4', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 0, 100, -1, -1, 0]");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        boolean boolean1 = inflater0.finished();
        int int2 = inflater0.getRemaining();
        boolean boolean3 = inflater0.finished();
        long long4 = inflater0.getBytesRead();
        boolean boolean5 = inflater0.finished();
        inflater0.reset();
        int int7 = inflater0.getAdler();
        java.util.zip.Inflater inflater8 = new java.util.zip.Inflater();
        boolean boolean9 = inflater8.finished();
        int int10 = inflater8.getRemaining();
        boolean boolean11 = inflater8.needsDictionary();
        boolean boolean12 = inflater8.needsInput();
        boolean boolean13 = inflater8.needsDictionary();
        int int14 = inflater8.getRemaining();
        java.util.zip.Inflater inflater15 = new java.util.zip.Inflater();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        int int18 = inflater15.inflate(byteArray17);
        long long19 = inflater15.getBytesWritten();
        inflater15.reset();
        long long21 = inflater15.getBytesWritten();
        int int22 = inflater15.getTotalIn();
        boolean boolean23 = inflater15.needsDictionary();
        int int24 = inflater15.getTotalOut();
        int int25 = inflater15.getTotalOut();
        boolean boolean26 = inflater15.needsInput();
        java.util.zip.Inflater inflater28 = new java.util.zip.Inflater(true);
        int int29 = inflater28.getRemaining();
        long long30 = inflater28.getBytesRead();
        java.util.zip.Inflater inflater31 = new java.util.zip.Inflater();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        int int34 = inflater31.inflate(byteArray33);
        int int35 = inflater28.inflate(byteArray33);
        java.util.zip.Inflater inflater36 = new java.util.zip.Inflater();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        int int39 = inflater36.inflate(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int45 = inflater36.inflate(byteArray44);
        boolean boolean46 = inflater36.needsInput();
        boolean boolean47 = inflater36.needsDictionary();
        java.util.zip.Inflater inflater48 = new java.util.zip.Inflater();
        boolean boolean49 = inflater48.finished();
        int int50 = inflater48.getRemaining();
        boolean boolean51 = inflater48.needsDictionary();
        long long52 = inflater48.getBytesRead();
        boolean boolean53 = inflater48.needsInput();
        java.util.zip.Inflater inflater54 = new java.util.zip.Inflater();
        byte[] byteArray56 = new byte[] { (byte) 1 };
        int int57 = inflater54.inflate(byteArray56);
        long long58 = inflater54.getBytesWritten();
        inflater54.reset();
        long long60 = inflater54.getBytesWritten();
        java.util.zip.Inflater inflater61 = new java.util.zip.Inflater();
        boolean boolean62 = inflater61.finished();
        int int63 = inflater61.getRemaining();
        boolean boolean64 = inflater61.needsDictionary();
        boolean boolean65 = inflater61.needsInput();
        int int66 = inflater61.getRemaining();
        java.util.zip.Inflater inflater67 = new java.util.zip.Inflater();
        boolean boolean68 = inflater67.finished();
        int int69 = inflater67.getRemaining();
        boolean boolean70 = inflater67.finished();
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 0, (byte) 100, (byte) -1, (byte) -1, (byte) 0 };
        inflater67.setInput(byteArray77);
        int int79 = inflater61.inflate(byteArray77);
        inflater54.setInput(byteArray77);
        int int81 = inflater48.inflate(byteArray77);
        inflater36.setInput(byteArray77, 0, (int) (byte) 0);
        inflater28.setDictionary(byteArray77);
        inflater15.setInput(byteArray77);
        inflater8.setInput(byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = inflater0.inflate(byteArray77, (int) (short) 10, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 0, 100, -1, -1, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        java.util.zip.Inflater inflater0 = new java.util.zip.Inflater();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        int int3 = inflater0.inflate(byteArray2);
        inflater0.reset();
        java.util.zip.Inflater inflater5 = new java.util.zip.Inflater();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        int int8 = inflater5.inflate(byteArray7);
        int int9 = inflater5.getTotalIn();
        java.util.zip.Inflater inflater10 = new java.util.zip.Inflater();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        int int13 = inflater10.inflate(byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 10 };
        int int19 = inflater10.inflate(byteArray18);
        int int20 = inflater5.inflate(byteArray18);
        inflater0.setInput(byteArray18);
        boolean boolean22 = inflater0.needsDictionary();
        long long23 = inflater0.getBytesWritten();
        int int24 = inflater0.getTotalOut();
        long long25 = inflater0.getBytesRead();
        int int26 = inflater0.getRemaining();
        long long27 = inflater0.getBytesWritten();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1, -1, 10, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }
}

