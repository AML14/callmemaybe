[
  {
    "signature": "makeRef(java.util.function.Predicate<? super T> predicate, java.util.stream.MatchOps$MatchKind matchKind)",
    "name": "makeRef",
    "containingClass": {
      "qualifiedName": "java.util.stream.MatchOps",
      "name": "MatchOps",
      "isArray": false
    },
    "targetClass": "java.util.stream.MatchOps",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.TerminalOp<T, java.lang.Boolean>",
      "name": "java.util.stream.TerminalOp<T, java.lang.Boolean>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      },
      {
        "type": {
          "qualifiedName": "java.util.stream.MatchOps$MatchKind",
          "name": "MatchKind",
          "isArray": false
        },
        "name": "matchKind"
      }
    ],
    "protocol": {
      "member": "makeRef(java.util.function.Predicate<? super T> predicate, java.util.stream.MatchOps$MatchKind matchKind)",
      "comment": "Constructs a quantified predicate matcher for a Stream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "makeInt(java.util.function.IntPredicate predicate, java.util.stream.MatchOps$MatchKind matchKind)",
    "name": "makeInt",
    "containingClass": {
      "qualifiedName": "java.util.stream.MatchOps",
      "name": "MatchOps",
      "isArray": false
    },
    "targetClass": "java.util.stream.MatchOps",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.TerminalOp<java.lang.Integer, java.lang.Boolean>",
      "name": "java.util.stream.TerminalOp<java.lang.Integer, java.lang.Boolean>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntPredicate",
          "name": "IntPredicate",
          "isArray": false
        },
        "name": "predicate"
      },
      {
        "type": {
          "qualifiedName": "java.util.stream.MatchOps$MatchKind",
          "name": "MatchKind",
          "isArray": false
        },
        "name": "matchKind"
      }
    ],
    "protocol": {
      "member": "makeInt(java.util.function.IntPredicate predicate, java.util.stream.MatchOps$MatchKind matchKind)",
      "comment": "Constructs a quantified predicate matcher for an IntStream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "makeLong(java.util.function.LongPredicate predicate, java.util.stream.MatchOps$MatchKind matchKind)",
    "name": "makeLong",
    "containingClass": {
      "qualifiedName": "java.util.stream.MatchOps",
      "name": "MatchOps",
      "isArray": false
    },
    "targetClass": "java.util.stream.MatchOps",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.TerminalOp<java.lang.Long, java.lang.Boolean>",
      "name": "java.util.stream.TerminalOp<java.lang.Long, java.lang.Boolean>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.LongPredicate",
          "name": "LongPredicate",
          "isArray": false
        },
        "name": "predicate"
      },
      {
        "type": {
          "qualifiedName": "java.util.stream.MatchOps$MatchKind",
          "name": "MatchKind",
          "isArray": false
        },
        "name": "matchKind"
      }
    ],
    "protocol": {
      "member": "makeLong(java.util.function.LongPredicate predicate, java.util.stream.MatchOps$MatchKind matchKind)",
      "comment": "Constructs a quantified predicate matcher for a LongStream.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "makeDouble(java.util.function.DoublePredicate predicate, java.util.stream.MatchOps$MatchKind matchKind)",
    "name": "makeDouble",
    "containingClass": {
      "qualifiedName": "java.util.stream.MatchOps",
      "name": "MatchOps",
      "isArray": false
    },
    "targetClass": "java.util.stream.MatchOps",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.TerminalOp<java.lang.Double, java.lang.Boolean>",
      "name": "java.util.stream.TerminalOp<java.lang.Double, java.lang.Boolean>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.DoublePredicate",
          "name": "DoublePredicate",
          "isArray": false
        },
        "name": "predicate"
      },
      {
        "type": {
          "qualifiedName": "java.util.stream.MatchOps$MatchKind",
          "name": "MatchKind",
          "isArray": false
        },
        "name": "matchKind"
      }
    ],
    "protocol": {
      "member": "makeDouble(java.util.function.DoublePredicate predicate, java.util.stream.MatchOps$MatchKind matchKind)",
      "comment": "Constructs a quantified predicate matcher for a DoubleStream.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]