[
  {
    "signature": "apply(T t, U u)",
    "name": "apply",
    "containingClass": {
      "qualifiedName": "java.util.function.BiFunction",
      "name": "BiFunction",
      "isArray": false
    },
    "targetClass": "java.util.function.BiFunction",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "R",
      "name": "R",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "t"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "u"
      }
    ],
    "protocol": {
      "member": "apply(T t, U u)",
      "comment": "Applies this function to the given arguments.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "andThen(java.util.function.Function<? super R, ? extends V> after)",
    "name": "andThen",
    "containingClass": {
      "qualifiedName": "java.util.function.BiFunction",
      "name": "BiFunction",
      "isArray": false
    },
    "targetClass": "java.util.function.BiFunction",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.function.BiFunction<T, U, V>",
      "name": "java.util.function.BiFunction<T, U, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "after"
      }
    ],
    "protocol": {
      "member": "andThen(java.util.function.Function<? super R, ? extends V> after)",
      "comment": "Returns a composed function that first applies this function to its input, and then applies the after function to the result. If evaluation of either function throws an exception, it is relayed to the caller of the composed function.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]