[
  {
    "signature": "cern.colt.list.ObjectArrayList()",
    "name": "cern.colt.list.ObjectArrayList",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "cern.colt.list.ObjectArrayList()",
      "comment": "Constructs an empty list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cern.colt.list.ObjectArrayList(java.lang.Object[] elements)",
    "name": "cern.colt.list.ObjectArrayList",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "elements"
      }
    ],
    "protocol": {
      "member": "cern.colt.list.ObjectArrayList(java.lang.Object[] elements)",
      "comment": "Constructs a list containing the specified elements. The initial size and capacity of the list is the length of the array. WARNING: For efficiency reasons and to keep memory usage low, the array is not copied. So if subsequently you modify the specified array directly via the [] operator, be sure you know what you're doing.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cern.colt.list.ObjectArrayList(int initialCapacity)",
    "name": "cern.colt.list.ObjectArrayList",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "initialCapacity"
      }
    ],
    "protocol": {
      "member": "cern.colt.list.ObjectArrayList(int initialCapacity)",
      "comment": "Constructs an empty list with the specified initial capacity.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(java.lang.Object element)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "add(java.lang.Object element)",
      "comment": "Appends the specified element to the end of this list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAllOfFromTo(cern.colt.list.ObjectArrayList other, int from, int to)",
    "name": "addAllOfFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.ObjectArrayList",
          "name": "ObjectArrayList",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "addAllOfFromTo(cern.colt.list.ObjectArrayList other, int from, int to)",
      "comment": "Appends the part of the specified list between from (inclusive) and to (inclusive) to the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "beforeInsert(int index, java.lang.Object element)",
    "name": "beforeInsert",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "beforeInsert(int index, java.lang.Object element)",
      "comment": "Inserts the specified element before the specified position into the receiver. Shifts the element currently at that position (if any) and any subsequent elements to the right.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "beforeInsertAllOfFromTo(int index, cern.colt.list.ObjectArrayList other, int from, int to)",
    "name": "beforeInsertAllOfFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.ObjectArrayList",
          "name": "ObjectArrayList",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "beforeInsertAllOfFromTo(int index, cern.colt.list.ObjectArrayList other, int from, int to)",
      "comment": "Inserts the part of the specified list between otherFrom (inclusive) and otherTo (inclusive) before the specified position into the receiver. Shifts the element currently at that position (if any) and any subsequent elements to the right.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "beforeInsertDummies(int index, int length)",
    "name": "beforeInsertDummies",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      }
    ],
    "protocol": {
      "member": "beforeInsertDummies(int index, int length)",
      "comment": "Inserts length dummies before the specified position into the receiver. Shifts the element currently at that position (if any) and any subsequent elements to the right.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "binarySearch(java.lang.Object key)",
    "name": "binarySearch",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "protocol": {
      "member": "binarySearch(java.lang.Object key)",
      "comment": "Searches the receiver for the specified value using the binary search algorithm. The receiver must be sorted into ascending order according to the natural ordering of its elements (as by the sort method) prior to making this call. If it is not sorted, the results are undefined: in particular, the call may enter an infinite loop. If the receiver contains multiple elements equal to the specified object, there is no guarantee which instance will be found.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "binarySearchFromTo(java.lang.Object key, int from, int to)",
    "name": "binarySearchFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "binarySearchFromTo(java.lang.Object key, int from, int to)",
      "comment": "Searches the receiver for the specified value using the binary search algorithm. The receiver must be sorted into ascending order according to the natural ordering of its elements (as by the sort method) prior to making this call. If it is not sorted, the results are undefined: in particular, the call may enter an infinite loop. If the receiver contains multiple elements equal to the specified object, there is no guarantee which instance will be found.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "binarySearchFromTo(java.lang.Object key, int from, int to, java.util.Comparator comparator)",
    "name": "binarySearchFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "protocol": {
      "member": "binarySearchFromTo(java.lang.Object key, int from, int to, java.util.Comparator comparator)",
      "comment": "Searches the receiver for the specified value using the binary search algorithm. The receiver must be sorted into ascending order according to the specified comparator. All elements in the range must be mutually comparable by the specified comparator (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the range). If the receiver is not sorted, the results are undefined: in particular, the call may enter an infinite loop. If the receiver contains multiple elements equal to the specified object, there is no guarantee which instance will be found.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "Returns a copy of the receiver such that the copy and the receiver share the same elements, but do not share the same array to index them; So modifying an object in the copy modifies the object in the receiver and vice versa; However, structurally modifying the copy (for example changing its size, setting other objects at indexes, etc.) does not affect the receiver and vice versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object elem, boolean testForEquality)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "elem"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "protocol": {
      "member": "contains(java.lang.Object elem, boolean testForEquality)",
      "comment": "Returns true if the receiver contains the specified element. Tests for equality or identity as specified by testForEquality.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copy()",
    "name": "copy",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "cern.colt.list.ObjectArrayList",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "copy()",
      "comment": "Returns a copy of the receiver; call method_0 and casts the result. Returns a copy such that the copy and the receiver share the same elements, but do not share the same array to index them; So modifying an object in the copy modifies the object in the receiver and vice versa; However, structurally modifying the copy (for example changing its size, setting other objects at indexes, etc.) does not affect the receiver and vice versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "delete(java.lang.Object element, boolean testForEquality)",
    "name": "delete",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "protocol": {
      "member": "delete(java.lang.Object element, boolean testForEquality)",
      "comment": "Deletes the first element from the receiver that matches the specified element. Does nothing, if no such matching element is contained. Tests elements for equality or identity as specified by testForEquality. When testing for equality, two elements e1 and e2 are equal if (e1==null ? e2==null : method_0.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "elements()",
    "name": "elements",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "elements()",
      "comment": "Returns the elements currently stored, including invalid elements between size and capacity, if any. WARNING: For efficiency reasons and to keep memory usage low, the array is not copied. So if subsequently you modify the returned array directly via the [] operator, be sure you know what you're doing.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "elements(java.lang.Object[] elements)",
    "name": "elements",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "cern.colt.list.ObjectArrayList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "elements"
      }
    ],
    "protocol": {
      "member": "elements(java.lang.Object[] elements)",
      "comment": "Sets the receiver's elements to be the specified array (not a copy of it). The size and capacity of the list is the length of the array. WARNING: For efficiency reasons and to keep memory usage low, the array is not copied. So if subsequently you modify the specified array directly via the [] operator, be sure you know what you're doing.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ensureCapacity(int minCapacity)",
    "name": "ensureCapacity",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minCapacity"
      }
    ],
    "protocol": {
      "member": "ensureCapacity(int minCapacity)",
      "comment": "Ensures that the receiver can hold at least the specified number of elements without needing to allocate new internal memory. If necessary, allocates new internal memory and increases the capacity of the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object otherObj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "otherObj"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object otherObj)",
      "comment": "Compares the specified Object with the receiver for equality. Returns true if and only if the specified Object is also an ObjectArrayList, both lists have the same size, and all corresponding pairs of elements in the two lists are equal. In other words, two lists are defined to be equal if they contain the same elements in the same order. Two elements e1 and e2 are equal if (e1==null ? e2==null : method_0.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object otherObj, boolean testForEquality)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "otherObj"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object otherObj, boolean testForEquality)",
      "comment": "Compares the specified Object with the receiver for equality. Returns true if and only if the specified Object is also an ObjectArrayList, both lists have the same size, and all corresponding pairs of elements in the two lists are the same. In other words, two lists are defined to be equal if they contain the same elements in the same order. Tests elements for equality or identity as specified by testForEquality. When testing for equality, two elements e1 and e2 are equal if (e1==null ? e2==null : method_0.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "fillFromToWith(int from, int to, java.lang.Object val)",
    "name": "fillFromToWith",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "val"
      }
    ],
    "protocol": {
      "member": "fillFromToWith(int from, int to, java.lang.Object val)",
      "comment": "Sets the specified range of elements in the specified array to the specified value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEach(cern.colt.function.ObjectProcedure procedure)",
    "name": "forEach",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectProcedure",
          "name": "ObjectProcedure",
          "isArray": false
        },
        "name": "procedure"
      }
    ],
    "protocol": {
      "member": "forEach(cern.colt.function.ObjectProcedure procedure)",
      "comment": "Applies a procedure to each element of the receiver, if any. Starts at index 0, moving rightwards.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(int index)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "get(int index)",
      "comment": "Returns the element at the specified position in the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQuick(int index)",
    "name": "getQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "protocol": {
      "member": "getQuick(int index)",
      "comment": "Returns the element at the specified position in the receiver; WARNING: Does not check preconditions. Provided with invalid parameters this method may return invalid elements without throwing any exception! You should only use this method when you are absolutely sure that the index is within bounds. Precondition (unchecked): index >= 0 && index < method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(java.lang.Object element, boolean testForEquality)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "protocol": {
      "member": "indexOf(java.lang.Object element, boolean testForEquality)",
      "comment": "Returns the index of the first occurrence of the specified element. Returns -1 if the receiver does not contain this element. Tests for equality or identity as specified by testForEquality.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOfFromTo(java.lang.Object element, int from, int to, boolean testForEquality)",
    "name": "indexOfFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "protocol": {
      "member": "indexOfFromTo(java.lang.Object element, int from, int to, boolean testForEquality)",
      "comment": "Returns the index of the first occurrence of the specified element. Returns -1 if the receiver does not contain this element. Searches between from, inclusive and to, inclusive. Tests for equality or identity as specified by testForEquality.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isSortedFromTo(int from, int to)",
    "name": "isSortedFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "isSortedFromTo(int from, int to)",
      "comment": "Determines whether the receiver is sorted ascending, according to the natural ordering of its elements. All elements in this range must implement the Comparable interface. Furthermore, all elements in this range must be mutually comparable (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the array).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastIndexOf(java.lang.Object element, boolean testForEquality)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "protocol": {
      "member": "lastIndexOf(java.lang.Object element, boolean testForEquality)",
      "comment": "Returns the index of the last occurrence of the specified element. Returns -1 if the receiver does not contain this element. Tests for equality or identity as specified by testForEquality.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastIndexOfFromTo(java.lang.Object element, int from, int to, boolean testForEquality)",
    "name": "lastIndexOfFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "protocol": {
      "member": "lastIndexOfFromTo(java.lang.Object element, int from, int to, boolean testForEquality)",
      "comment": "Returns the index of the last occurrence of the specified element. Returns -1 if the receiver does not contain this element. Searches beginning at to, inclusive until from, inclusive. Tests for equality or identity as specified by testForEquality.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mergeSortFromTo(int from, int to)",
    "name": "mergeSortFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "mergeSortFromTo(int from, int to)",
      "comment": "Sorts the specified range of the receiver into ascending order, according to the natural ordering of its elements. All elements in this range must implement the Comparable interface. Furthermore, all elements in this range must be mutually comparable (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be stable: equal elements will not be reordered as a result of the sort. The sorting algorithm is a modified mergesort (in which the merge is omitted if the highest element in the low sublist is less than the lowest element in the high sublist). This algorithm offers guaranteed n*method_1 performance, and can approach linear performance on nearly sorted lists. You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set. It is generally better to call method_2 or method_3 instead, because those methods automatically choose the best sorting algorithm.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mergeSortFromTo(int from, int to, java.util.Comparator c)",
    "name": "mergeSortFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "mergeSortFromTo(int from, int to, java.util.Comparator c)",
      "comment": "Sorts the receiver according to the order induced by the specified comparator. All elements in the range must be mutually comparable by the specified comparator (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the range). This sort is guaranteed to be stable: equal elements will not be reordered as a result of the sort. The sorting algorithm is a modified mergesort (in which the merge is omitted if the highest element in the low sublist is less than the lowest element in the high sublist). This algorithm offers guaranteed n*method_1 performance, and can approach linear performance on nearly sorted lists.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "partFromTo(int from, int to)",
    "name": "partFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "cern.colt.list.ObjectArrayList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "partFromTo(int from, int to)",
      "comment": "Returns a new list of the part of the receiver between from, inclusive, and to, inclusive.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quickSortFromTo(int from, int to)",
    "name": "quickSortFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "quickSortFromTo(int from, int to)",
      "comment": "Sorts the specified range of the receiver into ascending order, according to the natural ordering of its elements. All elements in this range must implement the Comparable interface. Furthermore, all elements in this range must be mutually comparable (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the array). The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\", Software-Practice and Experience, Vol. method_1 P. 1249-1265 (November 1993). This algorithm offers n*method_2 performance on many data sets that cause other quicksorts to degrade to quadratic performance. You should never call this method unless you are sure that this particular sorting algorithm is the right one for your data set. It is generally better to call method_3 or method_4 instead, because those methods automatically choose the best sorting algorithm.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "quickSortFromTo(int from, int to, java.util.Comparator c)",
    "name": "quickSortFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "protocol": {
      "member": "quickSortFromTo(int from, int to, java.util.Comparator c)",
      "comment": "Sorts the receiver according to the order induced by the specified comparator. All elements in the range must be mutually comparable by the specified comparator (that is, method_0 must not throw a ClassCastException for any elements e1 and e2 in the range). The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\", Software-Practice and Experience, Vol. method_1 P. 1249-1265 (November 1993). This algorithm offers n*method_2 performance on many data sets that cause other quicksorts to degrade to quadratic performance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAll(cern.colt.list.ObjectArrayList other, boolean testForEquality)",
    "name": "removeAll",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.ObjectArrayList",
          "name": "ObjectArrayList",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "protocol": {
      "member": "removeAll(cern.colt.list.ObjectArrayList other, boolean testForEquality)",
      "comment": "Removes from the receiver all elements that are contained in the specified list. Tests for equality or identity as specified by testForEquality.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeFromTo(int from, int to)",
    "name": "removeFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "removeFromTo(int from, int to)",
      "comment": "Removes from the receiver all elements whose index is between from, inclusive and to, inclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (to - from + 1) elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceFromToWithFrom(int from, int to, cern.colt.list.ObjectArrayList other, int otherFrom)",
    "name": "replaceFromToWithFrom",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.ObjectArrayList",
          "name": "ObjectArrayList",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "otherFrom"
      }
    ],
    "protocol": {
      "member": "replaceFromToWithFrom(int from, int to, cern.colt.list.ObjectArrayList other, int otherFrom)",
      "comment": "Replaces a number of elements in the receiver with the same number of elements of another list. Replaces elements in the receiver, between from (inclusive) and to (inclusive), with elements of other, starting from otherFrom (inclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceFromToWithFromTo(int from, int to, cern.colt.list.ObjectArrayList other, int otherFrom, int otherTo)",
    "name": "replaceFromToWithFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.ObjectArrayList",
          "name": "ObjectArrayList",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "otherFrom"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "otherTo"
      }
    ],
    "protocol": {
      "member": "replaceFromToWithFromTo(int from, int to, cern.colt.list.ObjectArrayList other, int otherFrom, int otherTo)",
      "comment": "Replaces the part between from (inclusive) and to (inclusive) with the other list's part between otherFrom and otherTo. Powerful (and tricky) method! Both parts need not be of the same size (part A can both be smaller or larger than part B). Parts may overlap. Receiver and other list may (but most not) be identical. If from > to, then inserts other part before from.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "replaceFromWith(int from, java.util.Collection other)",
    "name": "replaceFromWith",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "protocol": {
      "member": "replaceFromWith(int from, java.util.Collection other)",
      "comment": "Replaces the part of the receiver starting at from (inclusive) with all the elements of the specified collection. Does not alter the size of the receiver. Replaces exactly method_0-from, method_1 elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "retainAll(cern.colt.list.ObjectArrayList other, boolean testForEquality)",
    "name": "retainAll",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.ObjectArrayList",
          "name": "ObjectArrayList",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "protocol": {
      "member": "retainAll(cern.colt.list.ObjectArrayList other, boolean testForEquality)",
      "comment": "Retains (keeps) only the elements in the receiver that are contained in the specified other list. In other words, removes from the receiver all of its elements that are not contained in the specified other list. Tests for equality or identity as specified by testForEquality.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reverse()",
    "name": "reverse",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "reverse()",
      "comment": "Reverses the elements of the receiver. Last becomes first, second last becomes second first, and so on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(int index, java.lang.Object element)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "set(int index, java.lang.Object element)",
      "comment": "Replaces the element at the specified position in the receiver with the specified element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setQuick(int index, java.lang.Object element)",
    "name": "setQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element"
      }
    ],
    "protocol": {
      "member": "setQuick(int index, java.lang.Object element)",
      "comment": "Replaces the element at the specified position in the receiver with the specified element; WARNING: Does not check preconditions. Provided with invalid parameters this method may access invalid indexes without throwing any exception! You should only use this method when you are absolutely sure that the index is within bounds. Precondition (unchecked): index >= 0 && index < method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "shuffleFromTo(int from, int to)",
    "name": "shuffleFromTo",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "from"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "to"
      }
    ],
    "protocol": {
      "member": "shuffleFromTo(int from, int to)",
      "comment": "Randomly permutes the part of the receiver between from (inclusive) and to (inclusive).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "size()",
      "comment": "Returns the number of elements contained in the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "times(int times)",
    "name": "times",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "cern.colt.list.ObjectArrayList",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "times"
      }
    ],
    "protocol": {
      "member": "times(int times)",
      "comment": "Returns a list which is a concatenation of times times the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(java.lang.Object[] array)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "protocol": {
      "member": "toArray(java.lang.Object[] array)",
      "comment": "Returns an array containing all of the elements in the receiver in the correct order. The runtime type of the returned array is that of the specified array. If the receiver fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of the receiver.  If the receiver fits in the specified array with room to spare (imethod_0., the array has more elements than the receiver), the element in the array immediately following the end of the receiver is set to null. This is useful in determining the length of the receiver only if the caller knows that the receiver does not contain any null elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toList()",
    "name": "toList",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayList",
      "name": "java.util.ArrayList",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toList()",
      "comment": "Returns a javamethod_0method_1 containing all the elements in the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a string representation of the receiver, containing the String representation of each element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "trimToSize()",
    "name": "trimToSize",
    "containingClass": {
      "qualifiedName": "cern.colt.list.ObjectArrayList",
      "name": "ObjectArrayList",
      "isArray": false
    },
    "targetClass": "cern.colt.list.ObjectArrayList",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "trimToSize()",
      "comment": "Trims the capacity of the receiver to be the receiver's current size. Releases any superfluos internal memory. An application can use this operation to minimize the storage of the receiver.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]