[
  {
    "signature": "java.util.JapaneseImperialCalendar(java.util.TimeZone zone, java.util.Locale aLocale)",
    "name": "java.util.JapaneseImperialCalendar",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimeZone",
          "name": "TimeZone",
          "isArray": false
        },
        "name": "zone"
      },
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "aLocale"
      }
    ],
    "protocol": {
      "member": "java.util.JapaneseImperialCalendar(java.util.TimeZone zone, java.util.Locale aLocale)",
      "comment": "Constructs a JapaneseImperialCalendar based on the current time in the given time zone with the given locale.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.JapaneseImperialCalendar(java.util.TimeZone zone, java.util.Locale aLocale, boolean flag)",
    "name": "java.util.JapaneseImperialCalendar",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimeZone",
          "name": "TimeZone",
          "isArray": false
        },
        "name": "zone"
      },
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "aLocale"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "flag"
      }
    ],
    "protocol": {
      "member": "java.util.JapaneseImperialCalendar(java.util.TimeZone zone, java.util.Locale aLocale, boolean flag)",
      "comment": "Constructs an \"empty\" JapaneseImperialCalendar.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCalendarType()",
    "name": "getCalendarType",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCalendarType()",
      "comment": "Returns \"japanese\" as the calendar type of this JapaneseImperialCalendar.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "protocol": {
      "member": "equals(java.lang.Object obj)",
      "comment": "Compares this JapaneseImperialCalendar to the specified Object. The result is true if and only if the argument is a JapaneseImperialCalendar object that represents the same time value (millisecond offset from the Epoch) under the same Calendar parameters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hashCode()",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "hashCode()",
      "comment": "Generates the hash code for this JapaneseImperialCalendar object.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(int field, int amount)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "protocol": {
      "member": "add(int field, int amount)",
      "comment": "Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules. <em>Add rule 1</em>. The value of field after the call minus the value of field before the call is amount, modulo any overflow that has occurred in field. Overflow occurs when a field value exceeds its range and, as a result, the next larger field is incremented or decremented and the field value is adjusted back into its range. <em>Add rule 2</em>. If a smaller field is expected to be invariant, but it is impossible for it to be equal to its prior value because of changes in its minimum or maximum after field is changed, then its value is adjusted to be as close as possible to its expected value. A smaller field represents a smaller unit of time. HOUR is a smaller field than DAY_OF_MONTH. No adjustment is made to smaller fields that are not expected to be invariant. The calendar system determines what fields are expected to be invariant.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "roll(int field, boolean up)",
    "name": "roll",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "up"
      }
    ],
    "protocol": {
      "member": "roll(int field, boolean up)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "roll(int field, int amount)",
    "name": "roll",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "amount"
      }
    ],
    "protocol": {
      "member": "roll(int field, int amount)",
      "comment": "Adds a signed amount to the specified calendar field without changing larger fields. A negative roll amount means to subtract from field without changing larger fields. If the specified amount is 0, this method performs nothing. This method calls method_0 before adding the amount so that all the calendar fields are normalized. If there is any calendar field having an out-of-range value in non-lenient mode, then an IllegalArgumentException is thrown.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDisplayName(int field, int style, java.util.Locale locale)",
    "name": "getDisplayName",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "style"
      },
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "locale"
      }
    ],
    "protocol": {
      "member": "getDisplayName(int field, int style, java.util.Locale locale)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getDisplayNames(int field, int style, java.util.Locale locale)",
    "name": "getDisplayNames",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<java.lang.String, java.lang.Integer>",
      "name": "java.util.Map<java.lang.String, java.lang.Integer>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "style"
      },
      {
        "type": {
          "qualifiedName": "java.util.Locale",
          "name": "Locale",
          "isArray": false
        },
        "name": "locale"
      }
    ],
    "protocol": {
      "member": "getDisplayNames(int field, int style, java.util.Locale locale)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinimum(int field)",
    "name": "getMinimum",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getMinimum(int field)",
      "comment": "Returns the minimum value for the given calendar field of this Calendar instance. The minimum value is defined as the smallest value returned by the method_0 get method for any possible time value, taking into consideration the current values of the method_1 getFirstDayOfWeek, method_2 getMinimalDaysInFirstWeek, and method_3 getTimeZone methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMaximum(int field)",
    "name": "getMaximum",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getMaximum(int field)",
      "comment": "Returns the maximum value for the given calendar field of this GregorianCalendar instance. The maximum value is defined as the largest value returned by the method_0 get method for any possible time value, taking into consideration the current values of the method_1 getFirstDayOfWeek, method_2 getMinimalDaysInFirstWeek, and method_3 getTimeZone methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getGreatestMinimum(int field)",
    "name": "getGreatestMinimum",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getGreatestMinimum(int field)",
      "comment": "Returns the highest minimum value for the given calendar field of this GregorianCalendar instance. The highest minimum value is defined as the largest value returned by method_0 for any possible time value, taking into consideration the current values of the method_1 getFirstDayOfWeek, method_2 getMinimalDaysInFirstWeek, and method_3 getTimeZone methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLeastMaximum(int field)",
    "name": "getLeastMaximum",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getLeastMaximum(int field)",
      "comment": "Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance. The lowest maximum value is defined as the smallest value returned by method_0 for any possible time value, taking into consideration the current values of the method_1 getFirstDayOfWeek, method_2 getMinimalDaysInFirstWeek, and method_3 getTimeZone methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getActualMinimum(int field)",
    "name": "getActualMinimum",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getActualMinimum(int field)",
      "comment": "Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the method_0 getFirstDayOfWeek, method_1 getMinimalDaysInFirstWeek, and method_2 getTimeZone methods.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getActualMaximum(int field)",
    "name": "getActualMaximum",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "field"
      }
    ],
    "protocol": {
      "member": "getActualMaximum(int field)",
      "comment": "Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the method_0 getFirstDayOfWeek, method_1 getMinimalDaysInFirstWeek, and method_2 getTimeZone methods. For example, if the date of this instance is Heisei 16February 1, the actual maximum value of the DAY_OF_MONTH field is 29 because Heisei 16 is a leap year, and if the date of this instance is Heisei 17 February 1, it's 28.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "clone()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTimeZone()",
    "name": "getTimeZone",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.TimeZone",
      "name": "java.util.TimeZone",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTimeZone()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setTimeZone(java.util.TimeZone zone)",
    "name": "setTimeZone",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.TimeZone",
          "name": "TimeZone",
          "isArray": false
        },
        "name": "zone"
      }
    ],
    "protocol": {
      "member": "setTimeZone(java.util.TimeZone zone)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "computeFields()",
    "name": "computeFields",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "computeFields()",
      "comment": "Converts the time value (millisecond offset from the Epoch) to calendar field values. The time is not recomputed first; to recompute the time, then the fields, call the complete method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "computeTime()",
    "name": "computeTime",
    "containingClass": {
      "qualifiedName": "java.util.JapaneseImperialCalendar",
      "name": "JapaneseImperialCalendar",
      "isArray": false
    },
    "targetClass": "java.util.JapaneseImperialCalendar",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "computeTime()",
      "comment": "Converts calendar field values to the time value (millisecond offset from the Epoch). @exception IllegalArgumentException if any calendar fields are invalid.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]