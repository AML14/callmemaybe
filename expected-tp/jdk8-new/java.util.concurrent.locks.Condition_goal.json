[
  {
    "signature": "await()",
    "name": "await",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.Condition",
      "name": "Condition",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.Condition",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "await()",
      "comment": "Causes the current thread to wait until it is signalled or method_0 interrupted. The lock associated with this Condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens:  <li>Some other thread invokes the method_1 method for this Condition and the current thread happens to be chosen as the thread to be awakened; or <li>Some other thread invokes the method_1All method for this Condition; or <li>Some other thread method_0 interrupts the current thread, and interruption of thread suspension is supported; or <li>A &quot;<em>spurious wakeup</em>&quot; occurs.  In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_0 interrupted while waiting and interruption of thread suspension is supported,  then InterruptedException is thrown and the current thread's interrupted status is cleared. It is not specified, in the first case, whether or not the test for interruption occurs before the lock is released. Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact. An implementation can favor responding to an interrupt over normal method return in response to a signal. In that case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "awaitUninterruptibly()",
    "name": "awaitUninterruptibly",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.Condition",
      "name": "Condition",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.Condition",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "awaitUninterruptibly()",
      "comment": "Causes the current thread to wait until it is signalled. The lock associated with this condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens:  <li>Some other thread invokes the method_0 method for this Condition and the current thread happens to be chosen as the thread to be awakened; or <li>Some other thread invokes the method_0All method for this Condition; or <li>A &quot;<em>spurious wakeup</em>&quot; occurs.  In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread's interrupted status is set when it enters this method, or it is method_2 interrupted while waiting, it will continue to wait until signalled. When it finally returns from this method its interrupted status will still be set. Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "awaitNanos(long nanosTimeout)",
    "name": "awaitNanos",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.Condition",
      "name": "Condition",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.Condition",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "nanosTimeout"
      }
    ],
    "protocol": {
      "member": "awaitNanos(long nanosTimeout)",
      "comment": "Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses. The lock associated with this condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of five things happens:  <li>Some other thread invokes the method_6 method for this Condition and the current thread happens to be chosen as the thread to be awakened; or <li>Some other thread invokes the method_6All method for this Condition; or <li>Some other thread method_8 interrupts the current thread, and interruption of thread suspension is supported; or <li>The specified waiting time elapses; or <li>A &quot;<em>spurious wakeup</em>&quot; occurs.  In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_8 interrupted while waiting and interruption of thread suspension is supported,  then InterruptedException is thrown and the current thread's interrupted status is cleared. It is not specified, in the first case, whether or not the test for interruption occurs before the lock is released. The method returns an estimate of the number of nanoseconds remaining to wait given the supplied nanosTimeout value upon return, or a value less than or equal to zero if it timed out. This value can be used to determine whether and how long to re-wait in cases where the wait returns but an awaited condition still does not hold. Typical uses of this method take the following form:  boolean method_0 { long nanos = method_1; method_2; try { while (method_3 { if (nanos <= 0L) return false; nanos = method_4;  // ... } finally { method_5; } }} Design note: This method requires a nanosecond argument so as to avoid truncation errors in reporting remaining times. Such precision loss would make it difficult for programmers to ensure that total waiting times are not systematically shorter than specified when re-waits occur. Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact. An implementation can favor responding to an interrupt over normal method return in response to a signal, or over indicating the elapse of the specified waiting time. In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "await(long time, java.util.concurrent.TimeUnit unit)",
    "name": "await",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.Condition",
      "name": "Condition",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.Condition",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "time"
      },
      {
        "type": {
          "qualifiedName": "java.util.concurrent.TimeUnit",
          "name": "TimeUnit",
          "isArray": false
        },
        "name": "unit"
      }
    ],
    "protocol": {
      "member": "await(long time, java.util.concurrent.TimeUnit unit)",
      "comment": "Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses. This method is behaviorally equivalent to:  method_0 > 0",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "awaitUntil(java.util.Date deadline)",
    "name": "awaitUntil",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.Condition",
      "name": "Condition",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.Condition",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Date",
          "name": "Date",
          "isArray": false
        },
        "name": "deadline"
      }
    ],
    "protocol": {
      "member": "awaitUntil(java.util.Date deadline)",
      "comment": "Causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses. The lock associated with this condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of five things happens:  <li>Some other thread invokes the method_5 method for this Condition and the current thread happens to be chosen as the thread to be awakened; or <li>Some other thread invokes the method_5All method for this Condition; or <li>Some other thread method_7 interrupts the current thread, and interruption of thread suspension is supported; or <li>The specified deadline elapses; or <li>A &quot;<em>spurious wakeup</em>&quot; occurs.  In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread:  <li>has its interrupted status set on entry to this method; or <li>is method_7 interrupted while waiting and interruption of thread suspension is supported,  then InterruptedException is thrown and the current thread's interrupted status is cleared. It is not specified, in the first case, whether or not the test for interruption occurs before the lock is released. The return value indicates whether the deadline has elapsed, which can be used as follows:  boolean method_0 { boolean stillWaiting = true; method_1; try { while (method_2 { if (!stillWaiting) return false; stillWaiting = method_3;  // ... } finally { method_4; } }} Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact. An implementation can favor responding to an interrupt over normal method return in response to a signal, or over indicating the passing of the specified deadline. In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "signal()",
    "name": "signal",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.Condition",
      "name": "Condition",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.Condition",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "signal()",
      "comment": "Wakes up one waiting thread. If any threads are waiting on this condition then one is selected for waking up. That thread must then re-acquire the lock before returning from await. Implementation Considerations An implementation may (and typically does) require that the current thread hold the lock associated with this Condition when this method is called. Implementations must document this precondition and any actions taken if the lock is not held. Typically, an exception such as IllegalMonitorStateException will be thrown.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "signalAll()",
    "name": "signalAll",
    "containingClass": {
      "qualifiedName": "java.util.concurrent.locks.Condition",
      "name": "Condition",
      "isArray": false
    },
    "targetClass": "java.util.concurrent.locks.Condition",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "signalAll()",
      "comment": "Wakes up all waiting threads. If any threads are waiting on this condition then they are all woken up. Each thread must re-acquire the lock before it can return from await. Implementation Considerations An implementation may (and typically does) require that the current thread hold the lock associated with this Condition when this method is called. Implementations must document this precondition and any actions taken if the lock is not held. Typically, an exception such as IllegalMonitorStateException will be thrown.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]