[
  {
    "signature": "java.util.logging.FileHandler()",
    "name": "java.util.logging.FileHandler",
    "containingClass": {
      "qualifiedName": "java.util.logging.FileHandler",
      "name": "FileHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.FileHandler",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "java.util.logging.FileHandler()",
      "comment": "Construct a default FileHandler. This will be configured entirely from LogManager properties (or their default values).  @exception IOException if there are IO problems opening the files. @exception SecurityException if a security manager exists and if the caller does not have method_0. @exception NullPointerException if pattern property is an empty String.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.logging.FileHandler(java.lang.String pattern)",
    "name": "java.util.logging.FileHandler",
    "containingClass": {
      "qualifiedName": "java.util.logging.FileHandler",
      "name": "FileHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.FileHandler",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      }
    ],
    "protocol": {
      "member": "java.util.logging.FileHandler(java.lang.String pattern)",
      "comment": "Initialize a FileHandler to write to the given filename.  The FileHandler is configured based on LogManager properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, and the file count is set to one.  There is no limit on the amount of data that may be written, so use this with care.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.logging.FileHandler(java.lang.String pattern, boolean append)",
    "name": "java.util.logging.FileHandler",
    "containingClass": {
      "qualifiedName": "java.util.logging.FileHandler",
      "name": "FileHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.FileHandler",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "append"
      }
    ],
    "protocol": {
      "member": "java.util.logging.FileHandler(java.lang.String pattern, boolean append)",
      "comment": "Initialize a FileHandler to write to the given filename, with optional append.  The FileHandler is configured based on LogManager properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, the file count is set to one, and the append mode is set to the given append argument.  There is no limit on the amount of data that may be written, so use this with care.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.logging.FileHandler(java.lang.String pattern, int limit, int count)",
    "name": "java.util.logging.FileHandler",
    "containingClass": {
      "qualifiedName": "java.util.logging.FileHandler",
      "name": "FileHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.FileHandler",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "limit"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      }
    ],
    "protocol": {
      "member": "java.util.logging.FileHandler(java.lang.String pattern, int limit, int count)",
      "comment": "Initialize a FileHandler to write to a set of files. When (approximately) the given limit has been written to one file, another file will be opened. The output will cycle through a set of count files.  The FileHandler is configured based on LogManager properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument.  The count must be at least 1.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.logging.FileHandler(java.lang.String pattern, int limit, int count, boolean append)",
    "name": "java.util.logging.FileHandler",
    "containingClass": {
      "qualifiedName": "java.util.logging.FileHandler",
      "name": "FileHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.FileHandler",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "pattern"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "limit"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "count"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "append"
      }
    ],
    "protocol": {
      "member": "java.util.logging.FileHandler(java.lang.String pattern, int limit, int count, boolean append)",
      "comment": "Initialize a FileHandler to write to a set of files with optional append. When (approximately) the given limit has been written to one file, another file will be opened. The output will cycle through a set of count files.  The FileHandler is configured based on LogManager properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument, and the append mode is set to the given append argument.  The count must be at least 1.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "publish(java.util.logging.LogRecord record)",
    "name": "publish",
    "containingClass": {
      "qualifiedName": "java.util.logging.FileHandler",
      "name": "FileHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.FileHandler",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.logging.LogRecord",
          "name": "LogRecord",
          "isArray": false
        },
        "name": "record"
      }
    ],
    "protocol": {
      "member": "publish(java.util.logging.LogRecord record)",
      "comment": "Format and publish a LogRecord.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "close()",
    "name": "close",
    "containingClass": {
      "qualifiedName": "java.util.logging.FileHandler",
      "name": "FileHandler",
      "isArray": false
    },
    "targetClass": "java.util.logging.FileHandler",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "close()",
      "comment": "Close all the files. @exception SecurityException if a security manager exists and if the caller does not have method_0.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]