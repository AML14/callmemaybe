[
  {
    "signature": "weka.classifiers.trees.j48.NBTreeSplit(int attIndex, int minNoObj, double sumOfWeights)",
    "name": "weka.classifiers.trees.j48.NBTreeSplit",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "attIndex"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minNoObj"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "sumOfWeights"
      }
    ],
    "protocol": {
      "member": "weka.classifiers.trees.j48.NBTreeSplit(int attIndex, int minNoObj, double sumOfWeights)",
      "comment": "Initializes the split model.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances trainInstances)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "trainInstances"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances trainInstances)",
      "comment": "Creates a NBTree-type split on the given data. Assumes that none of the class values is missing. @exception Exception if something goes wrong",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "attIndex()",
    "name": "attIndex",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "attIndex()",
      "comment": "Returns index of attribute for which split was generated.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "whichSubset(weka.core.Instance instance)",
    "name": "whichSubset",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "whichSubset(weka.core.Instance instance)",
      "comment": "Returns index of subset instance is assigned to. Returns -1 if instance is assigned to more than one subset. @exception Exception if something goes wrong",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "weights(weka.core.Instance instance)",
    "name": "weights",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      }
    ],
    "protocol": {
      "member": "weights(weka.core.Instance instance)",
      "comment": "Returns weights if instance is assigned to more than one subset. Returns null if instance is only assigned to one subset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sourceExpression(int index, weka.core.Instances data)",
    "name": "sourceExpression",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "sourceExpression(int index, weka.core.Instances data)",
      "comment": "Returns a string containing java source code equivalent to the test made at this node. The instance being tested is called \"i\".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "rightSide(int index, weka.core.Instances data)",
    "name": "rightSide",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "rightSide(int index, weka.core.Instances data)",
      "comment": "Prints the condition satisfied by instances in a subset.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "leftSide(weka.core.Instances data)",
    "name": "leftSide",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "leftSide(weka.core.Instances data)",
      "comment": "Prints left side of condition..",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "classProb(int classIndex, weka.core.Instance instance, int theSubset)",
    "name": "classProb",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "classIndex"
      },
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "instance"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "theSubset"
      }
    ],
    "protocol": {
      "member": "classProb(int classIndex, weka.core.Instance instance, int theSubset)",
      "comment": "Return the probability for a class value",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getGlobalModel()",
    "name": "getGlobalModel",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeNoSplit",
      "name": "weka.classifiers.trees.j48.NBTreeNoSplit",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getGlobalModel()",
      "comment": "Return the global naive bayes model for this node",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setGlobalModel(weka.classifiers.trees.j48.NBTreeNoSplit global)",
    "name": "setGlobalModel",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.classifiers.trees.j48.NBTreeNoSplit",
          "name": "NBTreeNoSplit",
          "isArray": false
        },
        "name": "global"
      }
    ],
    "protocol": {
      "member": "setGlobalModel(weka.classifiers.trees.j48.NBTreeNoSplit global)",
      "comment": "Set the global naive bayes model for this node",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getErrors()",
    "name": "getErrors",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getErrors()",
      "comment": "Return the errors made by the naive bayes models arising from this split.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getRevision()",
    "name": "getRevision",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.j48.NBTreeSplit",
      "name": "NBTreeSplit",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.j48.NBTreeSplit",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getRevision()",
      "comment": "Returns the revision string.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]