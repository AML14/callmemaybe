[
  {
    "signature": "java.util.stream.IntPipeline(java.util.function.Supplier<? extends java.util.Spliterator<java.lang.Integer>> source, int sourceFlags, boolean parallel)",
    "name": "java.util.stream.IntPipeline",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "sourceFlags"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "java.util.stream.IntPipeline(java.util.function.Supplier<? extends java.util.Spliterator<java.lang.Integer>> source, int sourceFlags, boolean parallel)",
      "comment": "Constructor for the head of a stream pipeline.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.stream.IntPipeline(java.util.Spliterator<java.lang.Integer> source, int sourceFlags, boolean parallel)",
    "name": "java.util.stream.IntPipeline",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Spliterator",
          "name": "Spliterator",
          "isArray": false
        },
        "name": "source"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "sourceFlags"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "parallel"
      }
    ],
    "protocol": {
      "member": "java.util.stream.IntPipeline(java.util.Spliterator<java.lang.Integer> source, int sourceFlags, boolean parallel)",
      "comment": "Constructor for the head of a stream pipeline.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.stream.IntPipeline(java.util.stream.AbstractPipeline<?, E_IN, ?> upstream, int opFlags)",
    "name": "java.util.stream.IntPipeline",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.AbstractPipeline",
          "name": "AbstractPipeline",
          "isArray": false
        },
        "name": "upstream"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "opFlags"
      }
    ],
    "protocol": {
      "member": "java.util.stream.IntPipeline(java.util.stream.AbstractPipeline<?, E_IN, ?> upstream, int opFlags)",
      "comment": "Constructor for appending an intermediate operation onto an existing pipeline.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOutputShape()",
    "name": "getOutputShape",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.StreamShape",
      "name": "java.util.stream.StreamShape",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getOutputShape()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "evaluateToNode(java.util.stream.PipelineHelper<java.lang.Integer> helper, java.util.Spliterator<P_IN> spliterator, boolean flattenTree, java.util.function.IntFunction<java.lang.Integer[]> generator)",
    "name": "evaluateToNode",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Node<java.lang.Integer>",
      "name": "java.util.stream.Node<java.lang.Integer>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.PipelineHelper",
          "name": "PipelineHelper",
          "isArray": false
        },
        "name": "helper"
      },
      {
        "type": {
          "qualifiedName": "java.util.Spliterator",
          "name": "Spliterator",
          "isArray": false
        },
        "name": "spliterator"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "flattenTree"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.IntFunction",
          "name": "IntFunction",
          "isArray": false
        },
        "name": "generator"
      }
    ],
    "protocol": {
      "member": "evaluateToNode(java.util.stream.PipelineHelper<java.lang.Integer> helper, java.util.Spliterator<P_IN> spliterator, boolean flattenTree, java.util.function.IntFunction<java.lang.Integer[]> generator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "wrap(java.util.stream.PipelineHelper<java.lang.Integer> ph, java.util.function.Supplier<java.util.Spliterator<P_IN>> supplier, boolean isParallel)",
    "name": "wrap",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<java.lang.Integer>",
      "name": "java.util.Spliterator<java.lang.Integer>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.stream.PipelineHelper",
          "name": "PipelineHelper",
          "isArray": false
        },
        "name": "ph"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "supplier"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "isParallel"
      }
    ],
    "protocol": {
      "member": "wrap(java.util.stream.PipelineHelper<java.lang.Integer> ph, java.util.function.Supplier<java.util.Spliterator<P_IN>> supplier, boolean isParallel)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lazySpliterator(java.util.function.Supplier<? extends java.util.Spliterator<java.lang.Integer>> supplier)",
    "name": "lazySpliterator",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator$OfInt",
      "name": "java.util.Spliterator$OfInt",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "supplier"
      }
    ],
    "protocol": {
      "member": "lazySpliterator(java.util.function.Supplier<? extends java.util.Spliterator<java.lang.Integer>> supplier)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEachWithCancel(java.util.Spliterator<java.lang.Integer> spliterator, java.util.stream.Sink<java.lang.Integer> sink)",
    "name": "forEachWithCancel",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Spliterator",
          "name": "Spliterator",
          "isArray": false
        },
        "name": "spliterator"
      },
      {
        "type": {
          "qualifiedName": "java.util.stream.Sink",
          "name": "Sink",
          "isArray": false
        },
        "name": "sink"
      }
    ],
    "protocol": {
      "member": "forEachWithCancel(java.util.Spliterator<java.lang.Integer> spliterator, java.util.stream.Sink<java.lang.Integer> sink)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "makeNodeBuilder(long exactSizeIfKnown, java.util.function.IntFunction<java.lang.Integer[]> generator)",
    "name": "makeNodeBuilder",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Node$Builder<java.lang.Integer>",
      "name": "java.util.stream.Node$Builder<java.lang.Integer>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "exactSizeIfKnown"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.IntFunction",
          "name": "IntFunction",
          "isArray": false
        },
        "name": "generator"
      }
    ],
    "protocol": {
      "member": "makeNodeBuilder(long exactSizeIfKnown, java.util.function.IntFunction<java.lang.Integer[]> generator)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.PrimitiveIterator$OfInt",
      "name": "java.util.PrimitiveIterator$OfInt",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "iterator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator$OfInt",
      "name": "java.util.Spliterator$OfInt",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "spliterator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asLongStream()",
    "name": "asLongStream",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.LongStream",
      "name": "java.util.stream.LongStream",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "asLongStream()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asDoubleStream()",
    "name": "asDoubleStream",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.DoubleStream",
      "name": "java.util.stream.DoubleStream",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "asDoubleStream()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "boxed()",
    "name": "boxed",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<java.lang.Integer>",
      "name": "java.util.stream.Stream<java.lang.Integer>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "boxed()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "map(java.util.function.IntUnaryOperator mapper)",
    "name": "map",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntUnaryOperator",
          "name": "IntUnaryOperator",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "map(java.util.function.IntUnaryOperator mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapToObj(java.util.function.IntFunction<? extends U> mapper)",
    "name": "mapToObj",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.Stream<U>",
      "name": "java.util.stream.Stream<U>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntFunction",
          "name": "IntFunction",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "mapToObj(java.util.function.IntFunction<? extends U> mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapToLong(java.util.function.IntToLongFunction mapper)",
    "name": "mapToLong",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.LongStream",
      "name": "java.util.stream.LongStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntToLongFunction",
          "name": "IntToLongFunction",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "mapToLong(java.util.function.IntToLongFunction mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mapToDouble(java.util.function.IntToDoubleFunction mapper)",
    "name": "mapToDouble",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.DoubleStream",
      "name": "java.util.stream.DoubleStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntToDoubleFunction",
          "name": "IntToDoubleFunction",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "mapToDouble(java.util.function.IntToDoubleFunction mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "flatMap(java.util.function.IntFunction<? extends java.util.stream.IntStream> mapper)",
    "name": "flatMap",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntFunction",
          "name": "IntFunction",
          "isArray": false
        },
        "name": "mapper"
      }
    ],
    "protocol": {
      "member": "flatMap(java.util.function.IntFunction<? extends java.util.stream.IntStream> mapper)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unordered()",
    "name": "unordered",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "unordered()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "filter(java.util.function.IntPredicate predicate)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntPredicate",
          "name": "IntPredicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "protocol": {
      "member": "filter(java.util.function.IntPredicate predicate)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peek(java.util.function.IntConsumer action)",
    "name": "peek",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntConsumer",
          "name": "IntConsumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "peek(java.util.function.IntConsumer action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "limit(long maxSize)",
    "name": "limit",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "maxSize"
      }
    ],
    "protocol": {
      "member": "limit(long maxSize)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "skip(long n)",
    "name": "skip",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "long",
          "name": "long",
          "isArray": false
        },
        "name": "n"
      }
    ],
    "protocol": {
      "member": "skip(long n)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sorted()",
    "name": "sorted",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "sorted()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "distinct()",
    "name": "distinct",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.stream.IntStream",
      "name": "java.util.stream.IntStream",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "distinct()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEach(java.util.function.IntConsumer action)",
    "name": "forEach",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntConsumer",
          "name": "IntConsumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "forEach(java.util.function.IntConsumer action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEachOrdered(java.util.function.IntConsumer action)",
    "name": "forEachOrdered",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntConsumer",
          "name": "IntConsumer",
          "isArray": false
        },
        "name": "action"
      }
    ],
    "protocol": {
      "member": "forEachOrdered(java.util.function.IntConsumer action)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "sum()",
    "name": "sum",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "sum()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "min()",
    "name": "min",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.OptionalInt",
      "name": "java.util.OptionalInt",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "min()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "max()",
    "name": "max",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.OptionalInt",
      "name": "java.util.OptionalInt",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "max()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "count()",
    "name": "count",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "long",
      "name": "long",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "count()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "average()",
    "name": "average",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.OptionalDouble",
      "name": "java.util.OptionalDouble",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "average()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "summaryStatistics()",
    "name": "summaryStatistics",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.IntSummaryStatistics",
      "name": "java.util.IntSummaryStatistics",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "summaryStatistics()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reduce(int identity, java.util.function.IntBinaryOperator op)",
    "name": "reduce",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "identity"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.IntBinaryOperator",
          "name": "IntBinaryOperator",
          "isArray": false
        },
        "name": "op"
      }
    ],
    "protocol": {
      "member": "reduce(int identity, java.util.function.IntBinaryOperator op)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "reduce(java.util.function.IntBinaryOperator op)",
    "name": "reduce",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.OptionalInt",
      "name": "java.util.OptionalInt",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntBinaryOperator",
          "name": "IntBinaryOperator",
          "isArray": false
        },
        "name": "op"
      }
    ],
    "protocol": {
      "member": "reduce(java.util.function.IntBinaryOperator op)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "collect(java.util.function.Supplier<R> supplier, java.util.function.ObjIntConsumer<R> accumulator, java.util.function.BiConsumer<R, R> combiner)",
    "name": "collect",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "R",
      "name": "R",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.Supplier",
          "name": "Supplier",
          "isArray": false
        },
        "name": "supplier"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.ObjIntConsumer",
          "name": "ObjIntConsumer",
          "isArray": false
        },
        "name": "accumulator"
      },
      {
        "type": {
          "qualifiedName": "java.util.function.BiConsumer",
          "name": "BiConsumer",
          "isArray": false
        },
        "name": "combiner"
      }
    ],
    "protocol": {
      "member": "collect(java.util.function.Supplier<R> supplier, java.util.function.ObjIntConsumer<R> accumulator, java.util.function.BiConsumer<R, R> combiner)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "anyMatch(java.util.function.IntPredicate predicate)",
    "name": "anyMatch",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntPredicate",
          "name": "IntPredicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "protocol": {
      "member": "anyMatch(java.util.function.IntPredicate predicate)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "allMatch(java.util.function.IntPredicate predicate)",
    "name": "allMatch",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntPredicate",
          "name": "IntPredicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "protocol": {
      "member": "allMatch(java.util.function.IntPredicate predicate)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "noneMatch(java.util.function.IntPredicate predicate)",
    "name": "noneMatch",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.function.IntPredicate",
          "name": "IntPredicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "protocol": {
      "member": "noneMatch(java.util.function.IntPredicate predicate)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "findFirst()",
    "name": "findFirst",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.OptionalInt",
      "name": "java.util.OptionalInt",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "findFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "findAny()",
    "name": "findAny",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.OptionalInt",
      "name": "java.util.OptionalInt",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "findAny()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.stream.IntPipeline",
      "name": "IntPipeline",
      "isArray": false
    },
    "targetClass": "java.util.stream.IntPipeline",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int[]",
      "name": "int[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "toArray()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]