[
  {
    "signature": "comparator()",
    "name": "comparator",
    "containingClass": {
      "qualifiedName": "java.util.SortedMap",
      "name": "SortedMap",
      "isArray": false
    },
    "targetClass": "java.util.SortedMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<? super K>",
      "name": "java.util.Comparator<? super K>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "comparator()",
      "comment": "Returns the comparator used to order the keys in this map, or null if this map uses the Comparable natural ordering of its keys.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subMap(K fromKey, K toKey)",
    "name": "subMap",
    "containingClass": {
      "qualifiedName": "java.util.SortedMap",
      "name": "SortedMap",
      "isArray": false
    },
    "targetClass": "java.util.SortedMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedMap<K, V>",
      "name": "java.util.SortedMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromKey"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toKey"
      }
    ],
    "protocol": {
      "member": "subMap(K fromKey, K toKey)",
      "comment": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "headMap(K toKey)",
    "name": "headMap",
    "containingClass": {
      "qualifiedName": "java.util.SortedMap",
      "name": "SortedMap",
      "isArray": false
    },
    "targetClass": "java.util.SortedMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedMap<K, V>",
      "name": "java.util.SortedMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "toKey"
      }
    ],
    "protocol": {
      "member": "headMap(K toKey)",
      "comment": "Returns a view of the portion of this map whose keys are strictly less than toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tailMap(K fromKey)",
    "name": "tailMap",
    "containingClass": {
      "qualifiedName": "java.util.SortedMap",
      "name": "SortedMap",
      "isArray": false
    },
    "targetClass": "java.util.SortedMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.SortedMap<K, V>",
      "name": "java.util.SortedMap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "fromKey"
      }
    ],
    "protocol": {
      "member": "tailMap(K fromKey)",
      "comment": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "firstKey()",
    "name": "firstKey",
    "containingClass": {
      "qualifiedName": "java.util.SortedMap",
      "name": "SortedMap",
      "isArray": false
    },
    "targetClass": "java.util.SortedMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "K",
      "name": "K",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "firstKey()",
      "comment": "Returns the first (lowest) key currently in this map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lastKey()",
    "name": "lastKey",
    "containingClass": {
      "qualifiedName": "java.util.SortedMap",
      "name": "SortedMap",
      "isArray": false
    },
    "targetClass": "java.util.SortedMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "K",
      "name": "K",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "lastKey()",
      "comment": "Returns the last (highest) key currently in this map.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "keySet()",
    "name": "keySet",
    "containingClass": {
      "qualifiedName": "java.util.SortedMap",
      "name": "SortedMap",
      "isArray": false
    },
    "targetClass": "java.util.SortedMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<K>",
      "name": "java.util.Set<K>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "keySet()",
      "comment": "Returns a Set view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the method_0, method_1, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "values()",
    "name": "values",
    "containingClass": {
      "qualifiedName": "java.util.SortedMap",
      "name": "SortedMap",
      "isArray": false
    },
    "targetClass": "java.util.SortedMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<V>",
      "name": "java.util.Collection<V>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "values()",
      "comment": "Returns a Collection view of the values contained in this map. The collection's iterator returns the values in ascending order of the corresponding keys. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the method_0, method_1, removeAll, retainAll and clear operations. It does not support the add or addAll operations.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "entrySet()",
    "name": "entrySet",
    "containingClass": {
      "qualifiedName": "java.util.SortedMap",
      "name": "SortedMap",
      "isArray": false
    },
    "targetClass": "java.util.SortedMap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<java.util.Map$Entry<K, V>>",
      "name": "java.util.Set<java.util.Map$Entry<K, V>>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "entrySet()",
      "comment": "Returns a Set view of the mappings contained in this map. The set's iterator returns the entries in ascending key order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation, or through the setValue operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the method_0, method_1, removeAll, retainAll and clear operations. It does not support the add or addAll operations.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]