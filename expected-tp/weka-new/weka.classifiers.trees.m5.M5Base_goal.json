[
  {
    "signature": "weka.classifiers.trees.m5.M5Base()",
    "name": "weka.classifiers.trees.m5.M5Base",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "parameters": [],
    "protocol": {
      "member": "weka.classifiers.trees.m5.M5Base()",
      "comment": "Constructor",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "globalInfo()",
    "name": "globalInfo",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "globalInfo()",
      "comment": "returns information about the classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getTechnicalInformation()",
    "name": "getTechnicalInformation",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.TechnicalInformation",
      "name": "weka.core.TechnicalInformation",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getTechnicalInformation()",
      "comment": "Returns an instance of a TechnicalInformation object, containing detailed information about the technical background of this class, emethod_0., paper reference or book this class is based on.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "listOptions()",
    "name": "listOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<weka.core.Option>",
      "name": "java.util.Enumeration<weka.core.Option>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "listOptions()",
      "comment": "Returns an enumeration describing the available options",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setOptions(java.lang.String[] options)",
    "name": "setOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "options"
      }
    ],
    "protocol": {
      "member": "setOptions(java.lang.String[] options)",
      "comment": "Parses a given list of options.  Valid options are:  -U <br> Use unsmoothed predictions.  -R <br> Build a regression tree rather than a model tree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOptions()",
    "name": "getOptions",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String[]",
      "name": "java.lang.String[]",
      "isArray": true
    },
    "parameters": [],
    "protocol": {
      "member": "getOptions()",
      "comment": "Gets the current settings of the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unprunedTipText()",
    "name": "unprunedTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "unprunedTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUnpruned(boolean unpruned)",
    "name": "setUnpruned",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "unpruned"
      }
    ],
    "protocol": {
      "member": "setUnpruned(boolean unpruned)",
      "comment": "Use unpruned tree/rules",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUnpruned()",
    "name": "getUnpruned",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getUnpruned()",
      "comment": "Get whether unpruned tree/rules are being generated",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "generateRulesTipText()",
    "name": "generateRulesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "generateRulesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setGenerateRules(boolean u)",
    "name": "setGenerateRules",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "u"
      }
    ],
    "protocol": {
      "member": "setGenerateRules(boolean u)",
      "comment": "Generate rules (decision list) rather than a tree",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getGenerateRules()",
    "name": "getGenerateRules",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getGenerateRules()",
      "comment": "get whether rules are being generated rather than a tree",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "useUnsmoothedTipText()",
    "name": "useUnsmoothedTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "useUnsmoothedTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setUseUnsmoothed(boolean s)",
    "name": "setUseUnsmoothed",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "s"
      }
    ],
    "protocol": {
      "member": "setUseUnsmoothed(boolean s)",
      "comment": "Use unsmoothed predictions",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getUseUnsmoothed()",
    "name": "getUseUnsmoothed",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getUseUnsmoothed()",
      "comment": "Get whether or not smoothing is being used",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildRegressionTreeTipText()",
    "name": "buildRegressionTreeTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "buildRegressionTreeTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getBuildRegressionTree()",
    "name": "getBuildRegressionTree",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getBuildRegressionTree()",
      "comment": "Get the value of regressionTree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setBuildRegressionTree(boolean newregressionTree)",
    "name": "setBuildRegressionTree",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "newregressionTree"
      }
    ],
    "protocol": {
      "member": "setBuildRegressionTree(boolean newregressionTree)",
      "comment": "Set the value of regressionTree.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "minNumInstancesTipText()",
    "name": "minNumInstancesTipText",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "minNumInstancesTipText()",
      "comment": "Returns the tip text for this property",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setMinNumInstances(double minNum)",
    "name": "setMinNumInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "minNum"
      }
    ],
    "protocol": {
      "member": "setMinNumInstances(double minNum)",
      "comment": "Set the minimum number of instances to allow at a leaf node",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMinNumInstances()",
    "name": "getMinNumInstances",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getMinNumInstances()",
      "comment": "Get the minimum number of instances to allow at a leaf node",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getCapabilities()",
    "name": "getCapabilities",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.core.Capabilities",
      "name": "weka.core.Capabilities",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getCapabilities()",
      "comment": "Returns default capabilities of the classifier, imethod_0., of LinearRegression.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "buildClassifier(weka.core.Instances data)",
    "name": "buildClassifier",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instances",
          "name": "Instances",
          "isArray": false
        },
        "name": "data"
      }
    ],
    "protocol": {
      "member": "buildClassifier(weka.core.Instances data)",
      "comment": "Generates the classifier.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "classifyInstance(weka.core.Instance inst)",
    "name": "classifyInstance",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "weka.core.Instance",
          "name": "Instance",
          "isArray": false
        },
        "name": "inst"
      }
    ],
    "protocol": {
      "member": "classifyInstance(weka.core.Instance inst)",
      "comment": "Calculates a prediction for an instance using a set of rules or an M5 model tree",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "toString()",
      "comment": "Returns a description of the classifier",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "enumerateMeasures()",
    "name": "enumerateMeasures",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<java.lang.String>",
      "name": "java.util.Enumeration<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "enumerateMeasures()",
      "comment": "Returns an enumeration of the additional measure names",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getMeasure(java.lang.String additionalMeasureName)",
    "name": "getMeasure",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "additionalMeasureName"
      }
    ],
    "protocol": {
      "member": "getMeasure(java.lang.String additionalMeasureName)",
      "comment": "Returns the value of the named measure",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "measureNumRules()",
    "name": "measureNumRules",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "measureNumRules()",
      "comment": "return the number of rules",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getM5RootNode()",
    "name": "getM5RootNode",
    "containingClass": {
      "qualifiedName": "weka.classifiers.trees.m5.M5Base",
      "name": "M5Base",
      "isArray": false
    },
    "targetClass": "weka.classifiers.trees.m5.M5Base",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "weka.classifiers.trees.m5.RuleNode",
      "name": "weka.classifiers.trees.m5.RuleNode",
      "isArray": false
    },
    "parameters": [],
    "protocol": {
      "member": "getM5RootNode()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]